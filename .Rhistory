# gs_end <- gs_info[gs_info$year == yr, "end"]
df_mc$growing_season[which(df_mc$month %in% c(month_start_growing_season:month_end_growing_season) & df_mc$year==yr)] <- paste("Growing season", yr, sep= " ")
#df_mc$growing_season[which(!(df_mc$month %in% c(month_start_growing_season:month_end_growing_season)) & df_mc$year==yr)] <-  paste("Non growing season", yr, sep= " ")
df_mc$growing_season[which((df_mc$month < month_start_growing_season) & df_mc$year==yr)] <-  paste("Non growing season1", yr, sep= " ")
df_mc$growing_season[which((df_mc$month > month_end_growing_season) & df_mc$year==yr)] <-  paste("Non growing season2", yr, sep= " ")
}
}
if(growing_season_definition %in% c("meteorological", 'soil_temp', 'soil_temp_mean')){
for(yr in unique(df_mc$year)){
gs_start <- gs_info[gs_info$year == yr, "start"]
gs_end <- gs_info[gs_info$year == yr, "end"]
df_mc$growing_season[which(df_mc$date >= gs_start & df_mc$date <= gs_end & df_mc$year==yr)] <- paste("Growing season", yr, sep= " ")
#df_mc$growing_season[which(!(df_mc$month %in% c(month_start_growing_season:month_end_growing_season)) & df_mc$year==yr)] <-  paste("Non growing season", yr, sep= " ")
df_mc$growing_season[which(df_mc$date < gs_start & df_mc$year==yr)] <-  paste("Non growing season1", yr, sep= " ")
df_mc$growing_season[which(df_mc$date > gs_end & df_mc$year==yr)] <-  paste("Non growing season2", yr, sep= " ")
}
}
rd_err_df_gs <- rd_err_df %>%
dplyr::group_by(year,growing_season) %>%
dplyr::summarise(meas_err=sqrt(sum((meas_err^2))))
df_gs <- df_mc %>%
dplyr::mutate(FCH4_f=PostEddyPro::umolCH4m2s_to_mgCH4m2_30min(ch4_flux_final_filled)) %>%
dplyr::group_by(year,growing_season,iteration) %>%
dplyr::summarise(FCH4_sum = sum(FCH4_f)) %>%
dplyr::group_by(year,growing_season) %>%
dplyr::summarise(FCH4_sd = stats::sd(FCH4_sum)) %>%
merge(rd_err_df_gs[,c("year","growing_season","meas_err")], all=TRUE)
#year
rd_err_df_year <- rd_err_df %>%
dplyr::mutate(year=lubridate::year(datetime)) %>%
dplyr::group_by(year) %>%
dplyr::summarise(meas_err=sqrt(sum((meas_err^2))))
df_year <- df_mc %>%
dplyr::rename(FCH4_f=ch4_flux_final_filled) %>%
dplyr::mutate(FCH4_f=PostEddyPro::umolCH4m2s_to_mgCH4m2_30min(FCH4_f),
year=lubridate::year(datetime)) %>%
dplyr::group_by(year,iteration) %>%
dplyr::summarise(FCH4_sum = sum(FCH4_f)) %>%
dplyr::group_by(year) %>%
dplyr::summarise(FCH4_sd = stats::sd(FCH4_sum)) %>%
merge(rd_err_df_year, all=TRUE)
flux_df <- flux_df %>%
dplyr::mutate(ch4_flux_final_filled=PostEddyPro::umolCH4m2s_to_mgCH4m2_30min(ch4_flux_final_filled))
View(flux_df)
flux_df %>%
dplyr::select(c(datetime,"ch4_flux_final_filled","quality"))%>%
merge(df_30min %>% dplyr::select(-ch4_flux_final_filled), by=datetime, all = TRUE)
flux_df %>%
dplyr::select(c(datetime,"ch4_flux_final_filled","quality"))%>%
data.table::merge.data.table(df_30min, by=datetime, all = TRUE)
data.table::setDT(flux_df) %>%
dplyr::select(c(datetime,"ch4_flux_final_filled","quality"))%>%
data.table::merge.data.table(data.table::setDT(df_30min), by=datetime, all = TRUE)
data.table::setDT(df_30min)$datetime
data.table::setDT(flux_df)$datetime
flux_df_30min <- data.table::setDT(flux_df) %>%
dplyr::select(c(datetime,"ch4_flux_final_filled","quality"))%>%
data.table::merge.data.table(data.table::setDT(df_30min), by=datetime)%>%
dplyr::rename(gapf_err=FCH4_sd) %>%
dplyr::mutate(tot_err = ifelse(quality=="original",
meas_err,
ifelse(quality=="gapfilled",
sqrt(meas_err^2+gapf_err^2),
NA)
)) %>%
dplyr::select(c(datetime, "ch4_flux_final_filled","quality","meas_err","gapf_err","tot_err")) %>%
dplyr::rename(FCH4=ch4_flux_final_filled)
View(flux_df_30min)
flux_df_30min <- data.table::setDT(flux_df) %>%
dplyr::select(c(datetime,"ch4_flux_final_filled","quality"))%>%
data.table::merge.data.table(data.table::setDT(df_30min), by=datetime, all.x = TRUE)%>%
dplyr::rename(gapf_err=FCH4_sd) %>%
dplyr::mutate(tot_err = ifelse(quality=="original",
meas_err,
ifelse(quality=="gapfilled",
sqrt(meas_err^2+gapf_err^2),
NA)
)) %>%
dplyr::select(c(datetime, "ch4_flux_final_filled","quality","meas_err","gapf_err","tot_err")) %>%
dplyr::rename(FCH4=ch4_flux_final_filled)
View(flux_df_30min)
flux_df_30min <- data.table::setDT(flux_df) %>%
dplyr::select(c(datetime,"ch4_flux_final_filled","quality"))%>%
data.table::merge.data.table(data.table::setDT(df_30min), by=datetime, all = TRUE)%>%
dplyr::rename(gapf_err=FCH4_sd) %>%
dplyr::mutate(tot_err = ifelse(quality=="original",
meas_err,
ifelse(quality=="gapfilled",
sqrt(meas_err^2+gapf_err^2),
NA)
)) %>%
dplyr::select(c(datetime, "ch4_flux_final_filled","quality","meas_err","gapf_err","tot_err")) %>%
dplyr::rename(FCH4=ch4_flux_final_filled)
View(flux_df_30min)
test1 <- data.table::setDT(flux_df)
str(test1)
test2 <- data.table::setDT(df_30min)
str(test2$datetime)
test1$datetime - test2$datetime
unique(test1$datetime - test2$datetime)
flux_df_30min <- data.table::setDT(flux_df) %>%
dplyr::select(c(datetime,"ch4_flux_final_filled","quality"))%>%
data.table::merge.data.table(data.table::setDT(df_30min), by="datetime", all = TRUE)%>%
dplyr::rename(gapf_err=FCH4_sd) %>%
dplyr::mutate(tot_err = ifelse(quality=="original",
meas_err,
ifelse(quality=="gapfilled",
sqrt(meas_err^2+gapf_err^2),
NA)
)) %>%
dplyr::select(c(datetime, "ch4_flux_final_filled","quality","meas_err","gapf_err","tot_err")) %>%
dplyr::rename(FCH4=ch4_flux_final_filled)
test1$ch4_flux_final_filled
flux_df_30min <- data.table::setDT(flux_df) %>%
dplyr::select(c(datetime,"ch4_flux_final_filled","quality"))%>%
data.table::merge.data.table(data.table::setDT(df_30min), by="datetime", all = TRUE)%>%
dplyr::rename(gapf_err=FCH4_sd) %>%
dplyr::mutate(tot_err = ifelse(quality=="original",
meas_err,
ifelse(quality=="gapfilled",
sqrt(meas_err^2+gapf_err^2),
NA)
)) %>%
dplyr::select(c(datetime, "ch4_flux_final_filled","quality","meas_err","gapf_err","tot_err")) %>%
dplyr::rename(FCH4=ch4_flux_final_filled)
flux_df_30min <- data.table::setDT(flux_df) %>%
dplyr::select(c(datetime,ch4_flux_final_filled,"quality"))%>%
data.table::merge.data.table(data.table::setDT(df_30min), by="datetime", all = TRUE)%>%
dplyr::rename(gapf_err=FCH4_sd) %>%
dplyr::mutate(tot_err = ifelse(quality=="original",
meas_err,
ifelse(quality=="gapfilled",
sqrt(meas_err^2+gapf_err^2),
NA)
))
View(flux_df_30min)
flux_df_30min <- data.table::setDT(flux_df) %>%
dplyr::select(datetime,ch4_flux_final_filled,quality)%>%
data.table::merge.data.table(data.table::setDT(df_30min), by="datetime", all = TRUE)%>%
dplyr::rename(gapf_err=FCH4_sd)
View(flux_df_30min)
flux_df_30min <- data.table::setDT(flux_df) %>%
dplyr::select(datetime,ch4_flux_final_filled,quality)%>%
data.table::merge.data.table(data.table::setDT(df_30min %>% select(-ch4_flux_final_filled)), by="datetime", all = TRUE)%>%
dplyr::rename(gapf_err=FCH4_sd) %>%
dplyr::mutate(tot_err = ifelse(quality=="original",
meas_err,
ifelse(quality=="gapfilled",
sqrt(meas_err^2+gapf_err^2),
NA)
)) %>%
dplyr::select(c(datetime, "ch4_flux_final_filled","quality","meas_err","gapf_err","tot_err")) %>%
dplyr::rename(FCH4=ch4_flux_final_filled)
View(flux_df_30min)
flux_df_30min <- data.table::setDT(flux_df) %>%
dplyr::select(datetime,ch4_flux_final_filled,quality)%>%
data.table::merge.data.table(data.table::setDT(df_30min %>% select(-ch4_flux_final_filled)), by="datetime", all = TRUE)%>%
dplyr::rename(gapf_err=FCH4_sd) %>%
dplyr::mutate(tot_err = ifelse(quality=="original",
meas_err,
ifelse(quality=="gapfilled",
sqrt(meas_err^2+gapf_err^2),
NA)
)) %>%
dplyr::select(c(datetime, "ch4_flux_final_filled","quality","meas_err","gapf_err","tot_err")) %>%
dplyr::rename(FCH4=ch4_flux_final_filled)
flux_df_hour <- flux_df %>%
dplyr::rename(FCH4=ch4_flux_final_filled) %>%
dplyr::mutate(hour=as.POSIXct(round(datetime, units="hours"), tz="UTC")) %>%
dplyr::group_by(hour) %>%
dplyr::summarise(FCH4_sum = sum(FCH4))%>%
merge(df_hour, by="hour", all=TRUE) %>%
dplyr::mutate(tot_err = sqrt(meas_err^2+FCH4_sd^2))
flux_df_day <- flux_df %>%
dplyr::rename(FCH4=ch4_flux_final_filled) %>%
dplyr::mutate(date=as.Date(datetime)) %>%
dplyr::group_by(date) %>%
dplyr::summarise(FCH4_sum = sum(FCH4))%>%
merge(df_day, by="date", all=TRUE) %>%
dplyr::mutate(tot_err = sqrt(meas_err^2+FCH4_sd^2))
flux_df_week <- flux_df %>%
dplyr::rename(FCH4=ch4_flux_final_filled) %>%
dplyr::mutate(year = lubridate::year(datetime),
week = lubridate::week(datetime)) %>%
dplyr::group_by(year,week) %>%
dplyr::summarise(FCH4_sum = sum(FCH4))%>%
merge(df_week, by=c("year","week"), all=TRUE) %>%
dplyr::mutate(tot_err = sqrt(meas_err^2+FCH4_sd^2)) %>%
dplyr::arrange(year,week)
flux_df_month <- flux_df %>%
dplyr::rename(FCH4=ch4_flux_final_filled) %>%
dplyr::mutate(year = lubridate::year(datetime),
month = lubridate::month(datetime)) %>%
dplyr::group_by(year,month) %>%
dplyr::summarise(FCH4_sum = sum(FCH4))%>%
merge(df_month, by=c("year","month"), all=TRUE) %>%
dplyr::mutate(tot_err = sqrt(meas_err^2+FCH4_sd^2)) %>%
dplyr::arrange(year,month)
#Growing season
if(growing_season_definition =="fixed_months"){
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(datetime)
flux_df$growing_season <- NA
for(yr in unique(flux_df$year)){
flux_df$growing_season[which(flux_df$month %in% c(month_start_growing_season:month_end_growing_season) & flux_df$year==yr)] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df$growing_season[which((flux_df$month < month_start_growing_season) & flux_df$year==yr)] <-  paste("Non growing season1", yr, sep= " ")
flux_df$growing_season[which((flux_df$month > month_end_growing_season) & flux_df$year==yr)] <-  paste("Non growing season2", yr, sep= " ")
}
}
if(growing_season_definition %in% c("meteorological", "soil_temp", "soil_temp_mean")){
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(flux_df[[datetime]])
flux_df$growing_season <- NA
for(yr in unique(flux_df$year)){
gs_start <- gs_info[gs_info$year == yr, "start"]
gs_end <- gs_info[gs_info$year == yr, "end"]
flux_df[which(flux_df$date >= gs_start & flux_df$date <= gs_end  & flux_df$year==yr), "growing_season"] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df[which((flux_df$date < gs_start) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season1", yr, sep= " ")
flux_df[which((flux_df$date > gs_end) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season2", yr, sep= " ")
}
}
#Growing season
if(growing_season_definition =="fixed_months"){
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(datetime)
flux_df$growing_season <- NA
for(yr in unique(flux_df$year)){
flux_df$growing_season[which(flux_df$month %in% c(month_start_growing_season:month_end_growing_season) & flux_df$year==yr)] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df$growing_season[which((flux_df$month < month_start_growing_season) & flux_df$year==yr)] <-  paste("Non growing season1", yr, sep= " ")
flux_df$growing_season[which((flux_df$month > month_end_growing_season) & flux_df$year==yr)] <-  paste("Non growing season2", yr, sep= " ")
}
}
if(growing_season_definition %in% c("meteorological", "soil_temp", "soil_temp_mean")){
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(flux_df[,datetime])
flux_df$growing_season <- NA
for(yr in unique(flux_df$year)){
gs_start <- gs_info[gs_info$year == yr, "start"]
gs_end <- gs_info[gs_info$year == yr, "end"]
flux_df[which(flux_df$date >= gs_start & flux_df$date <= gs_end  & flux_df$year==yr), "growing_season"] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df[which((flux_df$date < gs_start) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season1", yr, sep= " ")
flux_df[which((flux_df$date > gs_end) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season2", yr, sep= " ")
}
}
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(flux_df[,datetime])
flux_df$growing_season <- NA
yr = unique(flux_df$year)[2]
yr
gs_start <- gs_info[gs_info$year == yr, "start"]
gs_end <- gs_info[gs_info$year == yr, "end"]
flux_df[which(flux_df$date >= gs_start & flux_df$date <= gs_end  & flux_df$year==yr), "growing_season"] <- paste("Growing season", yr, sep= " ")
flux_df$date
flux_df_30min <- as.data.frame(flux_df_30min)
flux_df_hour <- flux_df %>%
dplyr::rename(FCH4=ch4_flux_final_filled) %>%
dplyr::mutate(hour=as.POSIXct(round(datetime, units="hours"), tz="UTC")) %>%
dplyr::group_by(hour) %>%
dplyr::summarise(FCH4_sum = sum(FCH4))%>%
merge(df_hour, by="hour", all=TRUE) %>%
dplyr::mutate(tot_err = sqrt(meas_err^2+FCH4_sd^2))
flux_df_day <- flux_df %>%
dplyr::rename(FCH4=ch4_flux_final_filled) %>%
dplyr::mutate(date=as.Date(datetime)) %>%
dplyr::group_by(date) %>%
dplyr::summarise(FCH4_sum = sum(FCH4))%>%
merge(df_day, by="date", all=TRUE) %>%
dplyr::mutate(tot_err = sqrt(meas_err^2+FCH4_sd^2))
flux_df_week <- flux_df %>%
dplyr::rename(FCH4=ch4_flux_final_filled) %>%
dplyr::mutate(year = lubridate::year(datetime),
week = lubridate::week(datetime)) %>%
dplyr::group_by(year,week) %>%
dplyr::summarise(FCH4_sum = sum(FCH4))%>%
merge(df_week, by=c("year","week"), all=TRUE) %>%
dplyr::mutate(tot_err = sqrt(meas_err^2+FCH4_sd^2)) %>%
dplyr::arrange(year,week)
flux_df_month <- flux_df %>%
dplyr::rename(FCH4=ch4_flux_final_filled) %>%
dplyr::mutate(year = lubridate::year(datetime),
month = lubridate::month(datetime)) %>%
dplyr::group_by(year,month) %>%
dplyr::summarise(FCH4_sum = sum(FCH4))%>%
merge(df_month, by=c("year","month"), all=TRUE) %>%
dplyr::mutate(tot_err = sqrt(meas_err^2+FCH4_sd^2)) %>%
dplyr::arrange(year,month)
#Growing season
if(growing_season_definition =="fixed_months"){
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(datetime)
flux_df$growing_season <- NA
for(yr in unique(flux_df$year)){
flux_df$growing_season[which(flux_df$month %in% c(month_start_growing_season:month_end_growing_season) & flux_df$year==yr)] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df$growing_season[which((flux_df$month < month_start_growing_season) & flux_df$year==yr)] <-  paste("Non growing season1", yr, sep= " ")
flux_df$growing_season[which((flux_df$month > month_end_growing_season) & flux_df$year==yr)] <-  paste("Non growing season2", yr, sep= " ")
}
}
if(growing_season_definition %in% c("meteorological", "soil_temp", "soil_temp_mean")){
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(flux_df[,datetime])
flux_df$growing_season <- NA
for(yr in unique(flux_df$year)){
gs_start <- gs_info[gs_info$year == yr, "start"]
gs_end <- gs_info[gs_info$year == yr, "end"]
flux_df[which(flux_df$date >= gs_start & flux_df$date <= gs_end  & flux_df$year==yr), "growing_season"] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df[which((flux_df$date < gs_start) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season1", yr, sep= " ")
flux_df[which((flux_df$date > gs_end) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season2", yr, sep= " ")
}
}
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(flux_df[,datetime])
flux_df$growing_season <- NA
yr
gs_start <- gs_info[gs_info$year == yr, "start"]
yr = 2021
gs_start <- gs_info[gs_info$year == yr, "start"]
gs_end <- gs_info[gs_info$year == yr, "end"]
gs_start
gs_end
flux_df[which(flux_df$date >= gs_start & flux_df$date <= gs_end  & flux_df$year==yr), "growing_season"] <- paste("Growing season", yr, sep= " ")
str(flux_df)
flux_df <- as.data.frame(flux_df)
#Growing season
if(growing_season_definition =="fixed_months"){
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(datetime)
flux_df$growing_season <- NA
for(yr in unique(flux_df$year)){
flux_df$growing_season[which(flux_df$month %in% c(month_start_growing_season:month_end_growing_season) & flux_df$year==yr)] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df$growing_season[which((flux_df$month < month_start_growing_season) & flux_df$year==yr)] <-  paste("Non growing season1", yr, sep= " ")
flux_df$growing_season[which((flux_df$month > month_end_growing_season) & flux_df$year==yr)] <-  paste("Non growing season2", yr, sep= " ")
}
}
if(growing_season_definition %in% c("meteorological", "soil_temp", "soil_temp_mean")){
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(flux_df[,datetime])
flux_df$growing_season <- NA
for(yr in unique(flux_df$year)){
gs_start <- gs_info[gs_info$year == yr, "start"]
gs_end <- gs_info[gs_info$year == yr, "end"]
flux_df[which(flux_df$date >= gs_start & flux_df$date <= gs_end  & flux_df$year==yr), "growing_season"] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df[which((flux_df$date < gs_start) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season1", yr, sep= " ")
flux_df[which((flux_df$date > gs_end) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season2", yr, sep= " ")
}
}
yr = 2021
gs_start <- gs_info[gs_info$year == yr, "start"]
gs_end <- gs_info[gs_info$year == yr, "end"]
flux_df[which(flux_df$date >= gs_start & flux_df$date <= gs_end  & flux_df$year==yr), "growing_season"] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df[which((flux_df$date < gs_start) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season1", yr, sep= " ")
flux_df[which((flux_df$date > gs_end) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season2", yr, sep= " ")
if(growing_season_definition %in% c("meteorological", "soil_temp", "soil_temp_mean")){
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(flux_df[,datetime])
flux_df$growing_season <- NA
for(yr in unique(flux_df$year)){
gs_start <- gs_info[gs_info$year == yr, "start"]
gs_end <- gs_info[gs_info$year == yr, "end"]
flux_df[which(flux_df$date >= gs_start & flux_df$date <= gs_end  & flux_df$year==yr), "growing_season"] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df[which((flux_df$date < gs_start) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season1", yr, sep= " ")
flux_df[which((flux_df$date > gs_end) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season2", yr, sep= " ")
}
}
View(flux_df)
flux_df_gs <- flux_df %>%
dplyr::rename(FCH4=ch4_flux_final_filled) %>%
dplyr::group_by(year, growing_season) %>%
dplyr::summarise(FCH4_sum = sum(FCH4))%>%
merge(df_gs, by=c("year","growing_season"), all=TRUE) %>%
dplyr::mutate(tot_err = sqrt(meas_err^2+FCH4_sd^2))
gs_start
for(yr in unique(flux_df$year)){
gs_start <- gs_info[gs_info$year == yr, "start"]
gs_end <- gs_info[gs_info$year == yr, "end"]
flux_df[which(flux_df$date >= gs_start & flux_df$date <= gs_end  & flux_df$year==yr), "growing_season"] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df[which((flux_df$date < gs_start) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season1", yr, sep= " ")
flux_df[which((flux_df$date > gs_end) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season2", yr, sep= " ")
}
if(growing_season_definition %in% c("meteorological", "soil_temp", "soil_temp_mean")){
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df$month <- lubridate::month(flux_df[,datetime])
flux_df$date <- as.Date(flux_df[,datetime])
flux_df$growing_season <- NA
for(yr in unique(flux_df$year)){
gs_start <- gs_info[gs_info$year == yr, "start"]
gs_end <- gs_info[gs_info$year == yr, "end"]
flux_df[which(flux_df$date >= gs_start & flux_df$date <= gs_end  & flux_df$year==yr), "growing_season"] <- paste("Growing season", yr, sep= " ")
#flux_df$growing_season[which(!(flux_df$month %in% c(month_start_growing_season:month_end_growing_season)) & flux_df$year==yr)] <-  paste("Non growing season", yr, sep= " ")
flux_df[which((flux_df$date < gs_start) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season1", yr, sep= " ")
flux_df[which((flux_df$date > gs_end) & flux_df$year==yr), "growing_season"] <-  paste("Non growing season2", yr, sep= " ")
}
}
flux_df$year <- lubridate::year(flux_df[,datetime])
flux_df[,datetime]
datetime
datetime = "datetime"
#testing
# flux_df = gapfilling_list_hals$site_df
# df_mc = df_mc
# rd_err_df = hals_err_df_imp
#creating important columns that are missing which creates problem in the aggregations (date and year)
rd_err_df <- rd_err_df %>%
mutate(date = as.Date(datetime),
year = lubridate::year(datetime),
month = lubridate::month(datetime))
df_mc <- df_mc %>%
mutate(date = as.Date(datetime),
year = lubridate::year(datetime),
month = lubridate::month(datetime))
#initializing or "nulifying" global variables
rand_err_ch4_flux <- datetime <- meas_err <- ch4_flux_final_filled <- FCH4_f <- iteration <- FCH4_sum <- year <- month <- FCH4_sd <- quality <- gapf_err <- tot_err <- FCH4 <- NULL
aggr_list <- list()
#converting the errors to mg...
rd_err_df <- rd_err_df %>%
dplyr::mutate(rand_err_ch4_flux = PostEddyPro::umolCH4m2s_to_mgCH4m2_30min(rand_err_ch4_flux))%>%
dplyr::rename(meas_err = rand_err_ch4_flux) #%>%
#creating important columns that are missing which creates problem in the aggregations (date and year)
rd_err_df <- rd_err_df %>%
mutate(date = as.Date(datetime),
year = lubridate::year(datetime),
month = lubridate::month(datetime))
df_mc <- df_mc %>%
mutate(date = as.Date(datetime),
year = lubridate::year(datetime),
month = lubridate::month(datetime))
#initializing or "nulifying" global variables
rand_err_ch4_flux <- datetime <- meas_err <- ch4_flux_final_filled <- FCH4_f <- iteration <- FCH4_sum <- year <- month <- FCH4_sd <- quality <- gapf_err <- tot_err <- FCH4 <- NULL
aggr_list <- list()
#converting the errors to mg...
rd_err_df <- rd_err_df %>%
dplyr::mutate(rand_err_ch4_flux = PostEddyPro::umolCH4m2s_to_mgCH4m2_30min(rand_err_ch4_flux))%>%
dplyr::rename(meas_err = rand_err_ch4_flux) #%>%
remove.packages("PostEddyPro")
devtools::install_packages("bravemaster3/PostEddyPro")
devtools::install_github("bravemaster3/PostEddyPro")
library(PostEddyPro)
library(ggplot2)
library(plotly)
library(caret)
library(RANN)
library(data.table)
library(lubridate)
#visualizing from disk
vis_list_hals <- visualization(path_EC = "D:/EC/Data_organized/Halsingfors/Eddypro_output/Output_2022-11-23/Merged_2022-11-30/merged.csv",
path_biomet = "D:/EC/Data_organized/Halsingfors/Biomet_gf/hals_met.csv")
fluxes_meteo_hals <- vis_list_hals$data
vis_list_hals$graphs
#Quality control
fluxes_meteo_hals_qc <- quality_control(fluxes_meteo_hals, Temp_col = "Ts", RSSI = TRUE,
RSSI_col = "diag_77_mean")
# Additional hard flag visual...
fluxes_meteo_hals_qc$ch4_flux_final[which(fluxes_meteo_hals_qc$ch4_flux_final >= 0.45)] <- NA
gapfilling_list_hals <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/gf_rds.RDS")
gapfilling_list_hals$pred_meas
df_mc <- fread("D:/EC/Data_organized/Halsingfors/FINAL/Montecarlo_gf_merged/monte_carlo_all.csv")
preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f","yearly_sin","yearly_cos","delta")
hals_err_df <- gapfilling_list_hals$site_df[,c("datetime","rand_err_ch4_flux","ch4_flux_final_filled", "quality", preds)]
hals_err_df$rand_err_ch4_flux[which(hals_err_df$quality == "gapfilled")] <- NA
hals_err_df$quality <- NULL
preProcValues <- preProcess(hals_err_df, method = c("bagImpute"))
hals_err_df_imp <- predict(preProcValues, hals_err_df)
plot(rand_err_ch4_flux~datetime, data=hals_err_df_imp)
path_biomet = "D:/EC/Data_organized/Halsingfors/Biomet_gf/hals_met.csv"
df_biomet <- data.table::fread(path_biomet)
df_biomet <- as.data.frame(df_biomet)
df_biomet[df_biomet < -2000 | df_biomet==7999] <- NA
df_Ta <- daily_air_temperature_from_halfhour(df = df_biomet %>% select(datetime, Ta_f),
time_col = "datetime",
Ta_col = "Ta_f"
)
#Growing season using daily soil temperature amplitudes, threshold 0.1°C
df_Ts <- daily_temperature_amplitude(df = df_biomet %>% select(datetime, Ts_f),
time_col = "datetime",
T_col = "Ts_f"
)
df_Ts <- df_Ts %>%
mutate(week = week(date)) %>%
filter(week >= 16 & week <=50)
hals_aggr_fluxes_soil_temp_mean <- ch4_flux_aggregator(flux_df = gapfilling_list_hals$site_df,
df_mc = df_mc,
rd_err_df = hals_err_df_imp,
growing_season_definition = "soil_temp_mean",
df_Ts = df_Ts)
library(devtools)
install.packages("devtools")
library(devtools)
document()
document()
document()
document()
