#halm_aggr_h2o <- readRDS("D:/EC/Data_organized/Halmyran/FINAL/H2O/aggr_rds_H2O.RDS")
gs_info_halm <- halm_aggr_biomet$growing_season_info_TsMean
#Degero
deg_aggr_ch4 <- readRDS("D:/EC/Data_organized/Degero/FINAL/aggr_rds.RDS")
deg_aggr_biomet <- readRDS("D:/EC/Data_organized/Degero/FINAL/aggr_biomet.RDS")
deg_aggr_co2 <- readRDS("D:/EC/Data_organized/Degero/FINAL/CO2/aggr_rds_CO2.RDS")
#deg_aggr_h2o <- readRDS("D:/EC/Data_organized/Degero/FINAL/H2O/aggr_rds_H2O.RDS")
gs_info_deg <- deg_aggr_biomet$growing_season_info_TsMean
#Stortjarn
sto_aggr_ch4 <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/aggr_rds.RDS")
sto_aggr_biomet <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/aggr_biomet.RDS")
sto_aggr_co2 <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/CO2/aggr_rds_CO2.RDS")
gs_info_sto <- sto_aggr_biomet$growing_season_info_TsMean
#sto_aggr_h2o <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/H2O/aggr_rds_H2O.RDS")
#Halsingfors
hals_aggr_ch4 <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/aggr_rds.RDS")
hals_aggr_biomet <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/aggr_biomet.RDS")
hals_aggr_co2 <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/CO2/aggr_rds_CO2.RDS")
#hals_aggr_h2o <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/H2O/aggr_rds_H2O.RDS")
gs_info_hals <- hals_aggr_biomet$growing_season_info_TsMean
#############Halfhourly
#Reading all and getting daily values
halm_30min <- Reduce(function(...) merge(..., by="datetime"), list(halm_aggr_ch4$flux_df_30min %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err, quality_ch4=quality),
halm_aggr_co2$flux_df_30min %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err, quality_nee=quality),
#halm_aggr_h2o$flux_df_30min %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err, quality_h2o=quality),
halm_aggr_biomet$halfhour)) %>% mutate(Site="Hålmyran", #PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2 (no more conversion)
month = month(datetime), year = year(datetime)) %>%
select(-c(NEE)) %>% rename(NEE=NEE_f,GPP=GPP_f) %>%
mutate(GPP = ifelse(GPP < 0, 0, GPP),
FCH4 = FCH4/1000) %>% #g instead of mg
left_join(gs_info_halm, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA))
deg_30min <- Reduce(function(...) merge(..., by="datetime"), list(deg_aggr_ch4$flux_df_30min %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err, quality_ch4=quality),
deg_aggr_co2$flux_df_30min %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err, quality_nee=quality),
#deg_aggr_h2o$flux_df_30min %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err, quality_h2o=quality),
deg_aggr_biomet$halfhour)) %>% mutate(Site="Degerö", #PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
month = month(datetime), year = year(datetime)) %>%
select(-c(NEE)) %>% rename(NEE=NEE_f,GPP=GPP_f) %>%
mutate(GPP = ifelse(GPP < 0, 0, GPP),
FCH4 = FCH4/1000) %>% #g instead of mg
left_join(gs_info_deg, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA))
sto_30min <- Reduce(function(...) merge(..., by="datetime"), list(sto_aggr_ch4$flux_df_30min %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err, quality_ch4=quality),
sto_aggr_co2$flux_df_30min %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err, quality_nee=quality),
#sto_aggr_h2o$flux_df_30min %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err, quality_h2o=quality),
sto_aggr_biomet$halfhour)) %>% mutate(Site="Stortjärn", #PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
month = month(datetime), year = year(datetime)) %>%
select(-c(NEE)) %>% rename(NEE=NEE_f,GPP=GPP_f) %>%
mutate(GPP = ifelse(GPP < 0, 0, GPP),
FCH4 = FCH4/1000) %>% #g instead of mg
left_join(gs_info_sto, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA))
hals_30min <- Reduce(function(...) merge(..., by="datetime"), list(hals_aggr_ch4$flux_df_30min %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err, quality_ch4=quality),
hals_aggr_co2$flux_df_30min %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err, quality_nee=quality),
#hals_aggr_h2o$flux_df_30min %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err, quality_h2o=quality),
hals_aggr_biomet$halfhour)) %>% mutate(Site="Hälsingfors", #PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
month = month(datetime), year = year(datetime)) %>%
select(-c(NEE)) %>% rename(NEE=NEE_f,GPP=GPP_f) %>%
#mutate(Reco=ifelse(datetime<as.POSIXct("2020-06-12 00:00:00", tz="UTC"), NA, Reco)) %>%
mutate(GPP = ifelse(GPP < 0, 0, GPP),
FCH4 = FCH4/1000) %>% #g instead of mg
left_join(gs_info_hals, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA))
#############DAILY
#Reading all and getting daily values
halm_day <- Reduce(function(...) merge(..., all=TRUE), list(halm_aggr_ch4$flux_df_day %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
halm_aggr_co2$flux_df_day %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#halm_aggr_h2o$flux_df_day %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
halm_aggr_biomet$day)) %>% mutate(Site="Halmyran", PARin_f=PARin_f,#/4.6,  #from umol/m2/s to W/m2
month = month(date), year = year(date)) %>%
#select(-SNOWd) %>%
mutate(GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000,
FCH4_sd = FCH4_sd/1000,
meas_err_ch4 = meas_err_ch4/1000,
tot_err_ch4 = tot_err_ch4/1000) %>% #g instead of mg
left_join(gs_info_halm, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA)) %>%
filter(date >= start_date_plots & date <= end_date_plots)
deg_day <- Reduce(function(...) merge(..., all=TRUE), list(deg_aggr_ch4$flux_df_day %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
deg_aggr_co2$flux_df_day %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#deg_aggr_h2o$flux_df_day %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
deg_aggr_biomet$day)) %>% mutate(Site="Degero", PARin_f=PARin_f,#/4.6,  #from umol/m2/s to W/m2
month = month(date), year = year(date)) %>%
mutate(GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000,
FCH4_sd = FCH4_sd/1000,
meas_err_ch4 = meas_err_ch4/1000,
tot_err_ch4 = tot_err_ch4/1000) %>% #g instead of mg
left_join(gs_info_deg, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA)) %>%
filter(date >= start_date_plots & date <= end_date_plots)
sto_day <- Reduce(function(...) merge(..., all=TRUE), list(sto_aggr_ch4$flux_df_day %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
sto_aggr_co2$flux_df_day %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#sto_aggr_h2o$flux_df_day %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
sto_aggr_biomet$day)) %>% mutate(Site="Stortjarn", PARin_f=PARin_f,#/4.6,  #from umol/m2/s to W/m2
month = month(date), year=year(date)) %>%
#select(-SNOWd) %>%
mutate(GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000,
FCH4_sd = FCH4_sd/1000,
meas_err_ch4 = meas_err_ch4/1000,
tot_err_ch4 = tot_err_ch4/1000) %>% #g instead of mg
left_join(gs_info_sto, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA)) %>%
filter(date >= start_date_plots & date <= end_date_plots)
hals_day <- Reduce(function(...) merge(..., all=TRUE), list(hals_aggr_ch4$flux_df_day %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
hals_aggr_co2$flux_df_day %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#hals_aggr_h2o$flux_df_day %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
hals_aggr_biomet$day)) %>% mutate(Site="Halsingfors", PARin_f=PARin_f,#/4.6,  #from umol/m2/s to W/m2
month = month(date), year = year(date)) %>%
#select(-SNOWd) %>%
#mutate(Reco_sum=ifelse(date<as.Date("2020-06-12"), NA, Reco_sum)) %>%
mutate(GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000,
FCH4_sd = FCH4_sd/1000,
meas_err_ch4 = meas_err_ch4/1000,
tot_err_ch4 = tot_err_ch4/1000) %>% #g instead of mg
left_join(gs_info_hals, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA)) %>%
filter(date >= start_date_plots & date <= end_date_plots)# %>%
#############MONTHLY
#Reading all and getting monthly values
halm_month <- Reduce(function(...) merge(..., all=TRUE), list(halm_aggr_ch4$flux_df_month %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
halm_aggr_co2$flux_df_month %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#halm_aggr_h2o$flux_df_month %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
halm_aggr_biomet$month)) %>% mutate(Site="Halmyran", PARin_f=PARin_f, WTD_f = replace(WTD_f, month %in% c(12,1:3), NA)) %>%
#select(-SNOWd) %>%
arrange(yearmon) %>%
mutate(period = rep((1:ceiling(nrow(.)/12)), each=12)[1:nrow(.)],
GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000, #g instead of mg
PARin_f = PARin_f)#/4.6)#from umol/m2/s to W/m2
deg_month <- Reduce(function(...) merge(..., all=TRUE), list(deg_aggr_ch4$flux_df_month %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
deg_aggr_co2$flux_df_month %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#deg_aggr_h2o$flux_df_month %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
deg_aggr_biomet$month)) %>% mutate(Site="Degero", PARin_f=PARin_f, WTD_f = replace(WTD_f, month %in% c(12,1:3), NA)) %>%
arrange(yearmon) %>%
mutate(period = rep((1:ceiling(nrow(.)/12)), each=12)[1:nrow(.)],
GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000, #g instead of mg
PARin_f = PARin_f)#/4.6)#from umol/m2/s to W/m2
sto_month <- Reduce(function(...) merge(..., all=TRUE), list(sto_aggr_ch4$flux_df_month %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
sto_aggr_co2$flux_df_month %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#sto_aggr_h2o$flux_df_month %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
sto_aggr_biomet$month)) %>% mutate(Site="Stortjarn", PARin_f=PARin_f, WTD_f = replace(WTD_f, month %in% c(12,1:3), NA)) %>%
#select(-SNOWd) %>%
arrange(yearmon) %>%
mutate(period = rep((1:ceiling(nrow(.)/12)), each=12)[1:nrow(.)],
GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000, #g instead of mg
PARin_f = PARin_f)#/4.6)#from umol/m2/s to W/m2
hals_month <- Reduce(function(...) merge(..., all=TRUE), list(hals_aggr_ch4$flux_df_month %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
hals_aggr_co2$flux_df_month %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#hals_aggr_h2o$flux_df_month %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
hals_aggr_biomet$month)) %>% mutate(Site="Halsingfors", PARin_f=PARin_f, WTD_f = replace(WTD_f, month %in% c(12,1:3), NA)) %>%
#select(-SNOWd) %>%
arrange(yearmon) %>%
#mutate(Reco_sum=ifelse(yearmon <= as.yearmon("2020-06"), NA, Reco_sum)) %>%
mutate(period = rep((1:ceiling(nrow(.)/12)), each=12)[1:nrow(.)],
GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000, #g instead of mg
PARin_f = PARin_f)#/4.6)#from umol/m2/s to W/m2
%>% mutate(Site = factor(Site, levels = Site_levels = c("Degerö", "Hälsingfors", "Hålmyran", "Stortjärn")))
%>% mutate(Site = factor(Site, levels = Site_levels))
raw_df_gf <- Reduce(f = function(x,y) merge(x,y,all=T),list(deg_30min %>%
select(datetime,FCH4,quality_ch4, Site),
halm_30min %>%
select(datetime, FCH4,quality_ch4, Site),
sto_30min %>%
select(datetime, FCH4,quality_ch4, Site),
hals_30min %>%
select(datetime, FCH4,quality_ch4, Site))) %>%
rename(quality = quality_ch4) %>%
mutate(date=as.Date(datetime)) %>%
dplyr::filter(between(date, start_date_plots, end_date_plots)) %>%
mutate(Site = factor(Site, levels = Site_levels))
raw_df_gf$date <- as.Date(raw_df_gf$datetime)
raw_df_gf$month <- as.numeric(format(raw_df_gf$date, format="%m"))
raw_df_gf <- raw_df_gf %>% filter(date >= start_date_plots & date <= end_date_plots)
raw_df_gf2 <- raw_df_gf
raw_df_gf2 <- raw_df_gf2 %>%
mutate(counter=1) %>%
#filter(Site=="Degero")%>%
group_by(Site, quality) %>%
summarise(count=sum(counter)) %>%
mutate(perc =  round(prop.table(count) * 100, 0)) %>%
group_by(Site) %>%
summarise(facet_name = paste0(paste0(perc, collapse = "% gapfilled; "), "% original")) %>%
mutate(facet_name = paste0(Site," : ", facet_name))
raw_df_gf3 <- raw_df_gf %>%
merge(raw_df_gf2, by="Site")
biomet <- Reduce(f = function(x,y) merge(x,y,all=T),list(deg_30min %>% mutate(year=year(datetime)) %>%
select(datetime, year, month, WTD_f, Site),
halm_30min %>% mutate(year=year(datetime)) %>%
select(datetime, year, month, WTD_f, Site),
sto_30min %>% mutate(year=year(datetime)) %>%
select(datetime, year, month, WTD_f, Site),
hals_30min %>% mutate(year=year(datetime)) %>%
select(datetime, year, month, WTD_f, Site)))
wtd_slcted_months <- biomet %>%
filter(month %in% c(6,7,8,9)) %>%
group_by(Site, month, year) %>%
summarize(WTD_f = mean(WTD_f))
wtd_slcted_months <- biomet %>%
filter(month %in% c(6,7,8)) %>%
group_by(Site, year) %>%
summarize(WTD_f = mean(WTD_f))
p <- ggplot(data=raw_df_gf3,aes(x = datetime,y = 1000*FCH4,shape=quality,color=quality,size=quality,alpha=quality))+
geom_point()+
#geom_point(data=methane[is.na(methane$CH4_flux),],aes(x = datetime,y = CH4_flux_gf),size=0.01,shape=1,color="red")+
# ylim(-10,100)+
xlab("Time")+
ylim(-0.2,6)+
ylab("CH4 fluxes (mg. m-2. 30min-1)")+#ylab("CH4 fluxes (nmol.m-2.s-1)")+
theme_classic()+
scale_color_manual(values=c("red","black"))+
scale_shape_manual(values=c(16,16))+
scale_size_manual(values=c(0.01,0.5))+
scale_alpha_manual(values = c(1,0.5))+
scale_x_datetime(breaks = "1 month", labels=date_format("%Y-%m"))+
theme(panel.border = element_rect(fill=NA,size=1),
# panel.spacing.x=unit(0.1, "lines"),
panel.spacing.y=unit(-2, "lines"),
# panel.margin = unit(c(-0.5,0-0.5,0), "lines"),
legend.position=c(0.06, 0.95),
legend.background = element_rect(fill='transparent'),
legend.spacing = unit(-0.2,"cm"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
#strip.placement = "outside",
axis.text.x.top = element_blank(),       # do not show top / right axis labels
axis.text.y.right = element_blank(),     # for secondary axis
axis.title.x.top = element_blank(),      # as above, don't show axis titles for
axis.title.y.right = element_blank())+
facet_rep_wrap(~ facet_name, nrow = 4)
p
ggsave("D:/EC/Data_organized/Graphs_all/raw_gf_non_gf.png", plot=p, height=20,width=18, units = "cm")
raw_df_gf$Site
raw_df_gf3$Site
p <- ggplot(data=raw_df_gf3,aes(x = datetime,y = 1000*FCH4,shape=quality,color=quality,size=quality,alpha=quality))+
geom_point()+
#geom_point(data=methane[is.na(methane$CH4_flux),],aes(x = datetime,y = CH4_flux_gf),size=0.01,shape=1,color="red")+
# ylim(-10,100)+
xlab("Time")+
ylim(-0.2,6)+
ylab("CH4 fluxes (mg. m-2. 30min-1)")+#ylab("CH4 fluxes (nmol.m-2.s-1)")+
theme_classic()+
scale_color_manual(values=c("red","black"))+
scale_shape_manual(values=c(16,16))+
scale_size_manual(values=c(0.01,0.5))+
scale_alpha_manual(values = c(1,0.5))+
scale_x_datetime(breaks = "1 month", labels=date_format("%Y-%m"))+
theme(panel.border = element_rect(fill=NA,size=1),
# panel.spacing.x=unit(0.1, "lines"),
panel.spacing.y=unit(-2, "lines"),
# panel.margin = unit(c(-0.5,0-0.5,0), "lines"),
legend.position=c(0.06, 0.95),
legend.background = element_rect(fill='transparent'),
legend.spacing = unit(-0.2,"cm"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
#strip.placement = "outside",
axis.text.x.top = element_blank(),       # do not show top / right axis labels
axis.text.y.right = element_blank(),     # for secondary axis
axis.title.x.top = element_blank(),      # as above, don't show axis titles for
axis.title.y.right = element_blank())+
facet_rep_wrap(~ factor(facet_name), nrow = 4)
p
View(raw_df_gf3)
raw_df_gf3[,c("facet_name","Site")]
unique(raw_df_gf3[,c("facet_name","Site")])
unique_names <- unique(raw_df_gf3[,c("facet_name","Site")])
raw_df_gf3$facet_name <- factor(raw_df_gf3$facet_name,
levels=unique_names$facet_name[order(unique_names$Site)],
ordered=TRUE)
raw_df_gf3$facet_name
levels(raw_df_gf3$facet_name)
p <- ggplot(data=raw_df_gf3,aes(x = datetime,y = 1000*FCH4,shape=quality,color=quality,size=quality,alpha=quality))+
geom_point()+
#geom_point(data=methane[is.na(methane$CH4_flux),],aes(x = datetime,y = CH4_flux_gf),size=0.01,shape=1,color="red")+
# ylim(-10,100)+
xlab("Time")+
ylim(-0.2,6)+
ylab("CH4 fluxes (mg. m-2. 30min-1)")+#ylab("CH4 fluxes (nmol.m-2.s-1)")+
theme_classic()+
scale_color_manual(values=c("red","black"))+
scale_shape_manual(values=c(16,16))+
scale_size_manual(values=c(0.01,0.5))+
scale_alpha_manual(values = c(1,0.5))+
scale_x_datetime(breaks = "1 month", labels=date_format("%Y-%m"))+
theme(panel.border = element_rect(fill=NA,size=1),
# panel.spacing.x=unit(0.1, "lines"),
panel.spacing.y=unit(-2, "lines"),
# panel.margin = unit(c(-0.5,0-0.5,0), "lines"),
legend.position=c(0.06, 0.95),
legend.background = element_rect(fill='transparent'),
legend.spacing = unit(-0.2,"cm"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
#strip.placement = "outside",
axis.text.x.top = element_blank(),       # do not show top / right axis labels
axis.text.y.right = element_blank(),     # for secondary axis
axis.title.x.top = element_blank(),      # as above, don't show axis titles for
axis.title.y.right = element_blank())+
facet_rep_wrap(~ facet_name, nrow = 4)
p
ggsave("D:/EC/Data_organized/Graphs_all/raw_gf_non_gf.png", plot=p, height=20,width=18, units = "cm")
library(ggplot2)
library(readxl)
library(dplyr)
library(egg)
library(stringr)
#####################################
########'@Conversion function from gCH4 to gC
gCH4_gC = function(gCH4){
gC = 12.01 * gCH4/16.04
return(gC)
}
#####################################
#name of the list element for growing season
gs_type <- "flux_df_growing_season_TsMean"
Site_levels = c("Degerö", "Hälsingfors", "Hålmyran", "Stortjärn")
###Creating a synthesis table
#Halmyran
halm_aggr_ch4 <- readRDS("D:/EC/Data_organized/Halmyran/FINAL/aggr_rds.RDS")
halm_aggr_biomet <- readRDS("D:/EC/Data_organized/Halmyran/FINAL/aggr_biomet.RDS")
halm_aggr_co2 <- readRDS("D:/EC/Data_organized/Halmyran/FINAL/CO2/aggr_rds_CO2.RDS")
#halm_aggr_h2o <- readRDS("D:/EC/Data_organized/Halmyran/FINAL/H2O/aggr_rds_H2O.RDS")
#Degero
deg_aggr_ch4 <- readRDS("D:/EC/Data_organized/Degero/FINAL/aggr_rds.RDS")
deg_aggr_biomet <- readRDS("D:/EC/Data_organized/Degero/FINAL/aggr_biomet.RDS")
deg_aggr_co2 <- readRDS("D:/EC/Data_organized/Degero/FINAL/CO2/aggr_rds_CO2.RDS")
#deg_aggr_h2o <- readRDS("D:/EC/Data_organized/Degero/FINAL/H2O/aggr_rds_H2O.RDS")
#Stortjarn
sto_aggr_ch4 <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/aggr_rds.RDS")
sto_aggr_biomet <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/aggr_biomet.RDS")
sto_aggr_co2 <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/CO2/aggr_rds_CO2.RDS")
#sto_aggr_h2o <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/H2O/aggr_rds_H2O.RDS")
#Halsingfors
hals_aggr_ch4 <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/aggr_rds.RDS")
hals_aggr_biomet <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/aggr_biomet.RDS")
hals_aggr_co2 <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/CO2/aggr_rds_CO2.RDS")
#hals_aggr_h2o <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/H2O/aggr_rds_H2O.RDS")
#CO2
synthesis_year_co2 <- Reduce(function(x, y) rbind(x, y),
list(deg_aggr_co2$flux_df_year %>% mutate(Site="Degerö"),
hals_aggr_co2$flux_df_year %>% mutate(Site="Hälsingfors"),
halm_aggr_co2$flux_df_year %>% mutate(Site="Hålmyran"),
sto_aggr_co2$flux_df_year %>% mutate(Site="Stortjärn")))
synthesis_gs_co2 <- Reduce(function(x, y) rbind(x, y),
list(deg_aggr_co2[[gs_type]] %>% mutate(Site="Degerö"),
hals_aggr_co2[[gs_type]] %>% mutate(Site="Hälsingfors"),
halm_aggr_co2[[gs_type]] %>% mutate(Site="Hålmyran"),
sto_aggr_co2[[gs_type]] %>% mutate(Site="Stortjärn")))
#CH4
synthesis_year_ch4<- Reduce(function(x, y) rbind(x, y),
list(deg_aggr_ch4$flux_df_year %>% mutate(Site="Degerö",
FCH4_sum = gCH4_gC(FCH4_sum),
FCH4_sd = gCH4_gC(FCH4_sd)),
hals_aggr_ch4$flux_df_year %>% mutate(Site="Hälsingfors",
FCH4_sum = gCH4_gC(FCH4_sum),
FCH4_sd = gCH4_gC(FCH4_sd)),
halm_aggr_ch4$flux_df_year %>% mutate(Site="Hålmyran",
FCH4_sum = gCH4_gC(FCH4_sum),
FCH4_sd = gCH4_gC(FCH4_sd)),
sto_aggr_ch4$flux_df_year %>% mutate(Site="Stortjärn",
FCH4_sum = gCH4_gC(FCH4_sum),
FCH4_sd = gCH4_gC(FCH4_sd))))
synthesis_gs_ch4 <- Reduce(function(x, y) rbind(x, y),
list(deg_aggr_ch4[[gs_type]] %>% mutate(Site="Degerö",
FCH4_sum = gCH4_gC(FCH4_sum),
FCH4_sd = gCH4_gC(FCH4_sd)),
hals_aggr_ch4[[gs_type]] %>% mutate(Site="Hälsingfors",
FCH4_sum = gCH4_gC(FCH4_sum),
FCH4_sd = gCH4_gC(FCH4_sd)),# %>%
#mutate(FCH4_sum = ifelse(growing_season=="Growing season 2020", NA, FCH4_sum)),
halm_aggr_ch4[[gs_type]] %>% mutate(Site="Hålmyran",
FCH4_sum = gCH4_gC(FCH4_sum),
FCH4_sd = gCH4_gC(FCH4_sd)),
sto_aggr_ch4[[gs_type]] %>% mutate(Site="Stortjärn",
FCH4_sum = gCH4_gC(FCH4_sum),
FCH4_sd = gCH4_gC(FCH4_sd))))
#Biomet
synthesis_year_biomet<- Reduce(function(x, y) rbind(x, y),
list(deg_aggr_biomet$year %>% mutate(Site="Degerö"),
hals_aggr_biomet$year %>% mutate(Site="Hälsingfors"),
halm_aggr_biomet$year %>% mutate(Site="Hålmyran"),
sto_aggr_biomet$year %>% mutate(Site="Stortjärn")))
synthesis_gs_biomet <- Reduce(function(x, y) rbind(x, y),
list(deg_aggr_biomet$growing_season %>% mutate(Site="Degerö"),
hals_aggr_biomet$growing_season %>% mutate(Site="Hälsingfors"),
halm_aggr_biomet$growing_season %>% mutate(Site="Hålmyran"),
sto_aggr_biomet$growing_season %>% mutate(Site="Stortjärn")))
#All together
synthesis_year <- Reduce(function(x,y) merge(x,y, by=c("year", "Site")),
list(synthesis_year_ch4 %>% dplyr::rename(meas_err_ch4 = meas_err,tot_err_ch4 = tot_err),
synthesis_year_co2 %>% dplyr::rename(meas_err_co2 = meas_err, tot_err_co2 = tot_err),
synthesis_year_biomet))
# synthesis_gs <- Reduce(function(x,y) merge(x,y, by=c("year", "Site", "growing_season")),
#                          list(synthesis_gs_ch4 %>% dplyr::rename(meas_err_ch4 = meas_err,tot_err_ch4 = tot_err) %>%
#                                 mutate(growing_season=str_sub(growing_season, 1, -6)),
#                               synthesis_gs_co2 %>% dplyr::rename(meas_err_co2 = meas_err, tot_err_co2 = tot_err) %>%
#                                 mutate(growing_season=str_sub(growing_season, 1, -6)),
#                               synthesis_gs_biomet))
synthesis_gs <- Reduce(function(x,y) merge(x,y, by=c("year", "Site", "growing_season")),
list(synthesis_gs_ch4 %>% dplyr::rename(meas_err_ch4 = meas_err,tot_err_ch4 = tot_err),
synthesis_gs_co2 %>% dplyr::rename(meas_err_co2 = meas_err, tot_err_co2 = tot_err),
synthesis_gs_biomet
#%>% dplyr::mutate_at(vars(contains('Growing season ')), ~ (str_sub(., 1, -3)))
))
synthesis_year_co2$Site <- factor(synthesis_year_co2$Site, levels = Site_levels)
synthesis_year_ch4$Site <- factor(synthesis_year_ch4$Site, levels = Site_levels)
synthesis_year_biomet$Site <- factor(synthesis_year_biomet$Site, levels = Site_levels)
synthesis_year$Site <- factor(synthesis_year$Site, levels = Site_levels)
synthesis_gs$Site <- factor(synthesis_gs$Site, levels = Site_levels)
synthesis_gs
#Growing seasons
gs_FCH4 <- ggplot(synthesis_gs %>% filter(grepl("Growing season ", growing_season)), aes(x=factor(year), y = FCH4_sum/1000, fill = Site)) +
geom_col(colour = "black", width = 0.5, position = position_dodge(0.5), alpha = 0.8) +
xlab("Growing Season") +
ylab('FCH4 (gC.m⁻²)')+
theme_classic() +
theme(panel.border = element_rect(linewidth = 0.5, fill=NA),
axis.title.x= element_blank(),
axis.text.x = element_blank(),
legend.position = "top")
gs_FCH4
gs_FCH4 <- ggplot(synthesis_gs %>% filter(grepl("Growing season ", growing_season)),
aes(x=WTD_f, y = FCH4_sum/1000, fill = Site)) +
geom_col(colour = "black", width = 0.5, position = position_dodge(0.5), alpha = 0.8) +
xlab("Growing Season") +
ylab('FCH4 (gC.m⁻²)')+
theme_classic() +
theme(panel.border = element_rect(linewidth = 0.5, fill=NA),
axis.title.x= element_blank(),
axis.text.x = element_blank(),
legend.position = "top")
gs_FCH4
gs_FCH4 <- ggplot(synthesis_gs %>% filter(grepl("Growing season ", growing_season)),
aes(x=WTD_f, y = FCH4_sum/1000, fill = Site)) +
geom_point() +
xlab("Growing Season") +
ylab('FCH4 (gC.m⁻²)')+
theme_classic() +
theme(panel.border = element_rect(linewidth = 0.5, fill=NA),
axis.title.x= element_blank(),
axis.text.x = element_blank(),
legend.position = "top")
ggplot(synthesis_gs %>% filter(grepl("Growing season ", growing_season)),
aes(x=WTD_f, y = FCH4_sum/1000, fill = Site)) +
geom_point() +
xlab("Growing Season") +
ylab('FCH4 (gC.m⁻²)')+
theme_classic() +
theme(panel.border = element_rect(linewidth = 0.5, fill=NA),
axis.title.x= element_blank(),
axis.text.x = element_blank(),
legend.position = "top")
ggplot(synthesis_gs %>% filter(grepl("Growing season ", growing_season)),
aes(x=WTD_f, y = FCH4_sum/1000, color = Site)) +
geom_point() +
xlab("Growing Season") +
ylab('FCH4 (gC.m⁻²)')+
theme_classic() +
theme(panel.border = element_rect(linewidth = 0.5, fill=NA),
axis.title.x= element_blank(),
axis.text.x = element_blank(),
legend.position = "top")
g <- ggplot(synthesis_gs %>% filter(grepl("Growing season ", growing_season)),
aes(x=WTD_f, y = FCH4_sum/1000, color = Site)) +
geom_point() +
xlab("Growing Season") +
ylab('FCH4 (gC.m⁻²)')+
theme_classic()
plotly::ggplotly(g)
g <- ggplot(synthesis_gs %>% filter(grepl("Growing season ", growing_season)),
aes(x=WTD_f, y = FCH4_sum/1000, color = Site, label = "year")) +
geom_point() +
xlab("Growing Season") +
ylab('FCH4 (gC.m⁻²)')+
theme_classic()
plotly::ggplotly(g)
g <- ggplot(synthesis_gs %>% filter(grepl("Growing season ", growing_season)),
aes(x=WTD_f, y = FCH4_sum/1000, color = Site, label = year)) +
geom_point() +
xlab("Growing Season") +
ylab('FCH4 (gC.m⁻²)')+
theme_classic()
plotly::ggplotly(g)
gf_xgb <- readRDS("D:/EC/Data_organized/Halmyran/FINAL/CO2/gf_rds.RDS)
""
)
"
gf_xgb <- readRDS("D:/EC/Data_organized/Halmyran/FINAL/CO2/gf_rds.RDS")
gf_xgb$tuningmodel$pred
View(gf_xgb$tuningmodel$pred)
View(gf_xgb$tuningmodel$pred)
plot(pred ~obs, data =gf_xgb$tuningmodel$pred)
