packageVersion("devtools")
install.packages("devtool")
install.packages("devtools")
packageVersion("devtools")
library(devtools)
use_r("visualization")
load_all
load_all()
hello()
check()
use_mit_license()
library(ggplot2)
utils?
)
?utils
load_all()
library(devtools)
load_all()
load_all()
visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
load_all()
visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25.csv",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25.csv",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
load_all()
visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25.csv",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
load_all()
visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25.csv",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
load_all()
hals_vis <- visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25.csv",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
ylim
load_all()
hals_vis <- visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25.csv",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
load_all()
hals_vis <- visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25.csv",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
load_all()
hals_vis <- visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25.csv",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
load_all()
hals_vis <- visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25.csv",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
View(hals_vis)
hals_vis[[2]]
#' Title
#'
#' @return
#' @export
#'
#' @examples
visualization <- function(path_EC,
path_biomet
){
headers <- read.csv(path_EC, skip=1, header=FALSE, nrows=1, as.is=TRUE)
fluxes_site <- read.table(path_EC, sep=",", header = F,skip=3)
colnames(fluxes_site)= headers
fluxes_site$date <-as.Date(fluxes_site$date, format="%Y-%m-%d")
fluxes_site$datetime <- as.POSIXct(paste(fluxes_site$date, fluxes_site$time, sep=" "), format="%Y-%m-%d %H:%M", tz="UTC")
fluxes_site[fluxes_site == -9999] <- NA
fluxes_site$datetime <- lubridate::round_date(fluxes_site$datetime, "30 minutes")
meteo_site <- read.table(path_biomet, sep=",", header = T)
meteo_site$datetime <- as.POSIXct(meteo_site$datetime, format="%Y-%m-%d %H:%M:%S", tz="UTC")
fluxes_meteo <- merge(fluxes_site, meteo_site, by="datetime", all=TRUE)
#plotting
co2 <- ggplot2::ggplot(data=fluxes_meteo, ggplot2::aes(x=datetime, y=co2_flux))+
ggplot2::geom_point(size=0.8)+
ggplot2::ylim(-10,15)+
ggplot2::geom_hline(yintercept = 0)+
ggplot2::theme_bw()+
ggplot2::theme(axis.title.x=ggplot2::element_blank(),
axis.text.x=ggplot2::element_blank())
h2o <- ggplot2::ggplot(data=fluxes_meteo, ggplot2::aes(x=datetime, y=h2o_flux))+
ggplot2::geom_point(size=0.8)+
ggplot2::geom_hline(yintercept = 0)+
ggplot2::ylim(-1.5,8)+
ggplot2::theme_bw()+
ggplot2::theme(axis.title.x=ggplot2::element_blank(),
axis.text.x=ggplot2::element_blank())
ch4 <- ggplot2::ggplot(data=fluxes_meteo, ggplot2::aes(x=datetime, y=ch4_flux))+
ggplot2::geom_point(size=0.8)+
ggplot2::xlab("date")+
ggplot2::geom_hline(yintercept = 0)+
ggplot2::ylim(-0.2,0.2)+
ggplot2::theme_bw()
plots <- cowplot::plot_grid(co2,h2o,ch4, align = "v", ncol=1, rel_heights = c(1,1,1.15))
return(list(data=fluxes_meteo, graphs=plots))
}
load_all()
load_all()
hals_vis <- visualization(path_EC="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25.csv",path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv")
hals_vis$data
View(hals_vis$data)
check()
check()
check()
export(visualization)
library(roxygen2)
export(visualization)
document()
?visualization
use_testthat()
use_test()
hals_vis$data$Ts1_a
document()
document()
use_r("quality_control")
load_all()
quality_control(hals_vis$data)
readline(prompt = "write")
visualization(path_EC = "C:/BRAVE/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Halsingfors/pre_processed/exploring_results/FINAL_RUNS/fluxes_halsingfors_2021_02_26.csv",
path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv",
date_format="%d/%m/%Y")
load_all
load_all()
hals_vis <- visualization(path_EC = "C:/BRAVE/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Halsingfors/pre_processed/exploring_results/FINAL_RUNS/fluxes_halsingfors_2021_02_26.csv",
path_biomet="C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Biomet_merged/hals_met.csv",
date_format="%d/%m/%Y")
hals_vis$graphs
quality_control(hals_vis$data, RSSI = TRUE)
use_r("ustar_filter")
use_r(name = "rssi_filter")
document()
document()
document()
document()
?rssi_filter
?rssi_filter
?ustar_filter
load_all()
quality_control(hals_vis$data)
load_all()
quality_control(hals_vis$data)
quality_control(hals_vis$data, Temp_col="Ts3_a")
View(hals_vis)
load_all()
quality_control(hals_vis$data, Temp_col="Ts3_a")
load_all()
quality_control(hals_vis$data, Temp_col="Ts3_a")
?as.POSIXct
document()
document()
load_all()
quality_control(hals_vis$data, Temp_col="Ts3_a")
quality_control(hals_vis$data, RSSI=TRUE,Temp_col="Ts3_a")
2%in%1
2%in%2
c(2,1)%in%2
use_r(gapfill_between_sites)
use_r("gapfill_between_sites")
devtools()
library(devtools)
use_r("gapfill_between_sites")
document()
load_all()
?gapfill_between_sites
document()
load_all()
?gapfill_between_sites
?rssi_filter
?ustar_filter
?visualization
document()
load_all()
?visualization
warnings()
document()
load_all()
?visualization
?visualization
document()
load_all()
?visualization
document()
load_all()
?visualization
document()
load_all()
?gapfill_between_sites
check(...., args = "--no-examples")
check("PostEddyPro", args = "--no-examples")
?check
check("PostEddyPro")
check()
document()
load_all()
?gapfill_between_sites
document()
load_all()
?gapfill_between_sites
document()
load_all()
?gapfill_between_sites
?gapfill_between_sites
document()
library(devtools)
document()
?gapfill_between_sites
?read.table
document()
load_all()
?gapfill_between_sites
viewRd
previewRd
library(rstudioapi)
previewRd(gapfill_between_sites.Rd)
previewRd(/man/gapfill_between_sites.Rd)
previewRd("/man/gapfill_between_sites.Rd")
previewRd("man/gapfill_between_sites.Rd")
document()
getwd()
document("PostEddyPro")
document("C:/BRAVE/slu/eddy_covariance/myphd/R_codes/Organized/packages/PostEddyPro")
setwd("C:/BRAVE/slu/eddy_covariance/myphd/R_codes/Organized/packages/PostEddyPro")
document()
document("PostEddyPro")
devtools::document(setwd("C:/BRAVE/slu/eddy_covariance/myphd/R_codes/Organized/packages/PostEddyPro"))
document("PostEddyPro")
document()
load_all()
?gapfill_between_sites
check()
document()
load_all()
?gapfill_between_sites
check()
check()
check()
?sd
?read.csv
use_package("graphics")
use_package("stats")
use_package("utils")
check()
previewRd(quality_control.rd)
previewRd(man/quality_control.rd)
previewRd("man/quality_control.rd")
check()
use_r(name = "rf_flux_gapfiller")
use_package("lubridate")
use_r(temporal_calculators)
use_r("temporal_calculators")
document()
?temporal_calculators
temporal_calculators(data.frame(datetime=c("2020-01-01 00:30:00", "2020-01-01 01:00:00", "2020-01-01 01:30:00", "2020-01-01 02:00:00")))
data.frame(datetime=c("2020-01-01 00:30:00", "2020-01-01 01:00:00", "2020-01-01 01:30:00", "2020-01-01 02:00:00"))
data.frame(datetime=as.POSIXct(c("2020-01-01 00:30:00", "2020-01-01 01:00:00", "2020-01-01 01:30:00", "2020-01-01 02:00:00")))
temporal_calculators(data.frame(datetime=as.POSIXct(c("2020-01-01 00:30:00", "2020-01-01 01:00:00", "2020-01-01 01:30:00", "2020-01-01 02:00:00"))))
use_package(Metrics)
use_package("Metrics")
DF <- data.frame(x = c(1, 2, 3), y = c(0, 10, NA))
na.omit(DF)
?trainControl
??trainControl
use_package(caret)
use_package("caret")
use_package("randomForest")
use_package(dplyr)
use_package("dplyr")
?!!
)
install.packages("tune")
use_package(tune)
use_package("tune")
document()
load_all()
?rf_flux_gapfiller
document()
load_all()
?rf_gapfiller
?temporal_calculators
