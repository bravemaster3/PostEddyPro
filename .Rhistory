#+++ If not provided, calculate VPD from Tair and rH
# EddyData.F <- cbind(EddyData.F,VPD=fCalcVPDfromRHandTair(EddyData.F$rH, EddyData.F$Tair))
#+++ Add time stamp in POSIX time format
EddyDataWithPosix.F <- REddyProc::fConvertTimeToPosix(EddyData.F, 'YDH', Year='Year', Day='DoY', Hour='Hour')
#+++ Initalize R5 reference class sEddyProc for processing of eddy data
#+++ with all variables needed for processing later
EddyProc.C <- REddyProc::sEddyProc$new('EQTP', EddyDataWithPosix.F, c(FLUX,'Rg','Tair','VPD')) #change 'NEE' to other variable names if gapfilling other fluxes (have to match the variable name in the input data file)
EddyProc.C$sSetLocationInfo(LatDeg=latitude, LongDeg=longitude, TimeZoneHour=timezone)  #Location of Halsingfors
#+++ Fill gaps in variables with MDS gap filling algorithm (without prior ustar filtering)
EddyProc.C$sMDSGapFill('Tair', FillAll=FALSE)  	# Gap-filled Tair needed for partitioning and gapfilling
EddyProc.C$sMDSGapFill('VPD', FillAll=FALSE)  	# Gap-filled VPD needed for gapfilling
EddyProc.C$sMDSGapFill('Rg', FillAll=FALSE)     #Fill only the gaps for the meteo condition, e.g. 'Rg'
EddyProc.C$sMDSGapFill(FLUX, FillAll=gapfill_flux)     #Fill all values to estimate flux uncertainties
#+++ Partition NEE into GPP and respiration
if(FLUX == "NEE") EddyProc.C$sMRFluxPartition()	# night time partitioning -> Reco, GPP
#+++ Export gap filled and partitioned data to standard data frame
FilledEddyData.F <- EddyProc.C$sExportResults()
#+++ Save results into (tab-delimited) text file in directory
CombinedData.F <- cbind(EddyData.F, FilledEddyData.F)
#+++ May rename variables to correspond to Ameriflux
colnames(CombinedDataAmeriflux.F <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getBGC05ToAmerifluxVariableNameMapping() ))
CombinedDataAmeriflux.F$TIMESTAMP_END <- REddyProc::POSIXctToBerkeleyJulianDate( EddyProc.C$sExportData()[[1]] )
utils::head(tmp <- REddyProc::BerkeleyJulianDateToPOSIXct( CombinedDataAmeriflux.F$TIMESTAMP_END ))
colnames(tmp <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getAmerifluxToBGC05VariableNameMapping() ))
#opf <- paste0("EQTP_output_sim",toString(i),".txt") #update the output file name
if(is.null(file_name)) file_name <- paste0("For_ReddyProc_", FLUX, "_GF.txt")
REddyProc::fWriteDataframeToFile(CombinedData.F, file_name, saving_folder) #update the output file path
# #+++ Example plots of filled data to screen or to directory /plots
#EddyProc.C$sPlotFingerprintY('NEE_f', Year=2021) #gapfilled NEE fingerprint, update the year accordingly
}
reddyproc_gapfiller2(formatted_file_path = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/For_ReddyProc_NEE_2020_ONLY.txt", #For_ReddyProc_NEE.txt",
saving_folder = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC",
FLUX="NEE")
#+++Checking the output
#+
library(data.table)
library(dplyr)
data_Koffi_online <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt", skip=2, header = FALSE)
colnames(data_Koffi_online) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt"))
plot(data_Koffi_online$Reco_uStar, ylim=c(0, 3.5), type="l")
df_filled <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt", skip=2, header = FALSE)
colnames(df_filled) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt"))
lines(df_filled$Reco, ylim=c(0, 3.5), col=2)
reddyproc_gapfiller2 <- function(formatted_file_path,
saving_folder,
file_name=NULL,
FLUX=c("NEE","H2O"), #either of them
longitude=19.556646,
latitude=64.181980,
timezone=1,
gapfill_flux=TRUE){
#i=1 #turn on for testing
EddyData.F <- REddyProc::fLoadTXTIntoDataframe(formatted_file_path)
#+++ If not provided, calculate VPD from Tair and rH
# EddyData.F <- cbind(EddyData.F,VPD=fCalcVPDfromRHandTair(EddyData.F$rH, EddyData.F$Tair))
#+++ Add time stamp in POSIX time format
EddyDataWithPosix.F <- REddyProc::fConvertTimeToPosix(EddyData.F, 'YDH', Year='Year', Day='DoY', Hour='Hour')
#+++ Initalize R5 reference class sEddyProc for processing of eddy data
#+++ with all variables needed for processing later
EddyProc.C <- REddyProc::sEddyProc$new('EQTP', EddyDataWithPosix.F, c(FLUX,'Rg','Tair','VPD', 'Ustar')) #change 'NEE' to other variable names if gapfilling other fluxes (have to match the variable name in the input data file)
EddyProc.C$sSetLocationInfo(LatDeg=latitude, LongDeg=longitude, TimeZoneHour=timezone)  #Location of Halsingfors
#+++ Fill gaps in variables with MDS gap filling algorithm (without prior ustar filtering)
EddyProc.C$sMDSGapFill('Tair', FillAll=FALSE)  	# Gap-filled Tair needed for partitioning and gapfilling
EddyProc.C$sMDSGapFill('VPD', FillAll=FALSE)  	# Gap-filled VPD needed for gapfilling
EddyProc.C$sMDSGapFill('Rg', FillAll=FALSE)     #Fill only the gaps for the meteo condition, e.g. 'Rg'
EddyProc.C$sMDSGapFill(FLUX, FillAll=gapfill_flux)     #Fill all values to estimate flux uncertainties
#USTAR THRESHOLD
EddyProc.C$sEstimateUstarScenarios(
nSample = 100L, probs = c(0.05, 0.5, 0.95))
# message("ARRIVED HERE")
EddyProc.C$sGetEstimatedUstarThresholdDistribution()
EddyProc.C$sMDSGapFillUStarScens(FLUX)
#+++ Partition NEE into GPP and respiration
# if(FLUX == "NEE")  EddyProc.C$sMRFluxPartition()# EddyProc.C$sMRFluxPartitionUStarScens()	# night time partitioning -> Reco, GPP
if(FLUX == "NEE") EddyProc.C$sMRFluxPartitionUStarScens()
#+++ Export gap filled and partitioned data to standard data frame
FilledEddyData.F <- EddyProc.C$sExportResults()
#+++ Save results into (tab-delimited) text file in directory
CombinedData.F <- cbind(EddyData.F, FilledEddyData.F)
#+++ May rename variables to correspond to Ameriflux
colnames(CombinedDataAmeriflux.F <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getBGC05ToAmerifluxVariableNameMapping() ))
CombinedDataAmeriflux.F$TIMESTAMP_END <- REddyProc::POSIXctToBerkeleyJulianDate( EddyProc.C$sExportData()[[1]] )
utils::head(tmp <- REddyProc::BerkeleyJulianDateToPOSIXct( CombinedDataAmeriflux.F$TIMESTAMP_END ))
colnames(tmp <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getAmerifluxToBGC05VariableNameMapping() ))
#opf <- paste0("EQTP_output_sim",toString(i),".txt") #update the output file name
if(is.null(file_name)) file_name <- paste0("For_ReddyProc_", FLUX, "_GF.txt")
# message(str(CombinedData.F))
names(CombinedData.F)[which(names(CombinedData.F) == "GPP_uStar_f")] <- "GPP_f"
names(CombinedData.F)[which(names(CombinedData.F) == "Reco_uStar")] <- "Reco"
# View(CombinedData.F)
REddyProc::fWriteDataframeToFile(CombinedData.F, file_name, saving_folder) #update the output file path
# #+++ Example plots of filled data to screen or to directory /plots
#EddyProc.C$sPlotFingerprintY('NEE_f', Year=2021) #gapfilled NEE fingerprint, update the year accordingly
}
reddyproc_gapfiller2(formatted_file_path = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/For_ReddyProc_NEE_2020_ONLY.txt", #For_ReddyProc_NEE.txt",
saving_folder = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC",
FLUX="NEE")
#+++Checking the output
#+
library(data.table)
library(dplyr)
data_Koffi_online <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt", skip=2, header = FALSE)
colnames(data_Koffi_online) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt"))
plot(data_Koffi_online$Reco_uStar, ylim=c(0, 3.5), type="l")
df_filled <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt", skip=2, header = FALSE)
colnames(df_filled) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt"))
lines(df_filled$Reco, ylim=c(0, 3.5), col=2)
reddyproc_gapfiller2(formatted_file_path = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/For_ReddyProc_NEE.txt",#For_ReddyProc_NEE_2020_ONLY.txt",
saving_folder = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC",
FLUX="NEE")
#+++Checking the output
#+
library(data.table)
library(dplyr)
data_Koffi_online <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt", skip=2, header = FALSE)
colnames(data_Koffi_online) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt"))
plot(data_Koffi_online$Reco_uStar, ylim=c(0, 3.5), type="l")
df_filled <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt", skip=2, header = FALSE)
colnames(df_filled) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt"))
lines(df_filled$Reco, ylim=c(0, 3.5), col=2)
formatted_file_path = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/For_ReddyProc_NEE.txt"
saving_folder = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC"
FLUX="NEE"
FLUX=c("NEE","H2O")
FLUX="NEE"
longitude=19.556646
latitude=64.181980
timezone=1
gapfill_flux=TRUE
#i=1 #turn on for testing
EddyData.F <- REddyProc::fLoadTXTIntoDataframe(formatted_file_path)
View(EddyData.F)
#i=1 #turn on for testing
all_df <- REddyProc::fLoadTXTIntoDataframe(formatted_file_path)
#' @param saving_folder path to the folder where the gapfilled fluxes will be saved
#' @param file_name fine name with extension (only base name with extension, e.g. fluxes.txt)
#' @param FLUX flux column in the final output: NEE for CO2 flux OR H2O for water flux
#' @param longitude longitude of the site
#' @param latitude latitude of the site
#' @param timezone timezone as a signed integer (e.g. 1 for UTC+1)
#' @param gapfill_flux boolean. Default is TRUE. Set to false if gapfilling of NEE has been performed before and do only partitioning.
#'
#' @return No value returned, but a file saved to disk
#' @export
reddyproc_gapfiller2 <- function(formatted_file_path,
saving_folder,
file_name=NULL,
FLUX=c("NEE","H2O"), #either of them
longitude=19.556646,
latitude=64.181980,
timezone=1,
gapfill_flux=TRUE){
#i=1 #turn on for testing
all_df <- REddyProc::fLoadTXTIntoDataframe(formatted_file_path)
year_index = 0
for (year in unique(all_df$Year)){
year_index = year_index+1
EddyData.F <- all_df %>%
dplyr::filter(Year == year)
#+++ If not provided, calculate VPD from Tair and rH
# EddyData.F <- cbind(EddyData.F,VPD=fCalcVPDfromRHandTair(EddyData.F$rH, EddyData.F$Tair))
#+++ Add time stamp in POSIX time format
EddyDataWithPosix.F <- REddyProc::fConvertTimeToPosix(EddyData.F, 'YDH', Year='Year', Day='DoY', Hour='Hour')
#+++ Initalize R5 reference class sEddyProc for processing of eddy data
#+++ with all variables needed for processing later
EddyProc.C <- REddyProc::sEddyProc$new('EQTP', EddyDataWithPosix.F, c(FLUX,'Rg','Tair','VPD', 'Ustar')) #change 'NEE' to other variable names if gapfilling other fluxes (have to match the variable name in the input data file)
EddyProc.C$sSetLocationInfo(LatDeg=latitude, LongDeg=longitude, TimeZoneHour=timezone)  #Location of Halsingfors
#+++ Fill gaps in variables with MDS gap filling algorithm (without prior ustar filtering)
EddyProc.C$sMDSGapFill('Tair', FillAll=FALSE)  	# Gap-filled Tair needed for partitioning and gapfilling
EddyProc.C$sMDSGapFill('VPD', FillAll=FALSE)  	# Gap-filled VPD needed for gapfilling
EddyProc.C$sMDSGapFill('Rg', FillAll=FALSE)     #Fill only the gaps for the meteo condition, e.g. 'Rg'
EddyProc.C$sMDSGapFill(FLUX, FillAll=gapfill_flux)     #Fill all values to estimate flux uncertainties
#USTAR THRESHOLD
EddyProc.C$sEstimateUstarScenarios(
nSample = 100L, probs = c(0.05, 0.5, 0.95))
# message("ARRIVED HERE")
EddyProc.C$sGetEstimatedUstarThresholdDistribution()
EddyProc.C$sMDSGapFillUStarScens(FLUX)
#+++ Partition NEE into GPP and respiration
# if(FLUX == "NEE")  EddyProc.C$sMRFluxPartition()# EddyProc.C$sMRFluxPartitionUStarScens()	# night time partitioning -> Reco, GPP
if(FLUX == "NEE") EddyProc.C$sMRFluxPartitionUStarScens()
#+++ Export gap filled and partitioned data to standard data frame
FilledEddyData.F <- EddyProc.C$sExportResults()
#+++ Save results into (tab-delimited) text file in directory
CombinedData.F <- cbind(EddyData.F, FilledEddyData.F)
#+++ May rename variables to correspond to Ameriflux
colnames(CombinedDataAmeriflux.F <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getBGC05ToAmerifluxVariableNameMapping() ))
CombinedDataAmeriflux.F$TIMESTAMP_END <- REddyProc::POSIXctToBerkeleyJulianDate( EddyProc.C$sExportData()[[1]] )
utils::head(tmp <- REddyProc::BerkeleyJulianDateToPOSIXct( CombinedDataAmeriflux.F$TIMESTAMP_END ))
colnames(tmp <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getAmerifluxToBGC05VariableNameMapping() ))
#opf <- paste0("EQTP_output_sim",toString(i),".txt") #update the output file name
if (year_index == 1){
results_df <- CombinedData.F
} else {
results_df <- rbind(results_df, CombinedData.F)
}
}
if(is.null(file_name)) file_name <- paste0("For_ReddyProc_", FLUX, "_GF.txt")
# message(str(CombinedData.F))
names(results_df)[which(names(results_df) == "GPP_uStar_f")] <- "GPP_f"
names(results_df)[which(names(results_df) == "Reco_uStar")] <- "Reco"
# View(CombinedData.F)
REddyProc::fWriteDataframeToFile(results_df, file_name, saving_folder) #update the output file path
# #+++ Example plots of filled data to screen or to directory /plots
#EddyProc.C$sPlotFingerprintY('NEE_f', Year=2021) #gapfilled NEE fingerprint, update the year accordingly
}
reddyproc_gapfiller2(formatted_file_path = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/For_ReddyProc_NEE.txt",#For_ReddyProc_NEE_2020_ONLY.txt",
saving_folder = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC",
FLUX="NEE")
warnings()
#' A wrapper for ReddyProc gapfiller for gapfilling NEE or H2O fluxes,and partitionning NEE
#'
#' @param formatted_file_path path to the file ready for ReddyProc gapfilling. Typically the output from the "formatting_fluxes_REddyProc" function of the PostEddyPro package
#' @param saving_folder path to the folder where the gapfilled fluxes will be saved
#' @param file_name fine name with extension (only base name with extension, e.g. fluxes.txt)
#' @param FLUX flux column in the final output: NEE for CO2 flux OR H2O for water flux
#' @param longitude longitude of the site
#' @param latitude latitude of the site
#' @param timezone timezone as a signed integer (e.g. 1 for UTC+1)
#' @param gapfill_flux boolean. Default is TRUE. Set to false if gapfilling of NEE has been performed before and do only partitioning.
#'
#' @return No value returned, but a file saved to disk
#' @export
reddyproc_gapfiller2 <- function(formatted_file_path,
saving_folder,
file_name=NULL,
FLUX=c("NEE","H2O"), #either of them
longitude=19.556646,
latitude=64.181980,
timezone=1,
gapfill_flux=TRUE){
#i=1 #turn on for testing
all_df <- REddyProc::fLoadTXTIntoDataframe(formatted_file_path)
year_index = 0
for (year in unique(all_df$Year)){
message(paste("Now gapfilling/partitionning Year:", year))
year_index = year_index+1
EddyData.F <- all_df %>%
dplyr::filter(Year == year)
tryCatch({
#+++ If not provided, calculate VPD from Tair and rH
# EddyData.F <- cbind(EddyData.F,VPD=fCalcVPDfromRHandTair(EddyData.F$rH, EddyData.F$Tair))
#+++ Add time stamp in POSIX time format
EddyDataWithPosix.F <- REddyProc::fConvertTimeToPosix(EddyData.F, 'YDH', Year='Year', Day='DoY', Hour='Hour')
#+++ Initalize R5 reference class sEddyProc for processing of eddy data
#+++ with all variables needed for processing later
EddyProc.C <- REddyProc::sEddyProc$new('EQTP', EddyDataWithPosix.F, c(FLUX,'Rg','Tair','VPD', 'Ustar')) #change 'NEE' to other variable names if gapfilling other fluxes (have to match the variable name in the input data file)
EddyProc.C$sSetLocationInfo(LatDeg=latitude, LongDeg=longitude, TimeZoneHour=timezone)  #Location of Halsingfors
#+++ Fill gaps in variables with MDS gap filling algorithm (without prior ustar filtering)
EddyProc.C$sMDSGapFill('Tair', FillAll=FALSE)  	# Gap-filled Tair needed for partitioning and gapfilling
EddyProc.C$sMDSGapFill('VPD', FillAll=FALSE)  	# Gap-filled VPD needed for gapfilling
EddyProc.C$sMDSGapFill('Rg', FillAll=FALSE)     #Fill only the gaps for the meteo condition, e.g. 'Rg'
EddyProc.C$sMDSGapFill(FLUX, FillAll=gapfill_flux)     #Fill all values to estimate flux uncertainties
#USTAR THRESHOLD
EddyProc.C$sEstimateUstarScenarios(
nSample = 100L, probs = c(0.05, 0.5, 0.95))
# message("ARRIVED HERE")
EddyProc.C$sGetEstimatedUstarThresholdDistribution()
EddyProc.C$sMDSGapFillUStarScens(FLUX)
#+++ Partition NEE into GPP and respiration
# if(FLUX == "NEE")  EddyProc.C$sMRFluxPartition()# EddyProc.C$sMRFluxPartitionUStarScens()	# night time partitioning -> Reco, GPP
if(FLUX == "NEE") EddyProc.C$sMRFluxPartitionUStarScens()
#+++ Export gap filled and partitioned data to standard data frame
FilledEddyData.F <- EddyProc.C$sExportResults()
#+++ Save results into (tab-delimited) text file in directory
CombinedData.F <- cbind(EddyData.F, FilledEddyData.F)
#+++ May rename variables to correspond to Ameriflux
colnames(CombinedDataAmeriflux.F <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getBGC05ToAmerifluxVariableNameMapping() ))
CombinedDataAmeriflux.F$TIMESTAMP_END <- REddyProc::POSIXctToBerkeleyJulianDate( EddyProc.C$sExportData()[[1]] )
utils::head(tmp <- REddyProc::BerkeleyJulianDateToPOSIXct( CombinedDataAmeriflux.F$TIMESTAMP_END ))
colnames(tmp <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getAmerifluxToBGC05VariableNameMapping() ))
#opf <- paste0("EQTP_output_sim",toString(i),".txt") #update the output file name
}, error=function(e){
print("An error occurred:")
print(e)
}, finally = {
CombinedData.F <- EddyData.F
})
if (year_index == 1){
results_df <- CombinedData.F
} else {
results_df <- merge(results_df, CombinedData.F, all=TRUE)
}
}
if(is.null(file_name)) file_name <- paste0("For_ReddyProc_", FLUX, "_GF.txt")
# message(str(CombinedData.F))
names(results_df)[which(names(results_df) == "GPP_uStar_f")] <- "GPP_f"
names(results_df)[which(names(results_df) == "Reco_uStar")] <- "Reco"
# View(CombinedData.F)
REddyProc::fWriteDataframeToFile(results_df, file_name, saving_folder) #update the output file path
# #+++ Example plots of filled data to screen or to directory /plots
#EddyProc.C$sPlotFingerprintY('NEE_f', Year=2021) #gapfilled NEE fingerprint, update the year accordingly
}
reddyproc_gapfiller2(formatted_file_path = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/For_ReddyProc_NEE.txt",#For_ReddyProc_NEE_2020_ONLY.txt",
saving_folder = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC",
FLUX="NEE")
df_filled <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt", skip=2, header = FALSE)
colnames(df_filled) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt"))
View(df_filled)
#' A wrapper for ReddyProc gapfiller for gapfilling NEE or H2O fluxes,and partitionning NEE
#'
#' @param formatted_file_path path to the file ready for ReddyProc gapfilling. Typically the output from the "formatting_fluxes_REddyProc" function of the PostEddyPro package
#' @param saving_folder path to the folder where the gapfilled fluxes will be saved
#' @param file_name fine name with extension (only base name with extension, e.g. fluxes.txt)
#' @param FLUX flux column in the final output: NEE for CO2 flux OR H2O for water flux
#' @param longitude longitude of the site
#' @param latitude latitude of the site
#' @param timezone timezone as a signed integer (e.g. 1 for UTC+1)
#' @param gapfill_flux boolean. Default is TRUE. Set to false if gapfilling of NEE has been performed before and do only partitioning.
#'
#' @return No value returned, but a file saved to disk
#' @export
reddyproc_gapfiller2 <- function(formatted_file_path,
saving_folder,
file_name=NULL,
FLUX=c("NEE","H2O"), #either of them
longitude=19.556646,
latitude=64.181980,
timezone=1,
gapfill_flux=TRUE){
#i=1 #turn on for testing
all_df <- REddyProc::fLoadTXTIntoDataframe(formatted_file_path)
year_index = 0
for (year in unique(all_df$Year)){
message(paste("Now gapfilling/partitionning Year:", year))
year_index = year_index+1
EddyData.F <- all_df %>%
dplyr::filter(Year == year)
tryCatch({
#+++ If not provided, calculate VPD from Tair and rH
# EddyData.F <- cbind(EddyData.F,VPD=fCalcVPDfromRHandTair(EddyData.F$rH, EddyData.F$Tair))
#+++ Add time stamp in POSIX time format
EddyDataWithPosix.F <- REddyProc::fConvertTimeToPosix(EddyData.F, 'YDH', Year='Year', Day='DoY', Hour='Hour')
#+++ Initalize R5 reference class sEddyProc for processing of eddy data
#+++ with all variables needed for processing later
EddyProc.C <- REddyProc::sEddyProc$new('EQTP', EddyDataWithPosix.F, c(FLUX,'Rg','Tair','VPD', 'Ustar')) #change 'NEE' to other variable names if gapfilling other fluxes (have to match the variable name in the input data file)
EddyProc.C$sSetLocationInfo(LatDeg=latitude, LongDeg=longitude, TimeZoneHour=timezone)  #Location of Halsingfors
#+++ Fill gaps in variables with MDS gap filling algorithm (without prior ustar filtering)
EddyProc.C$sMDSGapFill('Tair', FillAll=FALSE)  	# Gap-filled Tair needed for partitioning and gapfilling
EddyProc.C$sMDSGapFill('VPD', FillAll=FALSE)  	# Gap-filled VPD needed for gapfilling
EddyProc.C$sMDSGapFill('Rg', FillAll=FALSE)     #Fill only the gaps for the meteo condition, e.g. 'Rg'
EddyProc.C$sMDSGapFill(FLUX, FillAll=gapfill_flux)     #Fill all values to estimate flux uncertainties
#USTAR THRESHOLD
EddyProc.C$sEstimateUstarScenarios(
nSample = 100L, probs = c(0.05, 0.5, 0.95))
# message("ARRIVED HERE")
EddyProc.C$sGetEstimatedUstarThresholdDistribution()
EddyProc.C$sMDSGapFillUStarScens(FLUX)
#+++ Partition NEE into GPP and respiration
# if(FLUX == "NEE")  EddyProc.C$sMRFluxPartition()# EddyProc.C$sMRFluxPartitionUStarScens()	# night time partitioning -> Reco, GPP
if(FLUX == "NEE") EddyProc.C$sMRFluxPartitionUStarScens()
#+++ Export gap filled and partitioned data to standard data frame
FilledEddyData.F <- EddyProc.C$sExportResults()
#+++ Save results into (tab-delimited) text file in directory
CombinedData.F <- cbind(EddyData.F, FilledEddyData.F)
#+++ May rename variables to correspond to Ameriflux
colnames(CombinedDataAmeriflux.F <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getBGC05ToAmerifluxVariableNameMapping() ))
CombinedDataAmeriflux.F$TIMESTAMP_END <- REddyProc::POSIXctToBerkeleyJulianDate( EddyProc.C$sExportData()[[1]] )
utils::head(tmp <- REddyProc::BerkeleyJulianDateToPOSIXct( CombinedDataAmeriflux.F$TIMESTAMP_END ))
colnames(tmp <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getAmerifluxToBGC05VariableNameMapping() ))
#opf <- paste0("EQTP_output_sim",toString(i),".txt") #update the output file name
}, error=function(e){
print("An error occurred:")
print(e)
CombinedData.F <- EddyData.F
})
if (year_index == 1){
results_df <- CombinedData.F
} else {
results_df <- merge(results_df, CombinedData.F, all=TRUE)
}
}
if(is.null(file_name)) file_name <- paste0("For_ReddyProc_", FLUX, "_GF.txt")
# message(str(CombinedData.F))
names(results_df)[which(names(results_df) == "GPP_uStar_f")] <- "GPP_f"
names(results_df)[which(names(results_df) == "Reco_uStar")] <- "Reco"
# View(CombinedData.F)
REddyProc::fWriteDataframeToFile(results_df, file_name, saving_folder) #update the output file path
# #+++ Example plots of filled data to screen or to directory /plots
#EddyProc.C$sPlotFingerprintY('NEE_f', Year=2021) #gapfilled NEE fingerprint, update the year accordingly
}
reddyproc_gapfiller2(formatted_file_path = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/For_ReddyProc_NEE.txt",#For_ReddyProc_NEE_2020_ONLY.txt",
saving_folder = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC",
FLUX="NEE")
data_Koffi_online <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt", skip=2, header = FALSE)
colnames(data_Koffi_online) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt"))
plot(data_Koffi_online$Reco_uStar, ylim=c(0, 3.5), type="l")
df_filled <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt", skip=2, header = FALSE)
colnames(df_filled) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt"))
lines(df_filled$Reco, ylim=c(0, 3.5), col=2)
plot(df_filled$Reco, ylim=c(0, 3.5), col=2)
plot(df_filled$Reco, ylim=c(0, 3.5), col=2, type="l")
#' A wrapper for ReddyProc gapfiller for gapfilling NEE or H2O fluxes,and partitionning NEE
#'
#' @param formatted_file_path path to the file ready for ReddyProc gapfilling. Typically the output from the "formatting_fluxes_REddyProc" function of the PostEddyPro package
#' @param saving_folder path to the folder where the gapfilled fluxes will be saved
#' @param file_name fine name with extension (only base name with extension, e.g. fluxes.txt)
#' @param FLUX flux column in the final output: NEE for CO2 flux OR H2O for water flux
#' @param longitude longitude of the site
#' @param latitude latitude of the site
#' @param timezone timezone as a signed integer (e.g. 1 for UTC+1)
#' @param gapfill_flux boolean. Default is TRUE. Set to false if gapfilling of NEE has been performed before and do only partitioning.
#'
#' @return No value returned, but a file saved to disk
#' @export
reddyproc_gapfiller2 <- function(formatted_file_path,
saving_folder,
file_name=NULL,
FLUX=c("NEE","H2O"), #either of them
longitude=19.556646,
latitude=64.181980,
timezone=1,
gapfill_flux=TRUE){
#i=1 #turn on for testing
all_df <- REddyProc::fLoadTXTIntoDataframe(formatted_file_path)
year_index = 0
for (year in unique(all_df$Year)){
message(paste("Now gapfilling/partitionning Year:", year))
year_index = year_index+1
EddyData.F <- all_df %>%
dplyr::filter(Year == year)
tryCatch({
#+++ If not provided, calculate VPD from Tair and rH
# EddyData.F <- cbind(EddyData.F,VPD=fCalcVPDfromRHandTair(EddyData.F$rH, EddyData.F$Tair))
#+++ Add time stamp in POSIX time format
EddyDataWithPosix.F <- REddyProc::fConvertTimeToPosix(EddyData.F, 'YDH', Year='Year', Day='DoY', Hour='Hour')
#+++ Initalize R5 reference class sEddyProc for processing of eddy data
#+++ with all variables needed for processing later
EddyProc.C <- REddyProc::sEddyProc$new('EQTP', EddyDataWithPosix.F, c(FLUX,'Rg','Tair','VPD', 'Ustar')) #change 'NEE' to other variable names if gapfilling other fluxes (have to match the variable name in the input data file)
EddyProc.C$sSetLocationInfo(LatDeg=latitude, LongDeg=longitude, TimeZoneHour=timezone)  #Location of Halsingfors
#+++ Fill gaps in variables with MDS gap filling algorithm (without prior ustar filtering)
EddyProc.C$sMDSGapFill('Tair', FillAll=FALSE)  	# Gap-filled Tair needed for partitioning and gapfilling
EddyProc.C$sMDSGapFill('VPD', FillAll=FALSE)  	# Gap-filled VPD needed for gapfilling
EddyProc.C$sMDSGapFill('Rg', FillAll=FALSE)     #Fill only the gaps for the meteo condition, e.g. 'Rg'
EddyProc.C$sMDSGapFill(FLUX, FillAll=gapfill_flux)     #Fill all values to estimate flux uncertainties
#USTAR THRESHOLD
EddyProc.C$sEstimateUstarScenarios(
nSample = 100L, probs = c(0.05, 0.5, 0.95))
# message("ARRIVED HERE")
EddyProc.C$sGetEstimatedUstarThresholdDistribution()
EddyProc.C$sMDSGapFillUStarScens(FLUX)
#+++ Partition NEE into GPP and respiration
if(FLUX == "NEE")  EddyProc.C$sMRFluxPartition()# EddyProc.C$sMRFluxPartitionUStarScens()	# night time partitioning -> Reco, GPP
# if(FLUX == "NEE") EddyProc.C$sMRFluxPartitionUStarScens()
#+++ Export gap filled and partitioned data to standard data frame
FilledEddyData.F <- EddyProc.C$sExportResults()
#+++ Save results into (tab-delimited) text file in directory
CombinedData.F <- cbind(EddyData.F, FilledEddyData.F)
#+++ May rename variables to correspond to Ameriflux
colnames(CombinedDataAmeriflux.F <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getBGC05ToAmerifluxVariableNameMapping() ))
CombinedDataAmeriflux.F$TIMESTAMP_END <- REddyProc::POSIXctToBerkeleyJulianDate( EddyProc.C$sExportData()[[1]] )
utils::head(tmp <- REddyProc::BerkeleyJulianDateToPOSIXct( CombinedDataAmeriflux.F$TIMESTAMP_END ))
colnames(tmp <- REddyProc::renameVariablesInDataframe(CombinedData.F, REddyProc::getAmerifluxToBGC05VariableNameMapping() ))
#opf <- paste0("EQTP_output_sim",toString(i),".txt") #update the output file name
}, error=function(e){
print("An error occurred:")
print(e)
CombinedData.F <- EddyData.F
})
if (year_index == 1){
results_df <- CombinedData.F
} else {
results_df <- merge(results_df, CombinedData.F, all=TRUE)
}
}
if(is.null(file_name)) file_name <- paste0("For_ReddyProc_", FLUX, "_GF.txt")
# message(str(CombinedData.F))
names(results_df)[which(names(results_df) == "GPP_uStar_f")] <- "GPP_f"
names(results_df)[which(names(results_df) == "Reco_uStar")] <- "Reco"
# View(CombinedData.F)
REddyProc::fWriteDataframeToFile(results_df, file_name, saving_folder) #update the output file path
# #+++ Example plots of filled data to screen or to directory /plots
#EddyProc.C$sPlotFingerprintY('NEE_f', Year=2021) #gapfilled NEE fingerprint, update the year accordingly
}
reddyproc_gapfiller2(formatted_file_path = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/For_ReddyProc_NEE.txt",#For_ReddyProc_NEE_2020_ONLY.txt",
saving_folder = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC",
FLUX="NEE")
data_Koffi_online <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt", skip=2, header = FALSE)
colnames(data_Koffi_online) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt"))
plot(data_Koffi_online$Reco_uStar, ylim=c(0, 3.5), type="l")
df_filled <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt", skip=2, header = FALSE)
colnames(df_filled) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt"))
lines(df_filled$Reco, ylim=c(0, 3.5), col=2)
library(devtools)
devtools::document()
install_github("bravemaster3/PostEddyPro")
install_github("bravemaster3/PostEddyPro")
devtools::install_github("bravemaster3/PostEddyPro")
df_filled <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt", skip=2, header = FALSE)
#+++Checking the output
#+
library(data.table)
library(dplyr)
data_Koffi_online <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt", skip=2, header = FALSE)
colnames(data_Koffi_online) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/ONLINE_REDDYPROC/output.txt"))
plot(data_Koffi_online$Reco_uStar, ylim=c(0, 3.5), type="l")
df_filled <- fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt", skip=2, header = FALSE)
colnames(df_filled) <- colnames(fread("D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC/For_ReddyProc_NEE_GF.txt"))
lines(df_filled$Reco, ylim=c(0, 3.5), col=2)
PostEddyPro::reddyproc_gapfiller(formatted_file_path = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/For_ReddyProc_NEE.txt",#For_ReddyProc_NEE_2020_ONLY.txt",
saving_folder = "D:/EC/Data_organized/Degero/FINAL_2023/CO2/RPACKAGE_REDDYPROC",
FLUX="NEE")
document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(usethis)
document()
library(dev*)
library(devtools)
document()
