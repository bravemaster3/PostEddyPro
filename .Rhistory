aggr_var
df$year
df
biomet_aggregator(aggr_var="growing_season")
output_list <- list()
aggr_var_real <- NULL
if(aggr_var == "hour"){
df$datetime <- as.POSIXct(df[,datetime], format="%Y-%m-%d %H", tz="UTC")
aggr_var_real <- "datetime"
} else if(aggr_var == "day"){
df$date <- as.Date(df[,datetime])
aggr_var_real <- "date"
} else if(aggr_var == "week") {
df$year <- lubridate::year(df[,datetime])
df$week <- lubridate::week(df[,datetime])
aggr_var_real <- c("year","week")
} else if(aggr_var == "month") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
aggr_var_real <- c("year","month")
} else if(aggr_var == "year") {
df$year <- lubridate::year(df[,datetime])
aggr_var_real <- "year"
} else if(aggr_var == "growing_season") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
df$growing_season <- NA
for(yr in unique(df$year)){
g_s <- NA
g_s <- yr - min(unique(df$year)) + 1
df$growing_season[which(df$month %in% c(5:10) & df$year==yr)] <- paste("Growing season", g_s, sep= " ")
df$growing_season[which(!(df$month %in% c(5:10)) & df$year==yr)] <-  paste("Non growing season", g_s, sep= " ")
}
aggr_var_real <- c("year","growing_season")
}
aggr_var_real
View(df)
View(df)
for(fun in unique(aggr_fun)){
print(fun)
ind <- which(aggr_fun == fun)
biomet_sub <- biomet_vars[ind]
df_fun_name <- paste0("df","_",fun)
#df[,biomet_sub]
output_list[[df_fun_name]] <- stats::aggregate(list(df[,biomet_sub]), by = list(df[,aggr_var_real]), fun) %>% `colnames<-` (c(aggr_var_real,biomet_sub))
}
df[,aggr_var_real]
biomet_aggregator(aggr_var="hour")
biomet_aggregator(aggr_var="hour")
test <- biomet_aggregator(aggr_var="growing_season")
test <- biomet_aggregator(aggr_var="hour")
View(test)
test <- biomet_aggregator(aggr_var="day")
biomet_aggregator <- function(df=gapfilling_list_hals$site_df,
datetime="datetime",
biomet_vars=c("Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("mean","mean","mean","sum","sum"),
aggr_var=c("hour","day","week","month","year","growing_season")){
output_list <- list()
aggr_var_real <- NULL
if(aggr_var == "hour"){
df$datetime <- round(df[,datetime], units="hour")
aggr_var_real <- "datetime"
} else if(aggr_var == "day"){
df$date <- as.Date(df[,datetime])
aggr_var_real <- "date"
} else if(aggr_var == "week") {
df$year <- lubridate::year(df[,datetime])
df$week <- lubridate::week(df[,datetime])
aggr_var_real <- c("year","week")
} else if(aggr_var == "month") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
aggr_var_real <- c("year","month")
} else if(aggr_var == "year") {
df$year <- lubridate::year(df[,datetime])
aggr_var_real <- "year"
} else if(aggr_var == "growing_season") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
df$growing_season <- NA
for(yr in unique(df$year)){
g_s <- NA
g_s <- yr - min(unique(df$year)) + 1
df$growing_season[which(df$month %in% c(5:10) & df$year==yr)] <- paste("Growing season", g_s, sep= " ")
df$growing_season[which(!(df$month %in% c(5:10)) & df$year==yr)] <-  paste("Non growing season", g_s, sep= " ")
}
aggr_var_real <- c("year","growing_season")
}
for(fun in unique(aggr_fun)){
print(fun)
ind <- which(aggr_fun == fun)
biomet_sub <- biomet_vars[ind]
df_fun_name <- paste0("df","_",fun)
#df[,biomet_sub]
output_list[[df_fun_name]] <- stats::aggregate(list(df[,biomet_sub]), by = list(df[,aggr_var_real]), fun) %>% `colnames<-` (c(aggr_var_real,biomet_sub))
}
#return(purrr::reduce(output_list,  by=aggr_var))
return(Reduce(function(...) merge(..., all = TRUE, by=aggr_var_real), output_list))
}
test <- biomet_aggregator(aggr_var="hour")
biomet_aggregator <- function(df=gapfilling_list_hals$site_df,
datetime="datetime",
biomet_vars=c("Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("mean","mean","mean","sum","sum"),
aggr_var=c("hour","day","week","month","year","growing_season")){
output_list <- list()
aggr_var_real <- NULL
if(aggr_var == "hour"){
df$datetime <- round(df[,datetime], units="hours")
aggr_var_real <- "datetime"
} else if(aggr_var == "day"){
df$date <- as.Date(df[,datetime])
aggr_var_real <- "date"
} else if(aggr_var == "week") {
df$year <- lubridate::year(df[,datetime])
df$week <- lubridate::week(df[,datetime])
aggr_var_real <- c("year","week")
} else if(aggr_var == "month") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
aggr_var_real <- c("year","month")
} else if(aggr_var == "year") {
df$year <- lubridate::year(df[,datetime])
aggr_var_real <- "year"
} else if(aggr_var == "growing_season") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
df$growing_season <- NA
for(yr in unique(df$year)){
g_s <- NA
g_s <- yr - min(unique(df$year)) + 1
df$growing_season[which(df$month %in% c(5:10) & df$year==yr)] <- paste("Growing season", g_s, sep= " ")
df$growing_season[which(!(df$month %in% c(5:10)) & df$year==yr)] <-  paste("Non growing season", g_s, sep= " ")
}
aggr_var_real <- c("year","growing_season")
}
for(fun in unique(aggr_fun)){
print(fun)
ind <- which(aggr_fun == fun)
biomet_sub <- biomet_vars[ind]
df_fun_name <- paste0("df","_",fun)
#df[,biomet_sub]
output_list[[df_fun_name]] <- stats::aggregate(list(df[,biomet_sub]), by = list(df[,aggr_var_real]), fun) %>% `colnames<-` (c(aggr_var_real,biomet_sub))
}
#return(purrr::reduce(output_list,  by=aggr_var))
return(Reduce(function(...) merge(..., all = TRUE, by=aggr_var_real), output_list))
}
test <- biomet_aggregator(aggr_var="hour")
df$datetime <- round(df[,datetime], units="hours")
df$datetime
df$datetime <- as.POSIXct(round(df[,datetime], units="hours"), tz="UTC")
biomet_aggregator <- function(df=gapfilling_list_hals$site_df,
datetime="datetime",
biomet_vars=c("Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("mean","mean","mean","sum","sum"),
aggr_var=c("hour","day","week","month","year","growing_season")){
output_list <- list()
aggr_var_real <- NULL
if(aggr_var == "hour"){
df$datetime <- as.POSIXct(round(df[,datetime], units="hours"), tz="UTC")
aggr_var_real <- "datetime"
} else if(aggr_var == "day"){
df$date <- as.Date(df[,datetime])
aggr_var_real <- "date"
} else if(aggr_var == "week") {
df$year <- lubridate::year(df[,datetime])
df$week <- lubridate::week(df[,datetime])
aggr_var_real <- c("year","week")
} else if(aggr_var == "month") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
aggr_var_real <- c("year","month")
} else if(aggr_var == "year") {
df$year <- lubridate::year(df[,datetime])
aggr_var_real <- "year"
} else if(aggr_var == "growing_season") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
df$growing_season <- NA
for(yr in unique(df$year)){
g_s <- NA
g_s <- yr - min(unique(df$year)) + 1
df$growing_season[which(df$month %in% c(5:10) & df$year==yr)] <- paste("Growing season", g_s, sep= " ")
df$growing_season[which(!(df$month %in% c(5:10)) & df$year==yr)] <-  paste("Non growing season", g_s, sep= " ")
}
aggr_var_real <- c("year","growing_season")
}
for(fun in unique(aggr_fun)){
print(fun)
ind <- which(aggr_fun == fun)
biomet_sub <- biomet_vars[ind]
df_fun_name <- paste0("df","_",fun)
#df[,biomet_sub]
output_list[[df_fun_name]] <- stats::aggregate(list(df[,biomet_sub]), by = list(df[,aggr_var_real]), fun) %>% `colnames<-` (c(aggr_var_real,biomet_sub))
}
#return(purrr::reduce(output_list,  by=aggr_var))
return(Reduce(function(...) merge(..., all = TRUE, by=aggr_var_real), output_list))
}
test <- biomet_aggregator(aggr_var="hour")
plot(SNOWd~datetime, data=test)
test <- biomet_aggregator(aggr_var="day")
plot(SNOWd~date, data=test)
test <- biomet_aggregator(aggr_var="month")
output_list[[df_fun_name]] <- stats::aggregate(list(df[,biomet_sub]), by = list(df[,aggr_var_real]), fun)
aggr_var_real
fun
df[,biomet_sub]
output_list[[df_fun_name]] <- stats::aggregate(list(as.data.frame(df[,biomet_sub])), by = list(as.data.frame(df[,aggr_var_real])), fun) %>% `colnames<-` (c(aggr_var_real,biomet_sub))
aggregate(list(mtcars[,c("hp","wt")]), by=list(mtcars[,c("cyl","displ")], mean)
)
aggregate(list(mtcars[,c("hp","wt")]), by=list(mtcars[,c("cyl","displ")]), mean)
mtcars
aggregate(list(mtcars[,c("hp","wt")]), by=list(mtcars[,c("cyl","disp")]), mean)
aggregate(list(mtcars[,c("hp","wt")]), by=list(mtcars[,c("cyl)]), mean)
""
)
"
aggregate(list(mtcars[,c("hp","wt")]), by=list(mtcars[,c("cyl")]), mean)
biomet_aggregator <- function(df=gapfilling_list_hals$site_df,
datetime="datetime",
biomet_vars=c("Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("mean","mean","mean","sum","sum"),
aggr_var=c("hour","day","week","month","year","growing_season")){
output_list <- list()
aggr_var_real <- NULL
if(aggr_var == "hour"){
df$datetime <- as.POSIXct(round(df[,datetime], units="hours"), tz="UTC")
aggr_var_real <- "datetime"
list_aggr_var_real <- list(df$datetime)
} else if(aggr_var == "day"){
df$date <- as.Date(df[,datetime])
aggr_var_real <- "date"
list_aggr_var_real <- list(df$date)
} else if(aggr_var == "week") {
df$year <- lubridate::year(df[,datetime])
df$week <- lubridate::week(df[,datetime])
aggr_var_real <- c("year","week")
list_aggr_var_real <- list(df$year,df$week)
} else if(aggr_var == "month") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
aggr_var_real <- c("year","month")
list_aggr_var_real <- list(df$year,df$month)
} else if(aggr_var == "year") {
df$year <- lubridate::year(df[,datetime])
aggr_var_real <- "year"
list_aggr_var_real <- list(df$year)
} else if(aggr_var == "growing_season") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
df$growing_season <- NA
for(yr in unique(df$year)){
g_s <- NA
g_s <- yr - min(unique(df$year)) + 1
df$growing_season[which(df$month %in% c(5:10) & df$year==yr)] <- paste("Growing season", g_s, sep= " ")
df$growing_season[which(!(df$month %in% c(5:10)) & df$year==yr)] <-  paste("Non growing season", g_s, sep= " ")
}
aggr_var_real <- c("year","growing_season")
list_aggr_var_real <- list(df$year,df$growing_season)
}
for(fun in unique(aggr_fun)){
print(fun)
ind <- which(aggr_fun == fun)
biomet_sub <- biomet_vars[ind]
df_fun_name <- paste0("df","_",fun)
#df[,biomet_sub]
output_list[[df_fun_name]] <- stats::aggregate(list(as.data.frame(df[,biomet_sub])), by = list(as.data.frame(df[,aggr_var_real])), fun) %>% `colnames<-` (c(aggr_var_real,biomet_sub))
}
#return(purrr::reduce(output_list,  by=aggr_var))
return(Reduce(function(...) merge(..., all = TRUE, by=aggr_var_real), output_list))
}
test <- biomet_aggregator(aggr_var="month")
biomet_aggregator <- function(df=gapfilling_list_hals$site_df,
datetime="datetime",
biomet_vars=c("Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("mean","mean","mean","sum","sum"),
aggr_var=c("hour","day","week","month","year","growing_season")){
output_list <- list()
aggr_var_real <- NULL
if(aggr_var == "hour"){
df$datetime <- as.POSIXct(round(df[,datetime], units="hours"), tz="UTC")
aggr_var_real <- "datetime"
list_aggr_var_real <- list(df$datetime)
} else if(aggr_var == "day"){
df$date <- as.Date(df[,datetime])
aggr_var_real <- "date"
list_aggr_var_real <- list(df$date)
} else if(aggr_var == "week") {
df$year <- lubridate::year(df[,datetime])
df$week <- lubridate::week(df[,datetime])
aggr_var_real <- c("year","week")
list_aggr_var_real <- list(df$year,df$week)
} else if(aggr_var == "month") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
aggr_var_real <- c("year","month")
list_aggr_var_real <- list(df$year,df$month)
} else if(aggr_var == "year") {
df$year <- lubridate::year(df[,datetime])
aggr_var_real <- "year"
list_aggr_var_real <- list(df$year)
} else if(aggr_var == "growing_season") {
df$year <- lubridate::year(df[,datetime])
df$month <- lubridate::month(df[,datetime])
df$growing_season <- NA
for(yr in unique(df$year)){
g_s <- NA
g_s <- yr - min(unique(df$year)) + 1
df$growing_season[which(df$month %in% c(5:10) & df$year==yr)] <- paste("Growing season", g_s, sep= " ")
df$growing_season[which(!(df$month %in% c(5:10)) & df$year==yr)] <-  paste("Non growing season", g_s, sep= " ")
}
aggr_var_real <- c("year","growing_season")
list_aggr_var_real <- list(df$year,df$growing_season)
}
for(fun in unique(aggr_fun)){
print(fun)
ind <- which(aggr_fun == fun)
biomet_sub <- biomet_vars[ind]
df_fun_name <- paste0("df","_",fun)
#df[,biomet_sub]
output_list[[df_fun_name]] <- stats::aggregate(list(as.data.frame(df[,biomet_sub])), by = list_aggr_var_real, fun) %>% `colnames<-` (c(aggr_var_real,biomet_sub))
}
#return(purrr::reduce(output_list,  by=aggr_var))
return(Reduce(function(...) merge(..., all = TRUE, by=aggr_var_real), output_list))
}
test <- biomet_aggregator(aggr_var="month")
test <- biomet_aggregator(aggr_var="growing_season")
test <- biomet_aggregator(aggr_var="growing_season",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
document()
#biomet aggregation
test <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
fig <- plot_ly(biomet_day, x = ~Ts, y = ~WTD_f, z = ~ch4_flux_final_filled, color = ~doy,colors=palette(200))
palette(200)
palette(100)
fig <- plot_ly(biomet_day, x = ~Ts, y = ~WTD_f, z = ~ch4_flux_final_filled, color = ~doy)
fig
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, color = ~doy,colors=palette(200))
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled)
fig
View(biomet_day)
palette <- colorRampPalette(c("blue", "white", "red"))
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, palette(200))
fig
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, colors=palette(200))
fig
fig
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, colors=palette(200))
fig
palette(200)
lot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, colors=palette(200))
plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, colors=palette(200))
fig
library(plotly)
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, colors=palette(200))
fig
library(ggplot2)
library(plotly)
library(caret)
library(RANN)
library(data.table)
library(devtools)
load_all()
hals_aggr_fluxes <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/aggr_rds.RDS")
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
gapfilling_list_hals <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/gf_rds.RDS")
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
palette <- colorRampPalette(c("blue", "white", "red"))
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, colors=palette(200))
fig
library(PostEddyPro)
library(ggplot2)
library(plotly)
library(caret)
library(RANN)
library(data.table)
llibr
library(devtools)
load_all()
gapfilling_list_hals <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/gf_rds.RDS")
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
palette <- colorRampPalette(c("blue", "white", "red"))
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, colors=palette(200))
fig
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, color = ~ch4_flux_final_filled, colors=palette(200))
fig
biomet_day$month <- lubridate::month(biomet_day$date)
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, color = ~month, colors=palette(200))
fig
biomet_day$growing_season <- ifelse(biomet_day$month %in% c(5:10), "growing_season", "non_growing_season")
biomet_day$growing <- ifelse(biomet_day$month %in% c(5:10), "growing_season", "non_growing_season")
palette <- colorRampPalette(c("blue", "white", "red"))
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, color = ~season, colors=palette(200))
fig
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
biomet_day$month <- lubridate::month(biomet_day$date)
biomet_day$eason <- ifelse(biomet_day$month %in% c(5:10), "growing_season", "non_growing_season")
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
biomet_day$month <- lubridate::month(biomet_day$date)
biomet_day$season <- ifelse(biomet_day$month %in% c(5:10), "growing_season", "non_growing_season")
palette <- colorRampPalette(c("blue", "white", "red"))
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, color = ~season, colors=palette(200))
fig
biomet_day=doy <- lubridate::yday(biomet_day$date)
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, color = ~doy, colors=palette(200))
biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
biomet_day$month <- lubridate::month(biomet_day$date)
biomet_day$doy <- lubridate::yday(biomet_day$date)
biomet_day$season <- ifelse(biomet_day$month %in% c(5:10), "growing_season", "non_growing_season")
palette <- colorRampPalette(c("blue", "white", "red"))
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, color = ~doy, colors=palette(200))
fig
biomet_day$year <- lubridate::month(biomet_day$date)
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, color = ~month, colors=palette(200))
fig
gapfilling_list_deg <- readRDS("D:/EC/Data_organized/Degero/FINAL/gf_rds.RDS")
###############################################################################
# biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
#                                 aggr_var="day",
#                                 biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
#                                 aggr_fun=c("sum","mean","mean","mean","sum","sum"))
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_deg$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
###############################################################################
# biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
#                                 aggr_var="day",
#                                 biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
#                                 aggr_fun=c("sum","mean","mean","mean","sum","sum"))
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_deg$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
###############################################################################
# biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
#                                 aggr_var="day",
#                                 biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
#                                 aggr_fun=c("sum","mean","mean","mean","sum","sum"))
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_deg$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f"),
aggr_fun=c("sum","mean","mean","mean","sum","sum"))
###############################################################################
# biomet_day <- biomet_aggregator(df=gapfilling_list_hals$site_df,#or we can use directly the gapfilled biomet file as well.
#                                 aggr_var="day",
#                                 biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f", "SNOWd"),
#                                 aggr_fun=c("sum","mean","mean","mean","sum","sum"))
#biomet aggregation
biomet_day <- biomet_aggregator(df=gapfilling_list_deg$site_df,#or we can use directly the gapfilled biomet file as well.
aggr_var="day",
biomet_vars=c("ch4_flux_final_filled","Ta_f", "Ts_f", "WTD_f", "PARin_f"),
aggr_fun=c("sum","mean","mean","mean","sum"))
biomet_day$year <- lubridate::month(biomet_day$date)
biomet_day$month <- lubridate::month(biomet_day$date)
biomet_day$doy <- lubridate::yday(biomet_day$date)
biomet_day$season <- ifelse(biomet_day$month %in% c(5:10), "growing_season", "non_growing_season")
palette <- colorRampPalette(c("blue", "white", "red"))
fig <- plot_ly(biomet_day, x = ~Ts_f, y = ~WTD_f, z = ~ch4_flux_final_filled, color = ~month, colors=palette(200))
fig
rm(list = ls())
