geom_vline(xintercept = vline_dates, colour="grey30", linetype="dashed")
g_Ts50 <- plotter_daily(list(halm_day,deg_day,sto_day,hals_day), y_label="Ts 50cm (°C)", y_col = "Ts5", show_x_label = FALSE)+
expand_limits(x = c(expand_start, expand_end)) +
geom_vline(xintercept = vline_dates, colour="grey30", linetype="dashed")
g_PAR <-plotter_daily(list(halm_day,deg_day,sto_day,hals_day), y_label="PARin(μmol m-2 s)", y_col = "PARin_f", show_x_label = FALSE)+
expand_limits(x = c(expand_start, expand_end)) +
geom_vline(xintercept = vline_dates, colour="grey30", linetype="dashed")
g_WTD <-plotter_daily(list(halm_day,deg_day,sto_day,hals_day), y_label="WTD (cm)", y_col = "WTD_f", show_x_label = TRUE)+
expand_limits(x = c(expand_start, expand_end)) +
geom_vline(xintercept = vline_dates, colour="grey30", linetype="dashed")+
annotate("text", label = year(year_beginning), x=year_beginning, y=-Inf, vjust=-0.5, hjust = -0.2, size = 4, colour="grey25")
ggarrange(g_ch4,g_gpp,g_Ta,g_Ts,g_PAR,g_WTD, ncol = 1, common.legend = TRUE, align = "v", heights = c(1,1,1,1,1,1.35))
ggsave("D:/EC/Data_organized/Graphs_all/all_variables.png", height=32,width=25, units = "cm")
ggsave("D:/EC/Data_organized/Graphs_all/all_variables_bigger.png", height=23,width=18.5, units = "cm")
ggarrange(g_Ta,g_Ts2,g_Ts10,g_Ts15,g_Ts30,g_Ts50,g_PAR,g_WTD, ncol = 1, common.legend = TRUE, align = "v", heights = c(1,1,1,1,1,1,1,1.25))
ggsave("D:/EC/Data_organized/Graphs_all/all_met.png", height=35,width=25, units = "cm")
ggarrange(g_Ta,g_Ts15,g_PAR,g_WTD, ncol = 1, common.legend = TRUE, align = "v", heights = c(1,1,1,1.15))
ggsave("D:/EC/Data_organized/Graphs_all/selected_met.png", height=25,width=25, units = "cm")
ggarrange(g_ch4,g_nee,g_gpp,g_Reco,g_Ts,g_WTD, ncol = 1, common.legend = TRUE, align = "v", heights = c(1,1,1,1,1,1.20))
ggsave("D:/EC/Data_organized/Graphs_all/fluxes_only.png", height=32,width=25, units = "cm")
ggarrange(g_ch4,g_nee,g_gpp,g_Reco_withX, ncol = 1, common.legend = TRUE, align = "v", heights = c(1,1,1,1.15))
ggsave("D:/EC/Data_organized/Graphs_all/fluxes_only_only.png", height=25,width=25, units = "cm")
ggarrange(g_ch4_normalY, g_gpp_withX, ncol = 1, common.legend = TRUE, align = "v", heights = c(1,1.10))
ggsave("D:/EC/Data_organized/Graphs_all/fluxes_CH4_GPP_only.png", height=15,width=25, units = "cm")
# list_df=list(halm_day,deg_day,sto_day_intact_GPP,hals_day)
# y_label="GPP (gC. m-2. d-1)"
# y_col = "GPP_sum"
# show_x_label = FALSE
library(devtools)
library(PostEddyPro)
# load_all()
library(dplyr)
library(lubridate)
library(zoo)
library(ggpubr)
library(grid)
library(ggcorrplot)
library(ggplot2)
library(scales)
library(GGally)
library(patchwork)
library(factoextra)
library(lemon)
##################################
start_date_plots <- as.Date("2020-04-01")
end_date_plots <- as.Date("2023-01-01")
expand_start <- as.Date("2020-01-01")
expand_end <- end_date_plots
year_beginning <- as.Date(c("2020-01-01","2021-01-01","2022-01-01"))
vline_dates <- as.Date(c("2021-01-01","2022-01-01"))
#####################################
#Halmyran
halm_aggr_ch4 <- readRDS("D:/EC/Data_organized/Halmyran/FINAL/aggr_rds.RDS")
halm_aggr_biomet <- readRDS("D:/EC/Data_organized/Halmyran/FINAL/aggr_biomet.RDS")
halm_aggr_co2 <- readRDS("D:/EC/Data_organized/Halmyran/FINAL/CO2/aggr_rds_CO2.RDS")
#halm_aggr_h2o <- readRDS("D:/EC/Data_organized/Halmyran/FINAL/H2O/aggr_rds_H2O.RDS")
gs_info_halm <- halm_aggr_biomet$growing_season_info_TsMean
#Degero
deg_aggr_ch4 <- readRDS("D:/EC/Data_organized/Degero/FINAL/aggr_rds.RDS")
deg_aggr_biomet <- readRDS("D:/EC/Data_organized/Degero/FINAL/aggr_biomet.RDS")
deg_aggr_co2 <- readRDS("D:/EC/Data_organized/Degero/FINAL/CO2/aggr_rds_CO2.RDS")
#deg_aggr_h2o <- readRDS("D:/EC/Data_organized/Degero/FINAL/H2O/aggr_rds_H2O.RDS")
gs_info_deg <- deg_aggr_biomet$growing_season_info_TsMean
#Stortjarn
sto_aggr_ch4 <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/aggr_rds.RDS")
sto_aggr_biomet <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/aggr_biomet.RDS")
sto_aggr_co2 <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/CO2/aggr_rds_CO2.RDS")
gs_info_sto <- sto_aggr_biomet$growing_season_info_TsMean
#sto_aggr_h2o <- readRDS("D:/EC/Data_organized/Stortjarn/FINAL/H2O/aggr_rds_H2O.RDS")
#Halsingfors
hals_aggr_ch4 <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/aggr_rds.RDS")
hals_aggr_biomet <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/aggr_biomet.RDS")
hals_aggr_co2 <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/CO2/aggr_rds_CO2.RDS")
#hals_aggr_h2o <- readRDS("D:/EC/Data_organized/Halsingfors/FINAL/H2O/aggr_rds_H2O.RDS")
gs_info_hals <- hals_aggr_biomet$growing_season_info_TsMean
#############Halfhourly
#Reading all and getting daily values
halm_30min <- Reduce(function(...) merge(..., by="datetime"), list(halm_aggr_ch4$flux_df_30min %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err, quality_ch4=quality),
halm_aggr_co2$flux_df_30min %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err, quality_nee=quality),
#halm_aggr_h2o$flux_df_30min %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err, quality_h2o=quality),
halm_aggr_biomet$halfhour)) %>% mutate(Site="Halmyran", #PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2 (no more conversion)
month = month(datetime), year = year(datetime)) %>%
select(-c(NEE)) %>% rename(NEE=NEE_f,GPP=GPP_f) %>%
mutate(GPP = ifelse(GPP < 0, 0, GPP),
FCH4 = FCH4/1000) %>% #g instead of mg
left_join(gs_info_halm, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA))
deg_30min <- Reduce(function(...) merge(..., by="datetime"), list(deg_aggr_ch4$flux_df_30min %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err, quality_ch4=quality),
deg_aggr_co2$flux_df_30min %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err, quality_nee=quality),
#deg_aggr_h2o$flux_df_30min %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err, quality_h2o=quality),
deg_aggr_biomet$halfhour)) %>% mutate(Site="Degero", #PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
month = month(datetime), year = year(datetime)) %>%
select(-c(NEE)) %>% rename(NEE=NEE_f,GPP=GPP_f) %>%
mutate(GPP = ifelse(GPP < 0, 0, GPP),
FCH4 = FCH4/1000) %>% #g instead of mg
left_join(gs_info_deg, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA))
sto_30min <- Reduce(function(...) merge(..., by="datetime"), list(sto_aggr_ch4$flux_df_30min %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err, quality_ch4=quality),
sto_aggr_co2$flux_df_30min %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err, quality_nee=quality),
#sto_aggr_h2o$flux_df_30min %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err, quality_h2o=quality),
sto_aggr_biomet$halfhour)) %>% mutate(Site="Stortjarn", #PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
month = month(datetime), year = year(datetime)) %>%
select(-c(NEE)) %>% rename(NEE=NEE_f,GPP=GPP_f) %>%
mutate(GPP = ifelse(GPP < 0, 0, GPP),
FCH4 = FCH4/1000) %>% #g instead of mg
left_join(gs_info_sto, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA))
hals_30min <- Reduce(function(...) merge(..., by="datetime"), list(hals_aggr_ch4$flux_df_30min %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err, quality_ch4=quality),
hals_aggr_co2$flux_df_30min %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err, quality_nee=quality),
#hals_aggr_h2o$flux_df_30min %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err, quality_h2o=quality),
hals_aggr_biomet$halfhour)) %>% mutate(Site="Halsingfors", #PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
month = month(datetime), year = year(datetime)) %>%
select(-c(NEE)) %>% rename(NEE=NEE_f,GPP=GPP_f) %>%
mutate(Reco=ifelse(datetime<as.POSIXct("2020-06-12 00:00:00", tz="UTC"), NA, Reco)) %>%
mutate(GPP = ifelse(GPP < 0, 0, GPP),
FCH4 = FCH4/1000) %>% #g instead of mg
left_join(gs_info_hals, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA))
#############hourly
#Reading all and getting daily values
# halm_hour <- Reduce(function(...) merge(..., by="hour"), list(halm_aggr_ch4$flux_df_hour %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
#                                                                    halm_aggr_co2$flux_df_hour %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#                                                                    halm_aggr_h2o$flux_df_hour %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
#                                                                    halm_aggr_biomet$hour %>% rename(hour=datetime))) %>% mutate(Site="Halmyran", PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
#                                                                                                           month = month(hour), WTD_f = replace(WTD_f, month %in% c(12,1:4), NA)) %>%
#   select(-c(NEE)) %>% rename(NEE=NEE_f,GPP=GPP_f) %>%
#   mutate(GPP = ifelse(GPP < 0, 0, GPP),
#          FCH4 = FCH4/1000) #g instead of mg
#
# deg_hour <- Reduce(function(...) merge(..., by="hour"), list(deg_aggr_ch4$flux_df_hour %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
#                                                                   deg_aggr_co2$flux_df_hour %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#                                                                   deg_aggr_h2o$flux_df_hour %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
#                                                                   deg_aggr_biomet$hour %>% rename(hour=datetime))) %>% mutate(Site="Degero", PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
#                                                                                                         month = month(hour), WTD_f = replace(WTD_f, month %in% c(12,1:4), NA)) %>%
#   mutate(GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
#          FCH4_sum = FCH4_sum/1000) #g instead of mg
#
# sto_hour <- Reduce(function(...) merge(..., by="hour"), list(sto_aggr_ch4$flux_df_hour %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
#                                                                   sto_aggr_co2$flux_df_hour %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#                                                                   sto_aggr_h2o$flux_df_hour %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
#                                                                   sto_aggr_biomet$hour %>% rename(hour=datetime))) %>% mutate(Site="Stortjarn", PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
#                                                                                                         month = month(hour), WTD_f = replace(WTD_f, month %in% c(12,1:4), NA)) %>%
#   select(-c(NEE)) %>% rename(NEE=NEE_f,GPP=GPP_f) %>%
#   mutate(GPP = ifelse(GPP < 0, 0, GPP),
#          FCH4 = FCH4/1000) #g instead of mg
#
# hals_hour <- Reduce(function(...) merge(..., by="hour"), list(hals_aggr_ch4$flux_df_hour %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
#                                                                    hals_aggr_co2$flux_df_hour %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#                                                                    hals_aggr_h2o$flux_df_hour %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
#                                                                    hals_aggr_biomet$hour %>% rename(hour=datetime))) %>% mutate(Site="halsyran", PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
#                                                                                                           month = month(hour), WTD_f = replace(WTD_f, month %in% c(12,1:4), NA)) %>%
#   select(-c(NEE)) %>% rename(NEE=NEE_f,GPP=GPP_f) %>%
#   mutate(GPP = ifelse(GPP < 0, 0, GPP),
#          FCH4 = FCH4/1000) #g instead of mg
#
#
#############DAILY
#Reading all and getting daily values
halm_day <- Reduce(function(...) merge(..., all=TRUE), list(halm_aggr_ch4$flux_df_day %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
halm_aggr_co2$flux_df_day %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#halm_aggr_h2o$flux_df_day %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
halm_aggr_biomet$day)) %>% mutate(Site="Halmyran", PARin_f=PARin_f,#/4.6,  #from umol/m2/s to W/m2
month = month(date), year = year(date)) %>%
#select(-SNOWd) %>%
mutate(GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000) %>% #g instead of mg
left_join(gs_info_halm, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA)) %>%
filter(date >= start_date_plots & date <= end_date_plots)
deg_day <- Reduce(function(...) merge(..., all=TRUE), list(deg_aggr_ch4$flux_df_day %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
deg_aggr_co2$flux_df_day %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#deg_aggr_h2o$flux_df_day %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
deg_aggr_biomet$day)) %>% mutate(Site="Degero", PARin_f=PARin_f,#/4.6,  #from umol/m2/s to W/m2
month = month(date), year = year(date)) %>%
mutate(GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000) %>% #g instead of mg
left_join(gs_info_deg, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA)) %>%
filter(date >= start_date_plots & date <= end_date_plots)
sto_day <- Reduce(function(...) merge(..., all=TRUE), list(sto_aggr_ch4$flux_df_day %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
sto_aggr_co2$flux_df_day %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#sto_aggr_h2o$flux_df_day %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
sto_aggr_biomet$day)) %>% mutate(Site="Stortjarn", PARin_f=PARin_f,#/4.6,  #from umol/m2/s to W/m2
month = month(date), year=year(date)) %>%
#select(-SNOWd) %>%
mutate(GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000) %>% #g instead of mg
left_join(gs_info_sto, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA)) %>%
filter(date >= start_date_plots & date <= end_date_plots)
sto_day_intact_GPP <- Reduce(function(...) merge(..., all=TRUE), list(sto_aggr_ch4$flux_df_day %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
sto_aggr_co2$flux_df_day %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#sto_aggr_h2o$flux_df_day %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
sto_aggr_biomet$day)) %>% mutate(Site="Stortjarn", PARin_f=PARin_f,#/4.6,  #from umol/m2/s to W/m2
month = month(date), year = year(date)) %>%
#select(-SNOWd) %>%
mutate(FCH4_sum = FCH4_sum/1000) %>% #g instead of mg
left_join(gs_info_sto, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA)) %>%
filter(date >= start_date_plots & date <= end_date_plots)
hals_day <- Reduce(function(...) merge(..., all=TRUE), list(hals_aggr_ch4$flux_df_day %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
hals_aggr_co2$flux_df_day %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#hals_aggr_h2o$flux_df_day %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
hals_aggr_biomet$day)) %>% mutate(Site="Halsingfors", PARin_f=PARin_f,#/4.6,  #from umol/m2/s to W/m2
month = month(date), year = year(date)) %>%
#select(-SNOWd) %>%
mutate(Reco_sum=ifelse(date<as.Date("2020-06-12"), NA, Reco_sum)) %>%
mutate(GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000) %>% #g instead of mg
left_join(gs_info_hals, by = "year") %>%
mutate(growing_season = if_else(date > start & date < end, "Growing Season", "Non Growing Season"),
WTD_f_ori = WTD_f) %>%
mutate(WTD_f = ifelse(growing_season == "Growing Season", WTD_f, NA)) %>%
filter(date >= start_date_plots & date <= end_date_plots) %>%
filter(date >= as.Date("2020-06-11"))
#############MONTHLY
#Reading all and getting monthly values
halm_month <- Reduce(function(...) merge(..., all=TRUE), list(halm_aggr_ch4$flux_df_month %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
halm_aggr_co2$flux_df_month %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#halm_aggr_h2o$flux_df_month %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
halm_aggr_biomet$month)) %>% mutate(Site="Halmyran", PARin_f=PARin_f, WTD_f = replace(WTD_f, month %in% c(12,1:3), NA)) %>%
#select(-SNOWd) %>%
arrange(yearmon) %>%
mutate(period = rep((1:ceiling(nrow(.)/12)), each=12)[1:nrow(.)],
GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000, #g instead of mg
PARin_f = PARin_f)#/4.6)#from umol/m2/s to W/m2
deg_month <- Reduce(function(...) merge(..., all=TRUE), list(deg_aggr_ch4$flux_df_month %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
deg_aggr_co2$flux_df_month %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#deg_aggr_h2o$flux_df_month %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
deg_aggr_biomet$month)) %>% mutate(Site="Degero", PARin_f=PARin_f, WTD_f = replace(WTD_f, month %in% c(12,1:3), NA)) %>%
arrange(yearmon) %>%
mutate(period = rep((1:ceiling(nrow(.)/12)), each=12)[1:nrow(.)],
GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000, #g instead of mg
PARin_f = PARin_f)#/4.6)#from umol/m2/s to W/m2
sto_month <- Reduce(function(...) merge(..., all=TRUE), list(sto_aggr_ch4$flux_df_month %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
sto_aggr_co2$flux_df_month %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#sto_aggr_h2o$flux_df_month %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
sto_aggr_biomet$month)) %>% mutate(Site="Stortjarn", PARin_f=PARin_f, WTD_f = replace(WTD_f, month %in% c(12,1:3), NA)) %>%
#select(-SNOWd) %>%
arrange(yearmon) %>%
mutate(period = rep((1:ceiling(nrow(.)/12)), each=12)[1:nrow(.)],
GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000, #g instead of mg
PARin_f = PARin_f)#/4.6)#from umol/m2/s to W/m2
hals_month <- Reduce(function(...) merge(..., all=TRUE), list(hals_aggr_ch4$flux_df_month %>% rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
hals_aggr_co2$flux_df_month %>% rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
#hals_aggr_h2o$flux_df_month %>% rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
hals_aggr_biomet$month)) %>% mutate(Site="Halsingfors", PARin_f=PARin_f, WTD_f = replace(WTD_f, month %in% c(12,1:3), NA)) %>%
#select(-SNOWd) %>%
arrange(yearmon) %>%
mutate(Reco_sum=ifelse(yearmon <= as.yearmon("2020-06"), NA, Reco_sum)) %>%
mutate(period = rep((1:ceiling(nrow(.)/12)), each=12)[1:nrow(.)],
GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
FCH4_sum = FCH4_sum/1000, #g instead of mg
PARin_f = PARin_f)#/4.6)#from umol/m2/s to W/m2
##############################PLOTSSSSSSSSSSSS
#############################
#######################Raw & gapfilled
raw_df_gf <- Reduce(f = function(x,y) merge(x,y,all=T),list(deg_30min %>%
select(datetime,FCH4,quality_ch4, Site),
halm_30min %>%
select(datetime, FCH4,quality_ch4, Site),
sto_30min %>%
select(datetime, FCH4,quality_ch4, Site),
hals_30min %>%
select(datetime, FCH4,quality_ch4, Site))) %>%
rename(quality = quality_ch4) %>%
mutate(date=as.Date(datetime)) %>%
dplyr::filter(between(date, start_date_plots, end_date_plots))
raw_df_gf$date <- as.Date(raw_df_gf$datetime)
raw_df_gf$month <- as.numeric(format(raw_df_gf$date, format="%m"))
# start_datetime <- max(min(raw_df_gf$datetime[raw_df_gf$Site=="Hålmyran"]),min(raw_df_gf$datetime[raw_df_gf$Site=="Degerö"]),
#                       min(raw_df_gf$datetime[raw_df_gf$Site=="Stortjarn"]),min(raw_df_gf$datetime[raw_df_gf$Site=="Hälsingfors"]))
# end_datetime <- min(max(raw_df_gf$datetime[raw_df_gf$Site=="Hålmyran"]),max(raw_df_gf$datetime[raw_df_gf$Site=="Degerö"]),
#                     max(raw_df_gf$datetime[raw_df_gf$Site=="Stortjarn"]),max(raw_df_gf$datetime[raw_df_gf$Site=="Hälsingfors"]))
#
# raw_df_gf <- raw_df_gf[raw_df_gf$datetime>=start_datetime & raw_df_gf$datetime<end_datetime,]
#
# raw_df_gf <- raw_df_gf %>%
#   mutate(quality = ifelse(!is.na(CH4_flux),"original","gapfilled"))
#
# raw_df_gf_pivotlonger <- raw_df_gf %>%
#   select(-c("quality")) %>%
#   rename_at(vars(c("CH4_flux","CH4_flux_gf")),~c("original","gapfilled")) %>%
#   pivot_longer(cols = c("original","gapfilled"),values_to="CH4_flux",names_to="quality")
raw_df_gf <- raw_df_gf %>% filter(date >= start_date_plots & date <= end_date_plots)
raw_df_gf2 <- raw_df_gf
raw_df_gf2 <- raw_df_gf2 %>%
mutate(counter=1) %>%
#filter(Site=="Degero")%>%
group_by(Site, quality) %>%
summarise(count=sum(counter)) %>%
mutate(perc =  round(prop.table(count) * 100, 0)) %>%
group_by(Site) %>%
summarise(facet_name = paste0(paste0(perc, collapse = "% gapfilled; "), "% original")) %>%
mutate(facet_name = paste0(Site," : ", facet_name))
raw_df_gf3 <- raw_df_gf %>%
merge(raw_df_gf2, by="Site")
##Preparing WTD data to plot only selected months.
biomet <- Reduce(f = function(x,y) merge(x,y,all=T),list(deg_30min %>% mutate(year=year(datetime)) %>%
select(datetime, year, month, WTD_f, Site),
halm_30min %>% mutate(year=year(datetime)) %>%
select(datetime, year, month, WTD_f, Site),
sto_30min %>% mutate(year=year(datetime)) %>%
select(datetime, year, month, WTD_f, Site),
hals_30min %>% mutate(year=year(datetime)) %>%
select(datetime, year, month, WTD_f, Site)))
##Loading biomet directly from aggregated biomet...
wtd_slcted_months <- biomet %>%
filter(month %in% c(6,7,8,9)) %>%
group_by(Site, month, year) %>%
summarize(WTD_f = mean(WTD_f))
wtd_slcted_months <- biomet %>%
filter(month %in% c(6,7,8)) %>%
group_by(Site, year) %>%
summarize(WTD_f = mean(WTD_f))
#df %>% group_by(month) %>% mutate(per= prop.table(count) * 100)
p <- ggplot(data=raw_df_gf3,aes(x = datetime,y = 1000*FCH4,shape=quality,color=quality,size=quality,alpha=quality))+
geom_point()+
#geom_point(data=methane[is.na(methane$CH4_flux),],aes(x = datetime,y = CH4_flux_gf),size=0.01,shape=1,color="red")+
# ylim(-10,100)+
xlab("Time")+
ylim(-0.2,6)+
ylab("CH4 fluxes (mg. m-2. 30min-1)")+#ylab("CH4 fluxes (nmol.m-2.s-1)")+
theme_classic()+
scale_color_manual(values=c("red","black"))+
scale_shape_manual(values=c(16,16))+
scale_size_manual(values=c(0.01,0.5))+
scale_alpha_manual(values = c(1,0.5))+
scale_x_datetime(breaks = "1 month", labels=date_format("%Y-%m"))+
theme(panel.border = element_rect(fill=NA,size=1),
# panel.spacing.x=unit(0.1, "lines"),
panel.spacing.y=unit(-2, "lines"),
# panel.margin = unit(c(-0.5,0-0.5,0), "lines"),
legend.position=c(0.06, 0.95),
legend.background = element_rect(fill='transparent'),
legend.spacing = unit(-0.2,"cm"),
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
#strip.placement = "outside",
axis.text.x.top = element_blank(),       # do not show top / right axis labels
axis.text.y.right = element_blank(),     # for secondary axis
axis.title.x.top = element_blank(),      # as above, don't show axis titles for
axis.title.y.right = element_blank())+
facet_rep_wrap(~ facet_name, nrow = 4)
p
# ggsave("D:/EC/Data_organized/Graphs_all/raw_gf_non_gf.png", plot=p, height=25,width=20, units = "cm")
ggsave("D:/EC/Data_organized/Graphs_all/raw_gf_non_gf.png", plot=p, height=20,width=18, units = "cm")
#
# g <- ggplotGrob(p)
# g$grobs$axis_b1$children[[2]][["grobs"]][[2]] <- nullGrob()
# g$grobs$axis_b2$children[[2]][["grobs"]][[2]] <- nullGrob()
# grid.newpage()
# grid.draw(g)
######################3D plots?
#halm
halm_day$doy <- yday(halm_day$date)
halm_day$year <- year(halm_day$date)
plotter_3D(df=halm_day %>% filter(year==2021), x_var="Ts_f", y_var="GPP_sum", z_var="FCH4_sum", col_var="doy")
#Degerö
deg_day$doy <- yday(deg_day$date)
deg_day$year <- year(deg_day$date)
#hals
hals_day$doy <- yday(hals_day$date)
hals_day$year <- year(hals_day$date)
#sto
sto_day$doy <- yday(sto_day$date)
sto_day$year <- year(sto_day$date)
plotter_3D(df=deg_day %>% filter(year==2021), x_var="WTD_f", y_var="GPP_sum", z_var="FCH4_sum", col_var="doy")
###########################
#############################"
#Plotting all daily
g_ch4 <- plotter_daily(list(halm_day,deg_day,sto_day,hals_day), y_label=expression(atop("FCH4 fluxes","(g. m-2. d-1)")),#"CH4 fluxes (g. m-2. d-1)",
y_col = "FCH4_sum", show_x_label = FALSE)+
expand_limits(x = c(expand_start, expand_end)) +
geom_vline(xintercept = vline_dates, colour="grey30", linetype="dashed")
g_ch4
g_ch4_normalY <- plotter_daily(list(halm_day,deg_day,sto_day,hals_day), y_label="FCH4 (g. m-2. d-1)",#"CH4 fluxes (g. m-2. d-1)",
y_col = "FCH4_sum", show_x_label = FALSE)+
expand_limits(x = c(expand_start, expand_end)) +
geom_vline(xintercept = vline_dates, colour="grey30", linetype="dashed")
g_ch4_normalY
# g_gpp <- plotter_daily(list(halm_day%>% filter(date != as.Date("2022-07-06")),
#                             deg_day%>% filter(date != as.Date("2022-07-06")),
#                             sto_day%>% filter(date != as.Date("2022-07-06")),
#                             hals_day%>% filter(date != as.Date("2022-07-06"))), y_label="GPP (gC. m-2. d-1)", y_col = "GPP_sum", show_x_label = FALSE)
g_gpp_old <- plotter_daily(list(halm_day,deg_day,sto_day,hals_day), y_label="GPP (gC. m-2. d-1)", y_col = "GPP_sum", show_x_label = FALSE)+
expand_limits(x = c(expand_start, expand_end)) +
geom_vline(xintercept = vline_dates, colour="grey30", linetype="dashed")
g_gpp_old
View(halm_day)
View(deg_day)
View(sto_day)
View(hals_day)
plotter_daily(list(halm_day,deg_day,sto_day,hals_day), y_label="GPP (gC. m-2. d-1)", y_col = "GPP_sum", show_x_label = FALSE)
plotter_daily(list(halm_day,deg_day,sto_day,hals_day), y_label=expression(atop("FCH4 fluxes","(g. m-2. d-1)")),#"CH4 fluxes (g. m-2. d-1)",
y_col = "FCH4_sum", show_x_label = FALSE)+
expand_limits(x = c(expand_start, expand_end)) +
geom_vline(xintercept = vline_dates, colour="grey30", linetype="dashed")
plotter_daily(list(halm_day,deg_day,sto_day,hals_day), y_label=expression(atop("FCH4 fluxes","(g. m-2. d-1)")),#"CH4 fluxes (g. m-2. d-1)",
y_col = "FCH4_sum", show_x_label = FALSE)+
expand_limits(x = c(0, 0)) +
geom_vline(xintercept = vline_dates, colour="grey30", linetype="dashed")
expand_start
expand_end
library(devtools)
load_all()
document()
library(devtools)
library(devtools)
document()
document()
devtools::document()
names(getModelInfo())
library(caret)
names(getModelInfo())
install.packages("xgboost")
library(xgboost)
library(xgboost)
library(caTools)
library(dplyr)
library(cvms)
library(caret)
install.packages("cvms")
library(cvms)
library(caret)
head(iris)
set.seed(42)
sample_split <- sample.split(Y = iris$Species, SplitRatio = 0.7)
sample_split
train_set <- subset(x = iris, sample_split == TRUE)
train_set
test_set <- subset(x = iris, sample_split == FALSE)
as.integer(train_set$Species)
as.integer(train_set$Species) - 1
y_train <- as.integer(train_set$Species) - 1
as.integer(train_set$Species)
y_test <- as.integer(test_set$Species) - 1
X_train <- train_set %>% select(-Species)
X_test <- test_set %>% select(-Species)
xgb_train <- xgb.DMatrix(data = as.matrix(X_train), label = y_train)
xgb_train
iris %>% select(-one_of("Species"))
colname = "Species"
iris %>% select(-one_of(colname))
c(colname, "test")
devtools::document()
devtools::document()
devtools::load_all()
functions <- 'D:/EC/R_codes_organized/00.functions_copy_from_my_PC.R'
source(functions)
halm0_path <- "D:/EC/Data_organized/Halmyran/Eddypro/output_final/OLD_SPLIT_COMBINED/eddypro_Halmyran_full_output_2021-02-05T063233_adv.csv"
halm1_path <- "D:/EC/Data_organized/Halmyran/Eddypro/Output_2022-11-25/eddypro_Halmyran_2022_11_26_PART1_2021_full_output_2022-12-07T224644_adv.csv"
halm2_path <- "D:/EC/Data_organized/Halmyran/Eddypro/Output_2022-11-25/eddypro_Halmyran_2022_11_26_PART2_2022_full_output_2022-11-27T165604_adv.csv"
#visualizing from disk
vis_list_halm <- visualization(path_EC = "D:/EC/Data_organized/Halmyran/Eddypro/Output_2022-11-25/Merged_2022-12-08/merged.csv",
path_biomet = "D:/EC/Data_organized/Halmyran/Biomet_gf/halm_met.csv")
fluxes_meteo_halm <- vis_list_halm$data
vis_list_halm$graphs
fluxes_meteo_halm <- vis_list_halm$data
vis_list_halm$graphs
plot(co2_flux~datetime, data=fluxes_meteo_halm[which(fluxes_meteo_halm$co2_flux < 100 & fluxes_meteo_halm$co2_flux > -100),])
#Quality control
fluxes_meteo_halm_qc <- quality_control(fluxes_meteo_halm,
gas="co2",
limit_lower = -50,
limit_upper = 50,
Temp_col = "Ta_f")
# Additional hard flag visual...
fluxes_meteo_halm_qc$co2_flux_final[which(fluxes_meteo_halm_qc$co2_flux_final < -15 | fluxes_meteo_halm_qc$co2_flux_final > 10)] <- NA
plot(co2_flux_final~datetime, data=fluxes_meteo_halm_qc)
fluxes_meteo_halm_qc$date
fluxes_meteo_halm_qc_subset <- fluxes_meteo_halm_qc %>%
filter(date >= as.Date("2022-01-01"))
View(fluxes_meteo_halm_qc_subset)
gapfilling_list_halm <- xgb_gapfiller(site_df=fluxes_meteo_halm_qc_subset,
datetime="datetime",
flux_col="co2_flux_final",
preds=c("Ta_f", "Ts_f", "PARin_f", "PARout_f", "VPD_f", "RH_f", "yearly_sin", "yearly_cos","delta"),#   "Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f","yearly_sin","yearly_cos","delta"
sitename="Halmyran" #This variable is simply for annotating the plots with the site name.
)
library(devtools)
load_all()
gapfilling_list_halm <- xgb_gapfiller(site_df=fluxes_meteo_halm_qc_subset,
datetime="datetime",
flux_col="co2_flux_final",
preds=c("Ta_f", "Ts_f", "PARin_f", "PARout_f", "VPD_f", "RH_f", "yearly_sin", "yearly_cos","delta"),#   "Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f","yearly_sin","yearly_cos","delta"
sitename="Halmyran" #This variable is simply for annotating the plots with the site name.
)
gapfilling_list_halm <- PostEddyPro::xgboost_gapfiller(site_df=fluxes_meteo_halm_qc_subset,
datetime="datetime",
flux_col="co2_flux_final",
preds=c("Ta_f", "Ts_f", "PARin_f", "PARout_f", "VPD_f", "RH_f", "yearly_sin", "yearly_cos","delta"),#   "Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f","yearly_sin","yearly_cos","delta"
sitename="Halmyran" #This variable is simply for annotating the plots with the site name.
)
