library(devtools)
load_all()
library(ggplot2)
library(plotly)
library(caret)
library(RANN)
library(data.table)

###############################
#############Halmyran
###############################

#First visualization
vis_list_halm <- visualization(path_EC = "D:/EC/Data_organized/Halmyran/Eddypro/Output_final/eddypro_Halmyran_2022_07_07_full_output_2022-07-08T120131_adv.csv",
              path_biomet = "D:/EC/Data_organized/Halmyran/Biomet_gf/halm_met.csv")

fluxes_meteo_halm <- vis_list_halm$data
vis_list_halm$graphs

plot(co2_flux~datetime, data=fluxes_meteo_halm[which(fluxes_meteo_halm$co2_flux < 500),])
#Quality control
fluxes_meteo_halm_qc <- quality_control(fluxes_meteo_halm,
                                        gas="co2",
                                        limit_lower = -50,
                                        limit_upper = 50,
                                        Temp_col = "Ta_f")

# Additional hard flag visual...
fluxes_meteo_halm_qc$co2_flux_final[which(fluxes_meteo_halm_qc$co2_flux_final < -15 | fluxes_meteo_halm_qc$co2_flux_final > 10)] <- NA
plot(co2_flux_final~datetime, data=fluxes_meteo_halm_qc)
# fluxes_meteo_halm_qc

#Preparation for Reddyproc
fluxes_meteo_halm_qc$SWin_f[which(fluxes_meteo_halm_qc$SWin_f < 0)] <- 0
fluxes_meteo_halm_qc$VPD_f[which(fluxes_meteo_halm_qc$VPD_f < 0)] <- 0

formatting_fluxes_REddyProc(df=fluxes_meteo_halm_qc,
                            flux_col = "co2_flux_final",
                            FLUX="NEE",
                            saving_path = "D:/EC/Data_organized/Halmyran/FINAL/CO2")


reddyproc_gapfiller(formatted_file_path="D:/EC/Data_organized/Halmyran/FINAL/CO2/For_ReddyProc_NEE.txt",
                    saving_folder="D:/EC/Data_organized/Halmyran/FINAL/CO2",
                    FLUX="NEE")


#Montecarlo simulation
montecarlo_sim_noCH4(path_to_file = "D:/EC/Data_organized/Halmyran/FINAL/CO2/For_ReddyProc_NEE_GF.txt",
                     path_to_file_nonGF = "D:/EC/Data_organized/Halmyran/FINAL/CO2/For_ReddyProc_NEE.txt",
                     flux_col="NEE",
                     flux_pred_col="NEE_fall",
                     n=100,
                     saving_folder = "D:/EC/Data_organized/Halmyran/FINAL/CO2/Montecarlo")


#Gapfilling Montecarlo simulations

montecarlo_sim_noCH4_gf(mc_sim_path = "D:/EC/Data_organized/Halmyran/FINAL/CO2/Montecarlo",
                        mc_sim_gf_path = "D:/EC/Data_organized/Halmyran/FINAL/CO2/Montecarlo_gf",
                        flux_col="NEE")


#merging gapfilled montecarlo simulations
df_mc <- merge_montecarlo_sims(gf_type = "REddyProc",
                      dir = "D:/EC/Data_organized/Halmyran/FINAL/CO2/Montecarlo_gf",
                      saving_dir = "D:/EC/Data_organized/Halmyran/FINAL/CO2/Montecarlo_gf_merged",
                      datetime1="datetime",
                      filled_flux_col1=c("NEE_f","GPP_f","Reco"))

#Preparing random measurement error

preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f")
halm_err_df <- fluxes_meteo_halm_qc[,c("datetime","rand_err_co2_flux","co2_flux_final", preds)]

plot(rand_err_co2_flux~datetime, data=halm_err_df)

halm_err_df$rand_err_co2_flux[which(is.na(halm_err_df$co2_flux_final))] <- NA
halm_err_df$co2_flux_final <- NULL
plot(rand_err_co2_flux~datetime, data=halm_err_df)

halm_err_df$rand_err_co2_flux[which(halm_err_df$rand_err_co2_flux > 5)] <- NA

preProcValues <- preProcess(halm_err_df, method = c("bagImpute"))
halm_err_df_imp <- predict(preProcValues, halm_err_df)

plot(rand_err_co2_flux~datetime, data=halm_err_df_imp)

halm_aggr_fluxes <- co2_flux_aggregator(path_to_df_f = "D:/EC/Data_organized/Halmyran/FINAL/CO2/For_ReddyProc_NEE_GF.txt",
                                        df_mc = df_mc,
                                        rd_err_df = halm_err_df_imp)

saveRDS(halm_aggr_fluxes, "D:/EC/Data_organized/Halmyran/FINAL/CO2/aggr_rds_CO2.RDS")


###############################
#######Halmyran SPLIT  COMBINED
###############################

halm1_path <- "D:/EC/Data_organized/Halmyran/Eddypro/output_final/OLD_SPLIT_COMBINED/eddypro_Halmyran_full_output_2021-02-05T063233_adv.csv"
halm2_path <- "D:/EC/Data_organized/Halmyran/Eddypro/output_final/OLD_SPLIT_COMBINED/eddypro_Halmyran_2022_07_07_full_output_2022-07-08T120131_adv.csv"

halm_merged <- merge_2_EC(path_EC1=halm1_path,
                          path_EC2=halm2_path,
                          date_format_EC1 = "%d/%m/%Y",
                          date_format_EC2 = "%Y-%m-%d",
                          check_write_df=TRUE,
                          writing_path = "D:/EC/Data_organized/Halmyran/Eddypro/output_final/OLD_SPLIT_COMBINED/Merged_test")


# #visualizing from disk
# vis_list_halm <- visualization(path_EC = "D:/EC/Data_organized/Halmyran/Eddypro_output/Merged_test/merged.csv",
#                                path_biomet = "D:/EC/Data_organized/Halmyran/Biomet_gf/halm_met.csv")
#
# fluxes_meteo_halm <- vis_list_halm$data
# vis_list_halm$graphs

#visualization from already loaded dataframe
vis_list_halm <- visualization(check_path_EC = FALSE,
                               EC_df = halm_merged,
                               path_biomet = "D:/EC/Data_organized/Halmyran/Biomet_gf/halm_met.csv")



fluxes_meteo_halm <- vis_list_halm$data
vis_list_halm$graphs

plot(co2_flux~datetime, data=fluxes_meteo_halm[which(fluxes_meteo_halm$co2_flux < 100 & fluxes_meteo_halm$co2_flux > -100),])
#Quality control
fluxes_meteo_halm_qc <- quality_control(fluxes_meteo_halm,
                                        gas="co2",
                                        limit_lower = -50,
                                        limit_upper = 50,
                                        Temp_col = "Ta_f")

# Additional hard flag visual...
fluxes_meteo_halm_qc$co2_flux_final[which(fluxes_meteo_halm_qc$co2_flux_final < -15 | fluxes_meteo_halm_qc$co2_flux_final > 10)] <- NA
plot(co2_flux_final~datetime, data=fluxes_meteo_halm_qc)
# fluxes_meteo_halm_qc

#Preparation for Reddyproc
fluxes_meteo_halm_qc$SWin_f[which(fluxes_meteo_halm_qc$SWin_f < 0)] <- 0
fluxes_meteo_halm_qc$VPD_f[which(fluxes_meteo_halm_qc$VPD_f < 0)] <- 0

formatting_fluxes_REddyProc(df=fluxes_meteo_halm_qc,
                            flux_col = "co2_flux_final",
                            FLUX="NEE",
                            saving_path = "D:/EC/Data_organized/Halmyran/FINAL/CO2")


reddyproc_gapfiller(formatted_file_path="D:/EC/Data_organized/Halmyran/FINAL/CO2/For_ReddyProc_NEE.txt",
                    saving_folder="D:/EC/Data_organized/Halmyran/FINAL/CO2",
                    FLUX="NEE")


#Montecarlo simulation
montecarlo_sim_noCH4(path_to_file = "D:/EC/Data_organized/Halmyran/FINAL/CO2/For_ReddyProc_NEE_GF.txt",
                     path_to_file_nonGF = "D:/EC/Data_organized/Halmyran/FINAL/CO2/For_ReddyProc_NEE.txt",
                     flux_col="NEE",
                     flux_pred_col="NEE_fall",
                     n=100,
                     saving_folder = "D:/EC/Data_organized/Halmyran/FINAL/CO2/Montecarlo")


#Gapfilling Montecarlo simulations

montecarlo_sim_noCH4_gf(mc_sim_path = "D:/EC/Data_organized/Halmyran/FINAL/CO2/Montecarlo",
                        mc_sim_gf_path = "D:/EC/Data_organized/Halmyran/FINAL/CO2/Montecarlo_gf",
                        flux_col="NEE")


#merging gapfilled montecarlo simulations
df_mc <- merge_montecarlo_sims(gf_type = "REddyProc",
                               dir = "D:/EC/Data_organized/Halmyran/FINAL/CO2/Montecarlo_gf",
                               saving_dir = "D:/EC/Data_organized/Halmyran/FINAL/CO2/Montecarlo_gf_merged",
                               datetime1="datetime",
                               filled_flux_col1=c("NEE_f","GPP_f","Reco"))

#Preparing random measurement error

preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f")
halm_err_df <- fluxes_meteo_halm_qc[,c("datetime","rand_err_co2_flux","co2_flux_final", preds)]

plot(rand_err_co2_flux~datetime, data=halm_err_df)

halm_err_df$rand_err_co2_flux[which(is.na(halm_err_df$co2_flux_final))] <- NA
halm_err_df$co2_flux_final <- NULL
plot(rand_err_co2_flux~datetime, data=halm_err_df)

halm_err_df$rand_err_co2_flux[which(halm_err_df$rand_err_co2_flux > 5)] <- NA

preProcValues <- preProcess(halm_err_df, method = c("bagImpute"))
halm_err_df_imp <- predict(preProcValues, halm_err_df)

plot(rand_err_co2_flux~datetime, data=halm_err_df_imp)

halm_aggr_fluxes <- co2_flux_aggregator(path_to_df_f = "D:/EC/Data_organized/Halmyran/FINAL/CO2/For_ReddyProc_NEE_GF.txt",
                                        df_mc = df_mc,
                                        rd_err_df = halm_err_df_imp)

saveRDS(halm_aggr_fluxes, "D:/EC/Data_organized/Halmyran/FINAL/CO2/aggr_rds_CO2.RDS")
###############################
#############Degero
###############################

#First visualization
vis_list_deg <- visualization(path_EC = "D:/EC/Data_organized/Degero/Eddypro/Output/eddypro_Deg_LGR_2022_07_07_full_output_2022-07-09T213920_adv.csv",
                               path_biomet = "D:/EC/Data_organized/Degero/Biomet_gf/deg_met.csv")

fluxes_meteo_deg <- vis_list_deg$data
vis_list_deg$graphs

plot(co2_flux~datetime, data=fluxes_meteo_deg[which(fluxes_meteo_deg$co2_flux < 500),])
#Quality control
fluxes_meteo_deg_qc <- quality_control(fluxes_meteo_deg,
                                        gas="co2",
                                        limit_lower = -50,
                                        limit_upper = 50,
                                        Temp_col = "Ta_f")

# Additional hard flag visual...
fluxes_meteo_deg_qc$co2_flux_final[which(fluxes_meteo_deg_qc$co2_flux_final < -10 | fluxes_meteo_deg_qc$co2_flux_final > 10)] <- NA
plot(co2_flux_final~datetime, data=fluxes_meteo_deg_qc)
# fluxes_meteo_deg_qc

#Preparation for Reddyproc
fluxes_meteo_deg_qc$SWin_f[which(fluxes_meteo_deg_qc$SWin_f < 0)] <- 0
fluxes_meteo_deg_qc$VPD_f[which(fluxes_meteo_deg_qc$VPD_f < 0)] <- 0

formatting_fluxes_REddyProc(df=fluxes_meteo_deg_qc,
                            flux_col = "co2_flux_final",
                            FLUX="NEE",
                            saving_path = "D:/EC/Data_organized/Degero/FINAL/CO2")


reddyproc_gapfiller(formatted_file_path="D:/EC/Data_organized/Degero/FINAL/CO2/For_ReddyProc_NEE.txt",
                    saving_folder="D:/EC/Data_organized/Degero/FINAL/CO2",
                    FLUX="NEE")


#Montecarlo simulation
montecarlo_sim_noCH4(path_to_file = "D:/EC/Data_organized/Degero/FINAL/CO2/For_ReddyProc_NEE_GF.txt",
                     path_to_file_nonGF = "D:/EC/Data_organized/Degero/FINAL/CO2/For_ReddyProc_NEE.txt",
                     flux_col="NEE",
                     flux_pred_col="NEE_fall",
                     n=100,
                     saving_folder = "D:/EC/Data_organized/Degero/FINAL/CO2/Montecarlo")


#Gapfilling Montecarlo simulations

montecarlo_sim_noCH4_gf(mc_sim_path = "D:/EC/Data_organized/Degero/FINAL/CO2/Montecarlo",
                        mc_sim_gf_path = "D:/EC/Data_organized/Degero/FINAL/CO2/Montecarlo_gf",
                        flux_col="NEE")


#merging gapfilled montecarlo simulations
df_mc <- merge_montecarlo_sims(gf_type = "REddyProc",
                               dir = "D:/EC/Data_organized/Degero/FINAL/CO2/Montecarlo_gf",
                               saving_dir = "D:/EC/Data_organized/Degero/FINAL/CO2/Montecarlo_gf_merged",
                               datetime1="datetime",
                               filled_flux_col1=c("NEE_f","GPP_f","Reco"))

#Preparing random measurement error

preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f")
deg_err_df <- fluxes_meteo_deg_qc[,c("datetime","rand_err_co2_flux","co2_flux_final", preds)]

plot(rand_err_co2_flux~datetime, data=deg_err_df)

deg_err_df$rand_err_co2_flux[which(is.na(deg_err_df$co2_flux_final))] <- NA
deg_err_df$co2_flux_final <- NULL
plot(rand_err_co2_flux~datetime, data=deg_err_df)

deg_err_df$rand_err_co2_flux[which(deg_err_df$rand_err_co2_flux > 5)] <- NA

preProcValues <- preProcess(deg_err_df, method = c("bagImpute"))
deg_err_df_imp <- predict(preProcValues, deg_err_df)

plot(rand_err_co2_flux~datetime, data=deg_err_df_imp)

deg_aggr_fluxes <- co2_flux_aggregator(path_to_df_f = "D:/EC/Data_organized/Degero/FINAL/CO2/For_ReddyProc_NEE_GF.txt",
                                        df_mc = df_mc,
                                        rd_err_df = deg_err_df_imp)

saveRDS(deg_aggr_fluxes, "D:/EC/Data_organized/Degero/FINAL/CO2/aggr_rds_CO2.RDS")



###############################
#############Stortjarn
###############################

#First visualization
vis_list_sto <- visualization(path_EC = "D:/EC/Data_organized/Stortjarn/Eddypro/output/eddypro_Stortjarn_20220612_full_output_2022-07-08T130122_adv.csv",
                              path_biomet = "D:/EC/Data_organized/Stortjarn/Biomet_gf/sto_met.csv")

fluxes_meteo_sto <- vis_list_sto$data
vis_list_sto$graphs

plot(co2_flux~datetime, data=fluxes_meteo_sto[which(fluxes_meteo_sto$co2_flux < 30 & fluxes_meteo_sto$co2_flux > -30),])
#Quality control
fluxes_meteo_sto_qc <- quality_control(fluxes_meteo_sto,
                                       gas="co2",
                                       limit_lower = -50,
                                       limit_upper = 50,
                                       Temp_col = "Ta_f")

# Additional hard flag visual...
fluxes_meteo_sto_qc$co2_flux_final[which(fluxes_meteo_sto_qc$co2_flux_final < -10 | fluxes_meteo_sto_qc$co2_flux_final > 10)] <- NA
plot(co2_flux_final~datetime, data=fluxes_meteo_sto_qc)
# fluxes_meteo_sto_qc

#Preparation for Reddyproc
fluxes_meteo_sto_qc$SWin_f[which(fluxes_meteo_sto_qc$SWin_f < 0)] <- 0
fluxes_meteo_sto_qc$VPD_f[which(fluxes_meteo_sto_qc$VPD_f < 0)] <- 0

formatting_fluxes_REddyProc(df=fluxes_meteo_sto_qc,
                            flux_col = "co2_flux_final",
                            FLUX="NEE",
                            saving_path = "D:/EC/Data_organized/Stortjarn/FINAL/CO2")


reddyproc_gapfiller(formatted_file_path="D:/EC/Data_organized/Stortjarn/FINAL/CO2/For_ReddyProc_NEE.txt",
                    saving_folder="D:/EC/Data_organized/Stortjarn/FINAL/CO2",
                    FLUX="NEE")


#Montecarlo simulation
montecarlo_sim_noCH4(path_to_file = "D:/EC/Data_organized/Stortjarn/FINAL/CO2/For_ReddyProc_NEE_GF.txt",
                     path_to_file_nonGF = "D:/EC/Data_organized/Stortjarn/FINAL/CO2/For_ReddyProc_NEE.txt",
                     flux_col="NEE",
                     flux_pred_col="NEE_fall",
                     n=100,
                     saving_folder = "D:/EC/Data_organized/Stortjarn/FINAL/CO2/Montecarlo")


#Gapfilling Montecarlo simulations

montecarlo_sim_noCH4_gf(mc_sim_path = "D:/EC/Data_organized/Stortjarn/FINAL/CO2/Montecarlo",
                        mc_sim_gf_path = "D:/EC/Data_organized/Stortjarn/FINAL/CO2/Montecarlo_gf",
                        flux_col="NEE")


#merging gapfilled montecarlo simulations
df_mc <- merge_montecarlo_sims(gf_type = "REddyProc",
                               dir = "D:/EC/Data_organized/Stortjarn/FINAL/CO2/Montecarlo_gf",
                               saving_dir = "D:/EC/Data_organized/Stortjarn/FINAL/CO2/Montecarlo_gf_merged",
                               datetime1="datetime",
                               filled_flux_col1=c("NEE_f","GPP_f","Reco"))

#Preparing random measurement error

preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f")
sto_err_df <- fluxes_meteo_sto_qc[,c("datetime","rand_err_co2_flux","co2_flux_final", preds)]

plot(rand_err_co2_flux~datetime, data=sto_err_df)

sto_err_df$rand_err_co2_flux[which(is.na(sto_err_df$co2_flux_final))] <- NA
sto_err_df$co2_flux_final <- NULL
plot(rand_err_co2_flux~datetime, data=sto_err_df)

sto_err_df$rand_err_co2_flux[which(sto_err_df$rand_err_co2_flux > 5)] <- NA

preProcValues <- preProcess(sto_err_df, method = c("bagImpute"))
sto_err_df_imp <- predict(preProcValues, sto_err_df)

plot(rand_err_co2_flux~datetime, data=sto_err_df_imp)

sto_aggr_fluxes <- co2_flux_aggregator(path_to_df_f = "D:/EC/Data_organized/Stortjarn/FINAL/CO2/For_ReddyProc_NEE_GF.txt",
                                       df_mc = df_mc,
                                       rd_err_df = sto_err_df_imp)

saveRDS(sto_aggr_fluxes, "D:/EC/Data_organized/Stortjarn/FINAL/CO2/aggr_rds_CO2.RDS")

###############################
#############Halsingfors
###############################


hals1_path <- "D:/EC/Data_organized/Halsingfors/Eddypro_output/PART_2020/eddypro_updateddetails_full_output_2021-02-26T220334_adv.csv"
hals2_path <- "D:/EC/Data_organized/Halsingfors/Eddypro_output/eddypro_Halsingfors_2022_07_07_full_output_2022-07-08T200652_adv.csv"

hals_merged <- merge_2_EC(path_EC1=hals1_path,
                          path_EC2=hals2_path,
                          date_format_EC1 = "%d/%m/%Y",
                          date_format_EC2 = "%Y-%m-%d",
                          check_write_df=FALSE)#,
                          #writing_path = "D:/EC/Data_organized/Halsingfors/Eddypro_output/Merged_test")


# #visualizing from disk
# vis_list_hals <- visualization(path_EC = "D:/EC/Data_organized/Halsingfors/Eddypro_output/Merged_test/merged.csv",
#                                path_biomet = "D:/EC/Data_organized/Halsingfors/Biomet_gf/hals_met.csv")
#
# fluxes_meteo_hals <- vis_list_hals$data
# vis_list_hals$graphs

#visualization from already loaded dataframe
vis_list_hals <- visualization(check_path_EC = FALSE,
                               EC_df = hals_merged,
                               path_biomet = "D:/EC/Data_organized/Halsingfors/Biomet_gf/hals_met.csv")

fluxes_meteo_hals <- vis_list_hals$data
vis_list_hals$graphs


plot(co2_flux~datetime, data=fluxes_meteo_hals[which(fluxes_meteo_hals$co2_flux < 100 & fluxes_meteo_hals$co2_flux > -100 ),])
#Quality control
fluxes_meteo_hals_qc <- quality_control(fluxes_meteo_hals,
                                       gas="co2",
                                       limit_lower = -50,
                                       limit_upper = 50,
                                       Temp_col = "Ta_f",
                                       RSSI = TRUE,
                                       RSSI_col = "diag_77_mean")

# Additional hard flag visual...
fluxes_meteo_hals_qc$co2_flux_final[which(fluxes_meteo_hals_qc$co2_flux_final < -10 | fluxes_meteo_hals_qc$co2_flux_final > 10)] <- NA
plot(co2_flux_final~datetime, data=fluxes_meteo_hals_qc)
# fluxes_meteo_hals_qc

#Preparation for Reddyproc
fluxes_meteo_hals_qc$SWin_f[which(fluxes_meteo_hals_qc$SWin_f < 0)] <- 0
fluxes_meteo_hals_qc$VPD_f[which(fluxes_meteo_hals_qc$VPD_f < 0)] <- 0

formatting_fluxes_REddyProc(df=fluxes_meteo_hals_qc,
                            flux_col = "co2_flux_final",
                            FLUX="NEE",
                            saving_path = "D:/EC/Data_organized/Halsingfors/FINAL/CO2")


reddyproc_gapfiller(formatted_file_path="D:/EC/Data_organized/Halsingfors/FINAL/CO2/For_ReddyProc_NEE.txt",
                    saving_folder="D:/EC/Data_organized/Halsingfors/FINAL/CO2",
                    FLUX="NEE")


#Montecarlo simulation
montecarlo_sim_noCH4(path_to_file = "D:/EC/Data_organized/Halsingfors/FINAL/CO2/For_ReddyProc_NEE_GF.txt",
                     path_to_file_nonGF = "D:/EC/Data_organized/Halsingfors/FINAL/CO2/For_ReddyProc_NEE.txt",
                     flux_col="NEE",
                     flux_pred_col="NEE_fall",
                     n=100,
                     saving_folder = "D:/EC/Data_organized/Halsingfors/FINAL/CO2/Montecarlo")


#Gapfilling Montecarlo simulations

montecarlo_sim_noCH4_gf(mc_sim_path = "D:/EC/Data_organized/Halsingfors/FINAL/CO2/Montecarlo",
                        mc_sim_gf_path = "D:/EC/Data_organized/Halsingfors/FINAL/CO2/Montecarlo_gf",
                        flux_col="NEE")


#merging gapfilled montecarlo simulations
df_mc <- merge_montecarlo_sims(gf_type = "REddyProc",
                               dir = "D:/EC/Data_organized/Halsingfors/FINAL/CO2/Montecarlo_gf",
                               saving_dir = "D:/EC/Data_organized/Halsingfors/FINAL/CO2/Montecarlo_gf_merged",
                               datetime1="datetime",
                               filled_flux_col1=c("NEE_f","GPP_f","Reco"))

#Preparing random measurement error

preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f")
hals_err_df <- fluxes_meteo_hals_qc[,c("datetime","rand_err_co2_flux","co2_flux_final", preds)]

plot(rand_err_co2_flux~datetime, data=hals_err_df)

hals_err_df$rand_err_co2_flux[which(is.na(hals_err_df$co2_flux_final))] <- NA
hals_err_df$co2_flux_final <- NULL
plot(rand_err_co2_flux~datetime, data=hals_err_df)

hals_err_df$rand_err_co2_flux[which(hals_err_df$rand_err_co2_flux > 4)] <- NA

preProcValues <- preProcess(hals_err_df, method = c("bagImpute"))
hals_err_df_imp <- predict(preProcValues, hals_err_df)

plot(rand_err_co2_flux~datetime, data=hals_err_df_imp)

hals_aggr_fluxes <- co2_flux_aggregator(path_to_df_f = "D:/EC/Data_organized/Halsingfors/FINAL/CO2/For_ReddyProc_NEE_GF.txt",
                                       df_mc = df_mc,
                                       rd_err_df = hals_err_df_imp)

saveRDS(hals_aggr_fluxes, "D:/EC/Data_organized/Halsingfors/FINAL/CO2/aggr_rds_CO2.RDS")



##################################################################################################################################
##################################################################################################################################
#H2O
##################################################################################################################################
##################################################################################################################################


library(devtools)
load_all()
library(ggplot2)
library(plotly)
library(caret)
library(RANN)
library(data.table)

###############################
#############Halmyran
###############################

# #First visualization
# vis_list_halm <- visualization(path_EC = "D:/EC/Data_organized/Halmyran/Eddypro/Output_final/eddypro_Halmyran_2022_07_07_full_output_2022-07-08T120131_adv.csv",
#                                path_biomet = "D:/EC/Data_organized/Halmyran/Biomet_gf/halm_met.csv")
#
# fluxes_meteo_halm <- vis_list_halm$data
# vis_list_halm$graphs
#
# plot(h2o_flux~datetime, data=fluxes_meteo_halm[which(fluxes_meteo_halm$co2_flux < 50 & fluxes_meteo_halm$h2o_flux > -20),])
# #Quality control
# fluxes_meteo_halm_qc <- quality_control(fluxes_meteo_halm,
#                                         gas="h2o",
#                                         limit_lower = -10,
#                                         limit_upper = 20,
#                                         Temp_col = "Ts_f")
#
# # Additional hard flag visual...
# #fluxes_meteo_halm_qc$co2_flux_final[which(fluxes_meteo_halm_qc$co2_flux_final < -15 | fluxes_meteo_halm_qc$co2_flux_final > 10)] <- NA
# plot(h2o_flux_final~datetime, data=fluxes_meteo_halm_qc)
# # fluxes_meteo_halm_qc
#
# #Preparation for Reddyproc
#
# fluxes_meteo_halm_qc$SWin_f[which(fluxes_meteo_halm_qc$SWin_f < 0)] <- 0
#
# formatting_fluxes_REddyProc(df=fluxes_meteo_halm_qc,
#                             flux_col = "h2o_flux_final",
#                             FLUX="H2O",
#                             saving_path = "D:/EC/Data_organized/Halmyran/FINAL/H2O")
#
#
# reddyproc_gapfiller(formatted_file_path="D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O.txt",
#                     saving_folder="D:/EC/Data_organized/Halmyran/FINAL/H2O",
#                     FLUX="H2O")
#
#
# #Montecarlo simulation
# montecarlo_sim_noCH4(path_to_file = "D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
#                      path_to_file_nonGF = "D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O.txt",
#                      flux_col="H2O",
#                      flux_pred_col="H2O_fall",
#                      n=100,
#                      saving_folder = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo")
#
#
# #Gapfilling Montecarlo simulations
#
# montecarlo_sim_noCH4_gf(mc_sim_path = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo",
#                         mc_sim_gf_path = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo_gf",
#                         flux_col="H2O")
#
#
# #merging gapfilled montecarlo simulations
# df_mc <- merge_montecarlo_sims(gf_type = "REddyProc",
#                                dir = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo_gf",
#                                saving_dir = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo_gf_merged",
#                                datetime1="datetime",
#                                filled_flux_col1=c("H2O_f"))
#
#
#
# #Preparing random measurement error
#
# preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f")
# halm_err_df <- fluxes_meteo_halm_qc[,c("datetime","rand_err_h2o_flux","h2o_flux_final", preds)]
#
# plot(rand_err_h2o_flux~datetime, data=halm_err_df)
#
# halm_err_df$rand_err_h2o_flux[which(is.na(halm_err_df$h2o_flux_final))] <- NA
# halm_err_df$h2o_flux_final <- NULL
# plot(rand_err_h2o_flux~datetime, data=halm_err_df)
#
# halm_err_df$rand_err_h2o_flux[which(halm_err_df$rand_err_h2o_flux > 0.8)] <- NA
#
# preProcValues <- preProcess(halm_err_df, method = c("bagImpute"))
# halm_err_df_imp <- predict(preProcValues, halm_err_df)
#
# plot(rand_err_h2o_flux~datetime, data=halm_err_df_imp)
#
# halm_aggr_fluxes <- h2o_flux_aggregator(path_to_df_f = "D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
#                                         df_mc = df_mc,
#                                         rd_err_df = halm_err_df_imp)
#
# saveRDS(halm_aggr_fluxes, "D:/EC/Data_organized/Halmyran/FINAL/H2O/aggr_rds_H2O.RDS")
#

###############################
#############Halmyran
###############################

#First visualization
vis_list_halm <- visualization(path_EC = "D:/EC/Data_organized/Halmyran/Eddypro/Output_final/eddypro_Halmyran_2022_07_07_full_output_2022-07-08T120131_adv.csv",
                               path_biomet = "D:/EC/Data_organized/Halmyran/Biomet_gf/halm_met.csv")

fluxes_meteo_halm <- vis_list_halm$data
vis_list_halm$graphs

plot(h2o_flux~datetime, data=fluxes_meteo_halm[which(fluxes_meteo_halm$h2o_flux < 500),])
#Quality control
fluxes_meteo_halm_qc <- quality_control(fluxes_meteo_halm,
                                        gas="h2o",
                                        limit_lower = -10,
                                        limit_upper = 20,
                                        Temp_col = "Ta_f")

# Additional hard flag visual...
fluxes_meteo_halm_qc$h2o_flux_final[which(fluxes_meteo_halm_qc$h2o_flux_final < -15 | fluxes_meteo_halm_qc$h2o_flux_final > 10)] <- NA
plot(h2o_flux_final~datetime, data=fluxes_meteo_halm_qc)
# fluxes_meteo_halm_qc

#Preparation for Reddyproc
fluxes_meteo_halm_qc$SWin_f[which(fluxes_meteo_halm_qc$SWin_f < 0)] <- 0
fluxes_meteo_halm_qc$VPD_f[which(fluxes_meteo_halm_qc$VPD_f < 0)] <- 0

formatting_fluxes_REddyProc(df=fluxes_meteo_halm_qc,
                            flux_col = "h2o_flux_final",
                            FLUX="H2O",
                            saving_path = "D:/EC/Data_organized/Halmyran/FINAL/H2O")


reddyproc_gapfiller(formatted_file_path="D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O.txt",
                    saving_folder="D:/EC/Data_organized/Halmyran/FINAL/H2O",
                    FLUX="H2O")


#Montecarlo simulation
montecarlo_sim_noCH4(path_to_file = "D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
                     path_to_file_nonGF = "D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O.txt",
                     flux_col="H2O",
                     flux_pred_col="H2O_fall",
                     n=100,
                     saving_folder = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo")


#Gapfilling Montecarlo simulations

montecarlo_sim_noCH4_gf(mc_sim_path = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo",
                        mc_sim_gf_path = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo_gf",
                        flux_col="H2O")


#merging gapfilled montecarlo simulations
df_mc <- merge_montecarlo_sims(gf_type = "REddyProc",
                               dir = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo_gf",
                               saving_dir = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo_gf_merged",
                               datetime1="datetime",
                               filled_flux_col1=c("H2O_f"))

#Preparing random measurement error

preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f")
halm_err_df <- fluxes_meteo_halm_qc[,c("datetime","rand_err_h2o_flux","h2o_flux_final", preds)]

plot(rand_err_h2o_flux~datetime, data=halm_err_df)

halm_err_df$rand_err_h2o_flux[which(is.na(halm_err_df$h2o_flux_final))] <- NA
halm_err_df$h2o_flux_final <- NULL
plot(rand_err_h2o_flux~datetime, data=halm_err_df)

halm_err_df$rand_err_h2o_flux[which(halm_err_df$rand_err_h2o_flux > 5)] <- NA

preProcValues <- preProcess(halm_err_df, method = c("bagImpute"))
halm_err_df_imp <- predict(preProcValues, halm_err_df)

plot(rand_err_h2o_flux~datetime, data=halm_err_df_imp)

halm_aggr_fluxes <- h2o_flux_aggregator(path_to_df_f = "D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
                                        df_mc = df_mc,
                                        rd_err_df = halm_err_df_imp)

saveRDS(halm_aggr_fluxes, "D:/EC/Data_organized/Halmyran/FINAL/H2O/aggr_rds_H2O.RDS")


###############################
#######Halmyran SPLIT  COMBINED
###############################

halm1_path <- "D:/EC/Data_organized/Halmyran/Eddypro/output_final/OLD_SPLIT_COMBINED/eddypro_Halmyran_full_output_2021-02-05T063233_adv.csv"
halm2_path <- "D:/EC/Data_organized/Halmyran/Eddypro/output_final/OLD_SPLIT_COMBINED/eddypro_Halmyran_2022_07_07_full_output_2022-07-08T120131_adv.csv"

halm_merged <- merge_2_EC(path_EC1=halm1_path,
                          path_EC2=halm2_path,
                          date_format_EC1 = "%d/%m/%Y",
                          date_format_EC2 = "%Y-%m-%d",
                          check_write_df=TRUE,
                          writing_path = "D:/EC/Data_organized/Halmyran/Eddypro/output_final/OLD_SPLIT_COMBINED/Merged_test")


# #visualizing from disk
# vis_list_halm <- visualization(path_EC = "D:/EC/Data_organized/Halmyran/Eddypro_output/Merged_test/merged.csv",
#                                path_biomet = "D:/EC/Data_organized/Halmyran/Biomet_gf/halm_met.csv")
#
# fluxes_meteo_halm <- vis_list_halm$data
# vis_list_halm$graphs

#visualization from already loaded dataframe
vis_list_halm <- visualization(check_path_EC = FALSE,
                               EC_df = halm_merged,
                               path_biomet = "D:/EC/Data_organized/Halmyran/Biomet_gf/halm_met.csv")


# #First visualization
# vis_list_halm <- visualization(path_EC = "D:/EC/Data_organized/Halmyran/Eddypro/Output_final/eddypro_Halmyran_2022_07_07_full_output_2022-07-08T120131_adv.csv",
#                                path_biomet = "D:/EC/Data_organized/Halmyran/Biomet_gf/halm_met.csv")

fluxes_meteo_halm <- vis_list_halm$data
vis_list_halm$graphs

plot(h2o_flux~datetime, data=fluxes_meteo_halm[which(fluxes_meteo_halm$h2o_flux < 500),])
#Quality control
fluxes_meteo_halm_qc <- quality_control(fluxes_meteo_halm,
                                        gas="h2o",
                                        limit_lower = -10,
                                        limit_upper = 20,
                                        Temp_col = "Ta_f")

# Additional hard flag visual...
fluxes_meteo_halm_qc$h2o_flux_final[which(fluxes_meteo_halm_qc$h2o_flux_final < -2 | fluxes_meteo_halm_qc$h2o_flux_final > 10)] <- NA
plot(h2o_flux_final~datetime, data=fluxes_meteo_halm_qc)
# fluxes_meteo_halm_qc

#Preparation for Reddyproc
fluxes_meteo_halm_qc$SWin_f[which(fluxes_meteo_halm_qc$SWin_f < 0)] <- 0
fluxes_meteo_halm_qc$VPD_f[which(fluxes_meteo_halm_qc$VPD_f < 0)] <- 0

formatting_fluxes_REddyProc(df=fluxes_meteo_halm_qc,
                            flux_col = "h2o_flux_final",
                            FLUX="H2O",
                            saving_path = "D:/EC/Data_organized/Halmyran/FINAL/H2O")


reddyproc_gapfiller(formatted_file_path="D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O.txt",
                    saving_folder="D:/EC/Data_organized/Halmyran/FINAL/H2O",
                    FLUX="H2O")


#Montecarlo simulation
montecarlo_sim_noCH4(path_to_file = "D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
                     path_to_file_nonGF = "D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O.txt",
                     flux_col="H2O",
                     flux_pred_col="H2O_fall",
                     n=100,
                     saving_folder = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo")


#Gapfilling Montecarlo simulations

montecarlo_sim_noCH4_gf(mc_sim_path = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo",
                        mc_sim_gf_path = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo_gf",
                        flux_col="H2O")


#merging gapfilled montecarlo simulations
df_mc <- merge_montecarlo_sims(gf_type = "REddyProc",
                               dir = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo_gf",
                               saving_dir = "D:/EC/Data_organized/Halmyran/FINAL/H2O/Montecarlo_gf_merged",
                               datetime1="datetime",
                               filled_flux_col1=c("H2O_f"))

#Preparing random measurement error

preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f")
halm_err_df <- fluxes_meteo_halm_qc[,c("datetime","rand_err_h2o_flux","h2o_flux_final", preds)]

plot(rand_err_h2o_flux~datetime, data=halm_err_df)

halm_err_df$rand_err_h2o_flux[which(is.na(halm_err_df$h2o_flux_final))] <- NA
halm_err_df$h2o_flux_final <- NULL
plot(rand_err_h2o_flux~datetime, data=halm_err_df)

halm_err_df$rand_err_h2o_flux[which(halm_err_df$rand_err_h2o_flux > 0.8)] <- NA

preProcValues <- preProcess(halm_err_df, method = c("bagImpute"))
halm_err_df_imp <- predict(preProcValues, halm_err_df)

plot(rand_err_h2o_flux~datetime, data=halm_err_df_imp)

halm_aggr_fluxes <- h2o_flux_aggregator(path_to_df_f = "D:/EC/Data_organized/Halmyran/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
                                        df_mc = df_mc,
                                        rd_err_df = halm_err_df_imp)

saveRDS(halm_aggr_fluxes, "D:/EC/Data_organized/Halmyran/FINAL/H2O/aggr_rds_H2O.RDS")


###############################
#############Degero
###############################

#First visualization
vis_list_deg <- visualization(path_EC = "D:/EC/Data_organized/Degero/Eddypro/Output/eddypro_Deg_LGR_2022_07_07_full_output_2022-07-09T213920_adv.csv",
                              path_biomet = "D:/EC/Data_organized/Degero/Biomet_gf/deg_met.csv")

fluxes_meteo_deg <- vis_list_deg$data
vis_list_deg$graphs

plot(h2o_flux~datetime, data=fluxes_meteo_deg[which(fluxes_meteo_deg$h2o_flux < 20 & fluxes_meteo_deg$h2o_flux >-10),])
#Quality control
fluxes_meteo_deg_qc <- quality_control(fluxes_meteo_deg,
                                       gas="h2o",
                                       limit_lower = -10,
                                       limit_upper = 20,
                                       Temp_col = "Ta_f")

# Additional hard flag visual...
fluxes_meteo_deg_qc$h2o_flux_final[which(fluxes_meteo_deg_qc$h2o_flux_final < -2 | fluxes_meteo_deg_qc$h2o_flux_final > 15)] <- NA
plot(h2o_flux_final~datetime, data=fluxes_meteo_deg_qc)
# fluxes_meteo_deg_qc

#Preparation for Reddyproc
fluxes_meteo_deg_qc$SWin_f[which(fluxes_meteo_deg_qc$SWin_f < 0)] <- 0
fluxes_meteo_deg_qc$VPD_f[which(fluxes_meteo_deg_qc$VPD_f < 0)] <- 0

formatting_fluxes_REddyProc(df=fluxes_meteo_deg_qc,
                            flux_col = "h2o_flux_final",
                            FLUX="H2O",
                            saving_path = "D:/EC/Data_organized/Degero/FINAL/H2O")


reddyproc_gapfiller(formatted_file_path="D:/EC/Data_organized/Degero/FINAL/H2O/For_ReddyProc_H2O.txt",
                    saving_folder="D:/EC/Data_organized/Degero/FINAL/H2O",
                    FLUX="H2O")


#Montecarlo simulation
montecarlo_sim_noCH4(path_to_file = "D:/EC/Data_organized/Degero/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
                     path_to_file_nonGF = "D:/EC/Data_organized/Degero/FINAL/H2O/For_ReddyProc_H2O.txt",
                     flux_col="H2O",
                     flux_pred_col="H2O_fall",
                     n=100,
                     saving_folder = "D:/EC/Data_organized/Degero/FINAL/H2O/Montecarlo")


#Gapfilling Montecarlo simulations

montecarlo_sim_noCH4_gf(mc_sim_path = "D:/EC/Data_organized/Degero/FINAL/H2O/Montecarlo",
                        mc_sim_gf_path = "D:/EC/Data_organized/Degero/FINAL/H2O/Montecarlo_gf",
                        flux_col="H2O")


#merging gapfilled montecarlo simulations
df_mc <- merge_montecarlo_sims(gf_type = "REddyProc",
                               dir = "D:/EC/Data_organized/Degero/FINAL/H2O/Montecarlo_gf",
                               saving_dir = "D:/EC/Data_organized/Degero/FINAL/H2O/Montecarlo_gf_merged",
                               datetime1="datetime",
                               filled_flux_col1=c("H2O_f"))

#Preparing random measurement error

preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f")
deg_err_df <- fluxes_meteo_deg_qc[,c("datetime","rand_err_h2o_flux","h2o_flux_final", preds)]

plot(rand_err_h2o_flux~datetime, data=deg_err_df)

deg_err_df$rand_err_h2o_flux[which(is.na(deg_err_df$h2o_flux_final))] <- NA
deg_err_df$h2o_flux_final <- NULL
plot(rand_err_h2o_flux~datetime, data=deg_err_df)

deg_err_df$rand_err_h2o_flux[which(deg_err_df$rand_err_h2o_flux > 3.5)] <- NA

preProcValues <- preProcess(deg_err_df, method = c("bagImpute"))
deg_err_df_imp <- predict(preProcValues, deg_err_df)

plot(rand_err_h2o_flux~datetime, data=deg_err_df_imp)

deg_aggr_fluxes <- h2o_flux_aggregator(path_to_df_f = "D:/EC/Data_organized/Degero/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
                                       df_mc = df_mc,
                                       rd_err_df = deg_err_df_imp)

saveRDS(deg_aggr_fluxes, "D:/EC/Data_organized/Degero/FINAL/H2O/aggr_rds_H2O.RDS")



###############################
#############Stortjarn
###############################

#First visualization
vis_list_sto <- visualization(path_EC = "D:/EC/Data_organized/Stortjarn/Eddypro/output/eddypro_Stortjarn_20220612_full_output_2022-07-08T130122_adv.csv",
                              path_biomet = "D:/EC/Data_organized/Stortjarn/Biomet_gf/sto_met.csv")

fluxes_meteo_sto <- vis_list_sto$data
vis_list_sto$graphs

plot(h2o_flux~datetime, data=fluxes_meteo_sto[which(fluxes_meteo_sto$h2o_flux < 500),])
#Quality control
fluxes_meteo_sto_qc <- quality_control(fluxes_meteo_sto,
                                       gas="h2o",
                                       limit_lower = -10,
                                       limit_upper = 20,
                                       Temp_col = "Ta_f")

# Additional hard flag visual...
fluxes_meteo_sto_qc$h2o_flux_final[which(fluxes_meteo_sto_qc$h2o_flux_final < -5 | fluxes_meteo_sto_qc$h2o_flux_final > 10)] <- NA
plot(h2o_flux_final~datetime, data=fluxes_meteo_sto_qc)
# fluxes_meteo_sto_qc

#Preparation for Reddyproc
fluxes_meteo_sto_qc$SWin_f[which(fluxes_meteo_sto_qc$SWin_f < 0)] <- 0
fluxes_meteo_sto_qc$VPD_f[which(fluxes_meteo_sto_qc$VPD_f < 0)] <- 0

formatting_fluxes_REddyProc(df=fluxes_meteo_sto_qc,
                            flux_col = "h2o_flux_final",
                            FLUX="H2O",
                            saving_path = "D:/EC/Data_organized/Stortjarn/FINAL/H2O")


reddyproc_gapfiller(formatted_file_path="D:/EC/Data_organized/Stortjarn/FINAL/H2O/For_ReddyProc_H2O.txt",
                    saving_folder="D:/EC/Data_organized/Stortjarn/FINAL/H2O",
                    FLUX="H2O")


#Montecarlo simulation
montecarlo_sim_noCH4(path_to_file = "D:/EC/Data_organized/Stortjarn/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
                     path_to_file_nonGF = "D:/EC/Data_organized/Stortjarn/FINAL/H2O/For_ReddyProc_H2O.txt",
                     flux_col="H2O",
                     flux_pred_col="H2O_fall",
                     n=100,
                     saving_folder = "D:/EC/Data_organized/Stortjarn/FINAL/H2O/Montecarlo")


#Gapfilling Montecarlo simulations

montecarlo_sim_noCH4_gf(mc_sim_path = "D:/EC/Data_organized/Stortjarn/FINAL/H2O/Montecarlo",
                        mc_sim_gf_path = "D:/EC/Data_organized/Stortjarn/FINAL/H2O/Montecarlo_gf",
                        flux_col="H2O")


#merging gapfilled montecarlo simulations
df_mc <- merge_montecarlo_sims(gf_type = "REddyProc",
                               dir = "D:/EC/Data_organized/Stortjarn/FINAL/H2O/Montecarlo_gf",
                               saving_dir = "D:/EC/Data_organized/Stortjarn/FINAL/H2O/Montecarlo_gf_merged",
                               datetime1="datetime",
                               filled_flux_col1=c("H2O_f"))

#Preparing random measurement error

preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f")
sto_err_df <- fluxes_meteo_sto_qc[,c("datetime","rand_err_h2o_flux","h2o_flux_final", preds)]

plot(rand_err_h2o_flux~datetime, data=sto_err_df)

sto_err_df$rand_err_h2o_flux[which(is.na(sto_err_df$h2o_flux_final))] <- NA
sto_err_df$h2o_flux_final <- NULL
plot(rand_err_h2o_flux~datetime, data=sto_err_df)

sto_err_df$rand_err_h2o_flux[which(sto_err_df$rand_err_h2o_flux > 0.8)] <- NA

preProcValues <- preProcess(sto_err_df, method = c("bagImpute"))
sto_err_df_imp <- predict(preProcValues, sto_err_df)

plot(rand_err_h2o_flux~datetime, data=sto_err_df_imp)

sto_aggr_fluxes <- h2o_flux_aggregator(path_to_df_f = "D:/EC/Data_organized/Stortjarn/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
                                       df_mc = df_mc,
                                       rd_err_df = sto_err_df_imp)

saveRDS(sto_aggr_fluxes, "D:/EC/Data_organized/Stortjarn/FINAL/H2O/aggr_rds_H2O.RDS")

###############################
#############Halsingfors
###############################


hals1_path <- "D:/EC/Data_organized/Halsingfors/Eddypro_output/PART_2020/eddypro_updateddetails_full_output_2021-02-26T220334_adv.csv"
hals2_path <- "D:/EC/Data_organized/Halsingfors/Eddypro_output/eddypro_Halsingfors_2022_07_07_full_output_2022-07-08T200652_adv.csv"

hals_merged <- merge_2_EC(path_EC1=hals1_path,
                          path_EC2=hals2_path,
                          date_format_EC1 = "%d/%m/%Y",
                          date_format_EC2 = "%Y-%m-%d",
                          check_write_df=FALSE)#,
#writing_path = "D:/EC/Data_organized/Halsingfors/Eddypro_output/Merged_test")


# #visualizing from disk
# vis_list_hals <- visualization(path_EC = "D:/EC/Data_organized/Halsingfors/Eddypro_output/Merged_test/merged.csv",
#                                path_biomet = "D:/EC/Data_organized/Halsingfors/Biomet_gf/hals_met.csv")
#
# fluxes_meteo_hals <- vis_list_hals$data
# vis_list_hals$graphs

#visualization from already loaded dataframe
vis_list_hals <- visualization(check_path_EC = FALSE,
                               EC_df = hals_merged,
                               path_biomet = "D:/EC/Data_organized/Halsingfors/Biomet_gf/hals_met.csv")

fluxes_meteo_hals <- vis_list_hals$data
vis_list_hals$graphs


plot(h2o_flux~datetime, data=fluxes_meteo_hals[which(fluxes_meteo_hals$h2o_flux < 500),])
#Quality control
fluxes_meteo_hals_qc <- quality_control(fluxes_meteo_hals,
                                        gas="h2o",
                                        limit_lower = -10,
                                        limit_upper = 20,
                                        Temp_col = "Ts_f",
                                        RSSI = TRUE,
                                        RSSI_col = "diag_77_mean")

# Additional hard flag visual...
fluxes_meteo_hals_qc$h2o_flux_final[which(fluxes_meteo_hals_qc$h2o_flux_final < -10 | fluxes_meteo_hals_qc$h2o_flux_final > 10)] <- NA
plot(h2o_flux_final~datetime, data=fluxes_meteo_hals_qc)
# fluxes_meteo_hals_qc

#Preparation for Reddyproc
fluxes_meteo_hals_qc$SWin_f[which(fluxes_meteo_hals_qc$SWin_f < 0)] <- 0
fluxes_meteo_hals_qc$VPD_f[which(fluxes_meteo_hals_qc$VPD_f < 0)] <- 0

formatting_fluxes_REddyProc(df=fluxes_meteo_hals_qc,
                            flux_col = "h2o_flux_final",
                            FLUX="H2O",
                            saving_path = "D:/EC/Data_organized/Halsingfors/FINAL/H2O")


reddyproc_gapfiller(formatted_file_path="D:/EC/Data_organized/Halsingfors/FINAL/H2O/For_ReddyProc_H2O.txt",
                    saving_folder="D:/EC/Data_organized/Halsingfors/FINAL/H2O",
                    FLUX="H2O")


#Montecarlo simulation
montecarlo_sim_noCH4(path_to_file = "D:/EC/Data_organized/Halsingfors/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
                     path_to_file_nonGF = "D:/EC/Data_organized/Halsingfors/FINAL/H2O/For_ReddyProc_H2O.txt",
                     flux_col="H2O",
                     flux_pred_col="H2O_fall",
                     n=100,
                     saving_folder = "D:/EC/Data_organized/Halsingfors/FINAL/H2O/Montecarlo")


#Gapfilling Montecarlo simulations

montecarlo_sim_noCH4_gf(mc_sim_path = "D:/EC/Data_organized/Halsingfors/FINAL/H2O/Montecarlo",
                        mc_sim_gf_path = "D:/EC/Data_organized/Halsingfors/FINAL/H2O/Montecarlo_gf",
                        flux_col="H2O")


#merging gapfilled montecarlo simulations
df_mc <- merge_montecarlo_sims(gf_type = "REddyProc",
                               dir = "D:/EC/Data_organized/Halsingfors/FINAL/H2O/Montecarlo_gf",
                               saving_dir = "D:/EC/Data_organized/Halsingfors/FINAL/H2O/Montecarlo_gf_merged",
                               datetime1="datetime",
                               filled_flux_col1=c("H2O_f"))

#Preparing random measurement error

preds <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f")
hals_err_df <- fluxes_meteo_hals_qc[,c("datetime","rand_err_h2o_flux","h2o_flux_final", preds)]

plot(rand_err_h2o_flux~datetime, data=hals_err_df)

hals_err_df$rand_err_h2o_flux[which(is.na(hals_err_df$h2o_flux_final))] <- NA
hals_err_df$h2o_flux_final <- NULL
plot(rand_err_h2o_flux~datetime, data=hals_err_df)

hals_err_df$rand_err_h2o_flux[which(hals_err_df$rand_err_h2o_flux > 1)] <- NA

preProcValues <- preProcess(hals_err_df, method = c("bagImpute"))
hals_err_df_imp <- predict(preProcValues, hals_err_df)

plot(rand_err_h2o_flux~datetime, data=hals_err_df_imp)

hals_aggr_fluxes <- h2o_flux_aggregator(path_to_df_f = "D:/EC/Data_organized/Halsingfors/FINAL/H2O/For_ReddyProc_H2O_GF.txt",
                                        df_mc = df_mc,
                                        rd_err_df = hals_err_df_imp)

saveRDS(hals_aggr_fluxes, "D:/EC/Data_organized/Halsingfors/FINAL/H2O/aggr_rds_H2O.RDS")





