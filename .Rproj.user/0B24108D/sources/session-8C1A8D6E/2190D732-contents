##########################################################################################################################################
#######################Trying to fit individual functions and use a transformation plus multiple linear regression...
#install_github("onofriandreapg/aomisc")
#https://www.r-bloggers.com/2021/04/other-useful-functions-for-nonlinear-regression-threshold-models-and-all-that/?fbclid=IwAR3-LlgjD9btod81AZzr3A0ImkyJwdwaoN3ataSfJbyKfqWqNzlNL-EsDOU
library(aomisc)


sto_day <- Reduce(function(...) merge(..., all=TRUE), list(sto_aggr_ch4$flux_df_day %>% dplyr::rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
                                                           sto_aggr_co2$flux_df_day %>% dplyr::rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
                                                           sto_aggr_h2o$flux_df_day %>% dplyr::rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
                                                           sto_aggr_biomet$day)) %>% mutate(Site="stoero", PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
                                                                                            month = month(date)) %>%
  mutate(GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
         FCH4_sum = FCH4_sum/1000) #g instead of mg



sto_day
sto_day_trans <- sto_day %>%
  filter(!is.na(WTD_f)) %>%
  mutate(WTD_f_trans = WTD_f + 50,
         #FCH4_trans = log(FCH4_sum),
         doy = lubridate::yday(date))

##WTD
ggplot(sto_day_trans, aes(WTD_f, FCH4_sum))+geom_point()
#  model <- nls(FCH4_sum ~ NLS.W1.4(WTD_f_trans, b, c, d, e), data = sto_day_trans)#non least square, weibul 1, 4 parameters
# model.2 <- nls(FCH4_sum ~ NLS.W1.3(WTD_f_trans, b, d, e), data = sto_day_trans)
# #model.3 <- nls(FCH4_sum/max(FCH4_sum, na.rm = TRUE) ~ NLS.W1.2(WTD_f_trans, b, e), data = sto_day_trans)
# # model.3 <- nls(FW/max(FW) ~ NLS.W1.2(Dose, b, e), data = brassica)

model <- drm(FCH4_sum ~ WTD_f_trans, fct = W1.4(), data = sto_day_trans)
model.2 <- drm(FCH4_sum ~ WTD_f_trans, fct = W1.3(), data = sto_day_trans)
#model.3 <- drm(FW/max(FW) ~ Dose, fct = W1.2(), data = brassica)


# model <- nls(FCH4_trans ~ NLS.W1.4(WTD_f_trans, b, c, d, e), data = sto_day_trans)
# model <- drm(FCH4_trans ~ WTD_f_trans, fct = W1.4(), data = sto_day_trans)

summary(model)

plot(model, ylim = c(0,0.15), main = "Weibull type 1")
#
# plot(model, ylim = c(-6,-2), main = "Weibull type 1")

#Y=c+(d−c){1−exp{−exp[b(log(X)−log(e))]}}

mod_summary <- summary(model)
str(mod_summary)

plot(residuals(model))


b_est = mod_summary$coefficients[1,1]
c_est = mod_summary$coefficients[2,1]
d_est = mod_summary$coefficients[3,1]
e_est = mod_summary$coefficients[4,1]

# sto_day_trans <- sto_day_trans %>%
#   mutate(FCH4_pred = c_est+(d_est-c_est)*(1-exp(-exp(b_est*(log(WTD_f_trans)-log(e_est))))))

sto_day_trans$FCH4_pred_WTD <- c_est+(d_est-c_est)*(1-exp(-exp(-b_est*(log(sto_day_trans$WTD_f_trans)-log(e_est)))))

rsq <- function (x, y) cor(x, y)^2
rsq(sto_day_trans$FCH4_pred, sto_day_trans$FCH4_sum)

plot(FCH4_pred_WTD ~ FCH4_sum, data=sto_day_trans)

#GPP
g <- ggplot(sto_day_trans, aes(GPP_sum, FCH4_sum))+geom_point()
g

#
# model_l <- lm(FCH4_sum ~ GPP_sum, data=sto_day_trans)
#
#
# summary(model_l)
# model2 <- update(model_l,na.action=na.exclude)
# sto_day_trans$FCH4_pred_GPP <- predict(model2, newdata = sto_day_trans)
# plot(FCH4_pred_GPP ~ FCH4_sum, data=sto_day_trans)


model <- drm(FCH4_sum ~ GPP_sum, data=sto_day_trans, fct = DRC.asymReg())
summary(model)
cor(sto_day_trans$FCH4_sum, predict(update(model, na.action= "na.exclude"),  newdata = sto_day_trans), use = "complete.obs") ^2
sto_day_trans$FCH4_pred_GPP <- predict(update(model, na.action= "na.exclude"),  newdata = sto_day_trans)
plot(FCH4_pred_GPP ~ FCH4_sum, data=sto_day_trans)

g+geom_point(data=sto_day_trans, mapping=aes(x = GPP_sum, y=FCH4_pred_GPP), color="red")



#Ts

g <- ggplot(sto_day_trans, aes(Ts_f, FCH4_sum))+geom_point()
g
model <- nls(FCH4_sum ~ a*exp(r*Ts_f), data=sto_day_trans,
             start = list(a = 0.5, r = 0.2))
summary(model)

coef(model)

model2 <- update(model, na.action="na.exclude")
sto_day_trans$FCH4_pred_Ts <- predict(model2, newdata = sto_day_trans)
plot(FCH4_pred_Ts ~ FCH4_sum, data=sto_day_trans)
plot(summary(model)$residuals)

g+geom_line(data=sto_day_trans, mapping=aes(x = Ts_f, y=FCH4_pred_Ts), color="red")


#Trying the multiple linear regression

# model <- gam(FCH4_sum ~ s(FCH4_pred_GPP, k=20) + s(FCH4_pred_Ts, k=20) + s(FCH4_pred_WTD, k=20),
#              data=sto_day_trans)
# summary(model)

model <- glm(FCH4_sum ~ FCH4_pred_GPP + FCH4_pred_Ts + FCH4_pred_WTD,# + PARin_f,
             data=sto_day_trans)
summary(model)

semPaths(model, 'std', layout = 'circle')

# plot(ggeffects::ggpredict(model), facets = TRUE)

#calculate McFadden's R-squared for model
with(summary(model), 1 - deviance/null.deviance)

plot(sto_day_trans$FCH4_sum, predict(update(model, na.action="na.exclude")))
abline(0,1)

plot(sto_day_trans$FCH4_sum)
points(predict(update(model, na.action="na.exclude"), newdata=sto_day_trans), col="red", pch=15, cex=0.5)

cor(sto_day_trans$FCH4_sum, predict(update(model, na.action="na.exclude")), use="complete.obs")

#
library(lavaanPlot)
# path model
model <- 'FCH4_sum ~ FCH4_pred_GPP + FCH4_pred_Ts + FCH4_pred_WTD'


fit1 <- sem(model, data = sto_day_trans)
#labels1 <- list(mpg = "Miles Per Gallon", cyl = "Cylinders", disp = "Displacement", hp = "Horsepower", qsec = "Speed", wt = "Weight") #define labels
lavaanPlot(model = fit1,  coefs = TRUE, stand = TRUE, sig = 0.05) #standardized regression paths, showing only paths with p<= .05










###################################################
#####################INTERACTIONS:::::::::::https://r.qcbs.ca/workshop08/book-en/gam-with-interaction-terms.html?fbclid=IwAR1TH0HOViHpPVvdzbzmYnukYPPdorIyoOYQHovNt2q4jQ4yiPKAAZVSAIk
####################################################


sto_day <- Reduce(function(...) merge(..., all=TRUE), list(sto_aggr_ch4$flux_df_day %>% dplyr::rename(meas_err_ch4 = meas_err, tot_err_ch4 = tot_err),
                                                            sto_aggr_co2$flux_df_day %>% dplyr::rename(meas_err_NEE = meas_err, tot_err_NEE = tot_err),
                                                            sto_aggr_h2o$flux_df_day %>% dplyr::rename(meas_err_h2o = meas_err, tot_err_h2o = tot_err),
                                                            sto_aggr_biomet$day)) %>% mutate(Site="stoero", PARin_f=PARin_f/4.6,  #from umol/m2/s to W/m2
                                                                                              month = month(date)) %>%
  mutate(GPP_sum = ifelse(GPP_sum < 0, 0, GPP_sum),
         FCH4_sum = FCH4_sum/1000) #g instead of mg



sto_day
sto_day_trans <- sto_day %>%
  filter(!is.na(WTD_f)) %>%
  mutate(WTD_f_trans = WTD_f + 50,
         #FCH4_trans = log(FCH4_sum),
         doy = lubridate::yday(date))

#gam models
#Without interactions
fit <- gam(FCH4 ~ s(GPP)+s(Ts_f)+s(WTD_f), data = hals_30min)
summary(fit)
plot(ggeffects::ggpredict(fit), facets = TRUE)

vis.gam(fit, theta = 220, n.grid = 50, lwd = 0.4, type="response")

#With interactions
fit_inter <- gam(FCH4_sum ~ s(GPP_sum, Ts_f)+s(WTD_f), data = deg_day)
summary(fit_inter)
plot(ggeffects::ggpredict(fit_inter), facets = TRUE)

fit_inter <- gam(FCH4_sum ~ s(GPP_sum, WTD_f, Ts_f), data = deg_day)
summary(fit_inter)
plot(ggeffects::ggpredict(fit_inter), facets = TRUE)

plot(fit_inter)


vis.gam(fit_inter, theta = 120, n.grid = 50, lwd = 0.4)
