library(randomForest)
library(caret)
library(dplyr)
library(tidyr)
library(Metrics)
library(tune)
library(ggplot2)

functions <- 'C:/BRAVE/slu/eddy_covariance/myphd/R_codes/COMMON/functions.R'
source(functions)

setwd("C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output")
# fluxes_meteo <- read.table("Halsingfors_2020_12_02_meteo_GF.csv", sep=",", header = T)
halsingfors <- read.table("Halsingfors_period2_2022-04-25_QC_meteo_GF2.csv", sep=",", header = T)
halsingfors$datetime <- as.POSIXct(halsingfors$datetime, format="%Y-%m-%d %H:%M",tz="UTC")
halsingfors$date <-as.Date(halsingfors$datetime)

##########################################################
# 
# fluxes_meteo <- stortjarn_Ta_PARin_SWin_WTDA_WTDB_urot_Pa_SWout_PARout_Ts
#halsingfors <- fuzzy_variables_calculator(halsingfors,datetime = "datetime") #calculates the fuzzy variables of time and seasons

halsingfors <- temporal_calculators(halsingfors,datetime = "datetime")
plot(SWin_f~datetime,data=halsingfors)



# 
# #Let's read the different files (all 4 sites)
# degero <- read.table("D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Degero/Degero_processed/exploring_results/gapf_meteo/Degero_2021_03_09_meteo_GF_for_rf.csv", 
#                      sep=",", header = T) %>%
#   mutate(datetime = as.POSIXct(datetime, format="%Y-%m-%d %H:%M",tz="UTC"))
# 
# halmyran <- read.table("D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Halmyran/halmyran_processed/exploring_results/gapf_meteo/Halmyran_2021_02_05_meteo_GF_for_rf.csv", 
#                        sep=",", header = T) %>%
#   mutate(datetime = as.POSIXct(datetime, format="%Y-%m-%d %H:%M",tz="UTC"))
# 
# halsingfors <- read.table("D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Halsingfors/pre_processed/exploring_results/FINAL_RUNS/gapf_meteo/Halsingfors_2021_02_26_meteo_GF_for_rf.csv", 
#                           sep=",", header = T) %>%
#   mutate(datetime = as.POSIXct(datetime, format="%Y-%m-%d %H:%M",tz="UTC"))
# 
# stortjarn <- read.table("D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Stortjarn/pre_processed/exploring_results/gapf_meteo/Stortjarn_2021_02_05_meteo_GF_for_rf.csv", 
#                         sep=",", header = T) %>%
#   mutate(datetime = as.POSIXct(datetime, format="%Y-%m-%d %H:%M",tz="UTC"))
# 


#Let's create a common vector of predictor variables, to be passed as an argument to our function. This can be changed when reusing the function
#vec_var <- c("Ta_f","Ts_f","WTD_f","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f","u_rot_f","winter","spring","summer","autumn","morning","afternoon","evening","night")
# vec_var <- c("Ta_f","Ts_f","WTD_smooth","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f","winter","spring","summer","autumn","morning","afternoon","evening","night")

vec_var <- c("Ta_f","Ts_f","WTD_smooth","Pa_f","PARin_f","PARout_f","RH_f","VPD_f","P_f","yearly_sin","yearly_cos","delta")


hals_sel_compl <- halsingfors[,c("datetime",vec_var)]

halsingfors <- halsingfors[which(halsingfors$datetime <= as.POSIXct("2022-04-03 23:30:00", format="%Y-%m-%d %H:%M:%S", tz="UTC")),]
hals_sel_compl <- halsingfors[,c("datetime",vec_var)]
nrow(hals_sel_compl[complete.cases(hals_sel_compl),])
nrow(halsingfors)
####Let's write a function that can be reused for the 4 sites
rf_gapfiller <- function(site_df, #The dataframe containing all the flux data and predictor columns. This dataframe may contain several additional columns, reason why it is important to subset...
                         datetime="datetime", #the name of the date & time column! Though I use the same for all sites, setting it as an argument will allow to use the function easily with datasets with different names!
                         flux_col="ch4_flux_final", #The name of the flux column to gapfill
                         preds= vec_var, #a vector of predictor variables, with default the previous vector created
                         max_mtry = ceiling(max(sqrt(length(preds)), length(preds)/3)), #This is for trying values of mtry up to the max of either 
                         #sqrt of the number of predictors, or the 1/3rd of the number of predictors
                         sitename #This variable is simply for annotating the plots with the site name.
){
  
  #Let's create a list to save all that is needed to be returned by the function
  output_list <- list()
  
  #Now let's extract only the necessary columns, and make sure there are no missing values. Normally there shouldn't be as I performed a gapfilling of predictors separately!
  df <- na.omit(site_df[,c(datetime,flux_col,preds)])
  
  #Let's train the random forest, in the first step just for a proper tunning to get an optimal mtry value!
  #After that, we'll redo the crossvalidation & training & predictions manually since I would like to save the predictions of
  #each hold-out set during the training, for making plots of the predictive ability of the random forest.
  tc <- trainControl(method = "cv", number = 10, savePredictions = TRUE)
  
  formula <- paste(flux_col, "~" , paste(preds, collapse = " + ")) #this will create the string formula used in the random forest
  
  m <- train(as.formula(formula),
             data = df,
             trControl = tc,
             method = "rf",
             tuneGrid = expand.grid(mtry=1:max_mtry)) #this is for finding the best mtry value to use
  
  
  ########################################
  ##From the previous, we can retrieve the optimal mtry value!
  ##Now, let's write a personalized cross validation code to be able to plot the hold-out set predictions of the cross-validation process.
  
  #let's create the 10 folds, and collect their indices
  #Before that, I will reset the row indices of df, since I will not link it back the full site_df dataframe.
  #The resetting of row indices is because when I selected relevant columns and used na.omit earlier, the row indices are kept from the original dataframe  
  rownames(df) <- NULL
  df$rowindex <- as.numeric(rownames(df))
  cv_folds <- createFolds(df$rowindex, k = 10, list = FALSE, returnTrain = F)
  
  #Now let's put the folds indices into a column named folds in the dataframe df
  df$folds <- cv_folds
  
  #Now, we can loop through the previous indices and create a random forest on train set and predict the test set...
  df$ch4_predicted <- NA
  for (fold in unique(df$folds)){
    
    #Let's train the random forest on all BUT the current fold
    rf <- randomForest(
      as.formula(formula), #this is the same formula as before (when I used caret for the tuning of mtry hyperparameter)
      data=df %>% filter(folds!=fold), #Since this is the training, I exclude the current fold
      mtry=m$bestTune$mtry, #this is the best tuning during the caret crossvalidation
      type="regression"
    )
    
    #Let's test the previous rf on the current fold, and write it to the column ch4_predicted in df
    
    df$ch4_predicted[df$folds==fold] <- predict(rf, newdata = df[df$folds==fold,])
    
  }
  
  
  #Let's calculate the out of sample metrics for the plot
  r_sq <- cor(df$ch4_predicted,df[,flux_col])^2
  #r_sq
  rmse <- Metrics::rmse(df$ch4_predicted,df[,flux_col])
  #rmse
  
  
  
  ####NOW, let's fill the gaps. We have 2 options, either use directly the model produced using caret,
  #or fit a personalized model with the full dataset, but the result should be the same/very similar. I will fit it myself
  
  rf_final <- randomForest(
    as.formula(formula), #this is the same formula as before
    data=df,             #Here we use the full set
    mtry=m$bestTune$mtry, #this is the best tuning during the caret crossvalidation
    type="regression"
  )
  
  site_df$predicted <- predict(rf_final, newdata = site_df)#this predicts for missing and non-missing values alike, 
  #and we can now take the values for filling the gaps
  
  #If the original flux data is available, we take that one for the new column. If instead it is missing, we use the predicted
  #Also, let's create a column for storing the quality (original, vs. gapfilled)
  #The logic here is that the new column will take measured values when they exist, and when they don't, use the predicted values to fill the gap!
  #We'll also add a quality column that makes it easy to know wether a value in the new column is original or gapfilled data.
  flux_col_var <- rlang::sym(flux_col)
  site_df <- site_df %>% mutate(ch4_flux_final_filled = ifelse(!is.na(!!flux_col_var),!!flux_col_var,predicted),
                                quality = ifelse(!is.na(!!flux_col_var),"original","gapfilled"))
  
  ######
  #Let's save the relevant objects
  output_list$tuningmodel <- m
  
  output_list$finalmodel <- rf_final
  
  output_list$site_df <- site_df
  
  output_list$r_sq_cv <- round(r_sq,2)
  
  output_list$rmse_cv <- round(rmse,6)
  
  ######
  #Let's make some plots
  
  output_list$pred_meas <- ggplot(data=df, aes_string(x=flux_col,y="ch4_predicted"))+
    geom_point(size=0.3)+
    theme_bw()+
    geom_abline(slope=1,intercept = 0, color="red")+
    xlab("Obs. CH4 (mg.m-2.30min-1)")+
    ylab("Pred. CH4 (mg.m-2.30min-1)")+
    annotate(geom="text", label=paste(sitename,", ", "rÂ²=", round(r_sq,2), "\n", "rmse=",round(rmse,5), sep=""), 
             x=-Inf,y=Inf, hjust = 0, vjust = 1, color="red") +
    theme(panel.border = element_rect(fill=NA,colour="black",size=1.5)) +
    coord_obs_pred()
  
  
  
  output_list$gf_meas_time <- ggplot(data=output_list$site_df, aes_string(x=datetime,y="ch4_flux_final_filled",color="quality"))+
    geom_point(size=0.3)+
    theme_classic()+
    scale_color_manual(values=c("red", "black"))+
    geom_abline(slope=1,intercept = 0, color="red")+
    xlab("Datetime")+
    ylab("CH4 (mg.m-2.30min-1)")+
    ylim(-0.005,quantile(site_df[,"ch4_flux_final_filled"], 0.999))+
    scale_x_datetime(breaks="1 month", date_labels ="%b")+
    annotate(geom="text", label=sitename, 
             x=min(site_df[,datetime]),y=Inf, hjust = 0, vjust = 1, color="red")+
    theme(legend.position = c(0.9,0.8), panel.border = element_rect(fill=NA,colour="black",size=1.5))
  
  return(output_list) #Now we can return everything needed for use outside the function
  
}

#########################################################################################################################
#Let's use now the function on the dataframes of the different sites
# degero_filled_list <- rf_gapfiller(site_df=degero,
#                                    sitename="DegerÃ¶")
# 
# halmyran_filled_list <- rf_gapfiller(site_df=halmyran,
#                                      sitename="Halmyran")

halsingfors_filled_list <- rf_gapfiller(site_df=halsingfors,
                                        sitename="Halsingfors")

# stortjarn_filled_list <- rf_gapfiller(site_df=stortjarn,
#                                       sitename="StortjÃ¤rn")

############################CHECKING THAT EVERYTHING WENT OKAY, plotting graphs from the list saved as output of the function
# #Degero
# ggplot(degero_filled_list$tuningmodel)+theme_bw()
# ggsave("D:/graphs/stat_degero_mtry.png",width = 140, height = 100, unit="mm")
# degero_filled_list$tuningmodel$bestTune
# degero_filled_list$finalmodel
# degero_filled_list$pred_meas
# ggsave("D:/graphs/stat_degero_pread_meas.png",width = 100, height = 100, unit="mm")
# degero_filled_list$gf_meas_time
# ggsave("D:/graphs/stat_degero_gf_meas_time.png",width = 140, height = 100, unit="mm")
# 
# #halmyran
# ggplot(halmyran_filled_list$tuningmodel)+theme_bw()
# ggsave("D:/graphs/stat_halmyran_mtry.png",width = 140, height = 100, unit="mm")
# halmyran_filled_list$tuningmodel$bestTune
# halmyran_filled_list$finalmodel
# halmyran_filled_list$pred_meas
# ggsave("D:/graphs/stat_halmyran_pread_meas.png",width = 100, height = 100, unit="mm")
# halmyran_filled_list$gf_meas_time
# ggsave("D:/graphs/stat_halmyran_gf_meas_time.png",width = 140, height = 100, unit="mm")
# 
# #stortjarn
# ggplot(stortjarn_filled_list$tuningmodel)+theme_bw()
# ggsave("D:/graphs/stat_stortjarn_mtry.png",width = 140, height = 100, unit="mm")
# stortjarn_filled_list$tuningmodel$bestTune
# stortjarn_filled_list$finalmodel
# stortjarn_filled_list$pred_meas
# ggsave("D:/graphs/stat_stortjarn_pread_meas.png",width = 100, height = 100, unit="mm")
# stortjarn_filled_list$gf_meas_time
# ggsave("D:/graphs/stat_stortjarn_gf_meas_time.png",width = 140, height = 100, unit="mm")

#halsingfors
ggplot(halsingfors_filled_list$tuningmodel)+theme_bw()
ggsave("C:/BRAVE/slu/eddy_covariance/myphd/R_codes/halsingfors_for_Marcus/new_flow/plots/stat_halsingfors_mtry.png",width = 140, height = 100, unit="mm")
halsingfors_filled_list$tuningmodel$bestTune
halsingfors_filled_list$finalmodel
halsingfors_filled_list$pred_meas
ggsave("C:/BRAVE/slu/eddy_covariance/myphd/R_codes/halsingfors_for_Marcus/new_flow/plots/stat_halsingfors_pread_meas.png",width = 100, height = 100, unit="mm")
halsingfors_filled_list$gf_meas_time
ggsave("C:/BRAVE/slu/eddy_covariance/myphd/R_codes/halsingfors_for_Marcus/new_flow/plots/stat_halsingfors_gf_meas_time.png",width = 140, height = 100, unit="mm")


saveRDS(halsingfors_filled_list, file="C:/BRAVE/slu/eddy_covariance/myphd/R_codes/halsingfors_for_Marcus/new_flow/model/random_forest_list.RData")

#read later with:
#halsingfors_filled_list <- readRDS("C:/BRAVE/slu/eddy_covariance/myphd/R_codes/halsingfors_for_Marcus/new_flow/model/random_forest_list.RData")



#Saving all dataframes

#write.table(degero_filled_list$site_df, "D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Degero/Degero_processed/exploring_results/gapf_meteo/Degero_2021_03_09_fluxes_GF_2.csv", sep=",",row.names = F)

#write.table(halmyran_filled_list$site_df, "D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Halmyran/halmyran_processed/exploring_results/gapf_meteo/Halmyran_2021_02_05_fluxes_GF_2.csv", sep=",", row.names = F)

#write.table(stortjarn_filled_list$site_df, "D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Stortjarn/pre_processed/exploring_results/gapf_meteo/Stortjarn_2021_02_05_fluxes_GF_2.csv", sep=",", row.names = F)

View(halsingfors_filled_list$site_df)
write.table(halsingfors_filled_list$site_df, "C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25_QC_meteo_CH4_GF3.csv", sep=",", row.names = F)





