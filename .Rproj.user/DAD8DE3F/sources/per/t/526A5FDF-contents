#Calling the necessary function gapfill_between_sites
functions <- 'C:/BRAVE/slu/eddy_covariance/myphd/R_codes/COMMON/functions.R'
source(functions)
library(zoo)
library(ggplot2)
library(plotly)
library(data.table)

#For all sites except Halsingfors, we will only use met files
#Halmyran

halmyran <- read.table("C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halmyran/Biomet_merged/halm_met.csv", sep=",", header = T)
halmyran$datetime <- as.POSIXct(halmyran$datetime, format="%Y-%m-%d %H:%M",tz="UTC")
halmyran[halmyran == -9999] <- NA

halmyran

#Stortjarn
stortjarn <- read.table("C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Stortjarn/Biomet_merged/sto_met.csv", sep=",", header = T)
stortjarn$datetime <- as.POSIXct(stortjarn$datetime, format="%Y-%m-%d %H:%M",tz="UTC")
stortjarn[stortjarn == -9999] <- NA

#Degero
degero <- read.table("C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Degero/Biomet_merged/deg_met.csv", sep=",", header = T)
degero$datetime <- as.POSIXct(degero$datetime, format="%Y-%m-%d %H:%M",tz="UTC")
degero[degero == -9999] <- NA

deg_wtd_ts <- read.table("C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Degero/Soil_temp_wtd_merged/TS_WTD_merged_ALL.csv", sep=",", header = T)
deg_wtd_ts$datetime <- as.POSIXct(deg_wtd_ts$datetime, format="%Y-%m-%d %H:%M",tz="UTC")
deg_wtd_ts[deg_wtd_ts == -9999] <- NA

degero <- merge(degero, deg_wtd_ts, by="datetime", all=TRUE)


#Halsingfors (here we will use the QC EC data which has already been merged with meteo files)
halsingfors <- read.table("C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25_QC_meteo.csv", sep=",", header  = T)
halsingfors$datetime <- as.POSIXct(halsingfors$datetime, format="%Y-%m-%d %H:%M",tz="UTC")
halsingfors[halsingfors == -9999] <- NA


##################Averaging Ts at the different depths , and using Ts3 as the variable Ts
plot(Ts1_a~datetime, data=halmyran)
plot(Ts1_b~datetime, data=halmyran)
halmyran$Ts1 <- halmyran$Ts1_a
halmyran$Ts1[which(halmyran$Ts1 < -2)] <- NA
plot(Ts1~datetime, data=halmyran)

plot(Ts2_a~datetime, data=halmyran)
plot(Ts2_b~datetime, data=halmyran)
halmyran$Ts2_b[which(halmyran$Ts2_b < -10)] <- NA
halmyran$Ts2 <- rowMeans(halmyran[,c("Ts2_a","Ts2_b")],na.rm = TRUE)
#halmyran$Ts2[which(halmyran$Ts2 < -2)] <- NA
plot(Ts2~datetime, data=halmyran)

plot(Ts3_a~datetime, data=halmyran)
plot(Ts3_b~datetime, data=halmyran)
halmyran$Ts3_a[which(halmyran$Ts3_a < -10)] <- NA
halmyran$Ts3 <- rowMeans(halmyran[,c("Ts3_a","Ts3_b")],na.rm = TRUE)
#halmyran$Ts3[which(halmyran$Ts3 < -2)] <- NA
plot(Ts3~datetime, data=halmyran)

plot(Ts4_a~datetime, data=halmyran)
plot(Ts4_b~datetime, data=halmyran)
halmyran$Ts4 <- rowMeans(halmyran[,c("Ts4_a","Ts4_b")],na.rm = TRUE)
#halmyran$Ts4[which(halmyran$Ts4 < -2)] <- NA
plot(Ts4~datetime, data=halmyran)

plot(Ts5_a~datetime, data=halmyran)
plot(Ts5_b~datetime, data=halmyran)
# halmyran$Ts5 <- rowMeans(halmyran[,c("Ts5_a","Ts5_b")],na.rm = TRUE)

halmyran$Ts5_b[which(halmyran$datetime> as.POSIXct("2021-06-11 00:00:00", format="%Y-%m-%d %H:%M",tz="UTC"))] <- NA
halmyran$Ts5 <- halmyran$Ts5_b
# halmyran$Ts5[which(halmyran$Ts5 < -2)] <- NA
plot(Ts5~datetime, data=halmyran)

halmyran$Ts <- halmyran$Ts3




plot(Ts1_a~datetime, data=stortjarn)
plot(Ts1_b~datetime, data=stortjarn)
stortjarn$Ts1 <- rowMeans(stortjarn[,c("Ts1_a","Ts1_b")],na.rm = TRUE)
# stortjarn$Ts1 <- stortjarn$Ts1_a
# stortjarn$Ts1[which(stortjarn$Ts1 < -2)] <- NA
plot(Ts1~datetime, data=stortjarn)

plot(Ts2_a~datetime, data=stortjarn)
plot(Ts2_b~datetime, data=stortjarn)
stortjarn$Ts2 <- stortjarn$Ts2_b
# stortjarn$Ts2_b[which(stortjarn$Ts2_b < -10)] <- NA
# stortjarn$Ts2 <- rowMeans(stortjarn[,c("Ts2_a","Ts2_b")],na.rm = TRUE)
#stortjarn$Ts2[which(stortjarn$Ts2 < -2)] <- NA
plot(Ts2~datetime, data=stortjarn)

plot(Ts3_a~datetime, data=stortjarn)
plot(Ts3_b~datetime, data=stortjarn)
# stortjarn$Ts3_a[which(stortjarn$Ts3_a < -10)] <- NA
stortjarn$Ts3 <- rowMeans(stortjarn[,c("Ts3_a","Ts3_b")],na.rm = TRUE)
#stortjarn$Ts3[which(stortjarn$Ts3 < -2)] <- NA
plot(Ts3~datetime, data=stortjarn)

plot(Ts4_a~datetime, data=stortjarn)
plot(Ts4_b~datetime, data=stortjarn)
stortjarn$Ts4 <- rowMeans(stortjarn[,c("Ts4_a","Ts4_b")],na.rm = TRUE)
#stortjarn$Ts4[which(stortjarn$Ts4 < -2)] <- NA
plot(Ts4~datetime, data=stortjarn)

# plot(Ts5_a~datetime, data=stortjarn)
# plot(Ts5_b~datetime, data=stortjarn)
# stortjarn$Ts5_a[which(stortjarn$Ts5_a > 30)] <- NA
# # stortjarn$Ts5 <- rowMeans(stortjarn[,c("Ts5_a","Ts5_b")],na.rm = TRUE)
# stortjarn$Ts5_b[which(stortjarn$datetime> as.POSIXct("2021-06-11 00:00:00", format="%Y-%m-%d %H:%M",tz="UTC"))] <- NA
# # stortjarn$Ts5[which(stortjarn$Ts5 < -2)] <- NA
# plot(Ts5~datetime, data=stortjarn)

stortjarn$Ts <- stortjarn$Ts3





plot(Ts1~datetime, data=degero)
plot(Ts2~datetime, data=degero)
plot(Ts3~datetime, data=degero)
plot(Ts4~datetime, data=degero)
plot(Ts5~datetime, data=degero)

plot(WTD1~datetime, data=degero)
plot(WTD2~datetime, data=degero)
plot(WTD3~datetime, data=degero)
plot(WTD4~datetime, data=degero)

degero$Ts <- degero$Ts3


############Looking again at all other relevant meteo variables
###################################################
###################################################

#Halmyran
plot(Ta~datetime,data=halmyran)
plot(Ts~datetime,data=halmyran)
plot(PARin~datetime,data=halmyran)
plot(SWin~datetime,data=halmyran)
halmyran$SWin[which(halmyran$SWin < 0)] <- 0
plot(SWin~datetime,data=halmyran)
plot(WTD1_a~datetime,data=halmyran)
plot(WTD1_b~datetime,data=halmyran)

# plot(u_rot~datetime,data=halmyran)
# halmyran$u_rot[which(halmyran$u_rot > 7)] <- NA
# plot(u_rot~datetime,data=halmyran)
plot(Pa~datetime,data=halmyran)
halmyran$Pa[which(halmyran$Pa < 890)] <- NA
plot(Pa~datetime,data=halmyran)
plot(SWout~datetime,data=halmyran)
halmyran$SWout[which(halmyran$SWout < 0)] <- 0
plot(PARout~datetime,data=halmyran)
names(halmyran)[which(names(halmyran)=="RH.y")] <- "RH"
plot(RH~datetime, data=halmyran)

# halmyran$VPD_EC <- halmyran$VPD
# halmyran$VPD <- NA
# halmyran$VPD <- VPD_calculator(halmyran$Ta,halmyran$RH.y)
# plot(VPD~datetime, data=halmyran)

#Stortjarn

plot(Ta~datetime,data=stortjarn)
#stortjarn$Ta[which(stortjarn$Ta < -20)] <- NA
#plot(Ta~datetime,data=stortjarn)
plot(Ts~datetime,data=stortjarn)
#stortjarn$Ts[which(stortjarn$Ts < -20)] <- NA
#plot(Ts~datetime,data=stortjarn)
plot(PARin~datetime,data=stortjarn)
stortjarn$PARin[which(stortjarn$PARin < - 5)] <- NA
plot(PARin~datetime,data=stortjarn)

plot(SWin~datetime,data=stortjarn)
stortjarn$SWin[which(stortjarn$SWin < 0)] <- 0
plot(WTD1_a~datetime,data=stortjarn)
plot(WTD1_b~datetime,data=stortjarn)
# plot(u_rot~datetime,data=stortjarn)
# stortjarn$u_rot[which(stortjarn$u_rot > 10)] <- NA
# plot(u_rot~datetime,data=stortjarn)
plot(Pa~datetime,data=stortjarn)
stortjarn$Pa[which(stortjarn$Pa < 900 | stortjarn$Pa > 1040)] <- NA
plot(Pa~datetime,data=stortjarn)

plot(SWout~datetime,data=stortjarn)
stortjarn$SWout[which(stortjarn$SWout < 0)] <- 0
plot(PARout~datetime,data=stortjarn)
stortjarn$PARout[which(stortjarn$PARout < 0)] <- 0
plot(PARout~datetime,data=stortjarn)

names(stortjarn)[names(stortjarn)=="RH.y"] <- "RH"
plot(RH~datetime, data=stortjarn)

# stortjarn$VPD_EC <- stortjarn$VPD
# stortjarn$VPD <- NA
# stortjarn$VPD <- VPD_calculator(stortjarn$Ta,stortjarn$RH.y)
# plot(VPD~datetime, data=stortjarn)

#Halsingfors
halsingfors$air_temperature <- halsingfors$air_temperature -273.15 
plot(air_temperature~datetime,data=halsingfors)
halsingfors$air_temperature[which(halsingfors$air_temperature < -30)] <- NA
halsingfors$air_temperature[which(halsingfors$air_temperature < -10 &
                                    halsingfors$month >= 5 & halsingfors$month <= 10)] <- NA
plot(air_temperature~datetime,data=halsingfors)
plot(Ta~datetime,data=halsingfors)
halsingfors$Ta[which(halsingfors$Ta < -25)] <- NA
halsingfors$Ta[which(halsingfors$Ta < -10 &
                       halsingfors$month >= 5 & halsingfors$month <= 10)] <- NA

plot(Ta~datetime,data=halsingfors)
#Removing data between 2020-07-25 and 2020-08-01 for air temperature at Hälsingfors due to some
#problems of lower temperatures than normal.
# halsingfors$Ta[which(as.Date(halsingfors$datetime) >= as.Date("2020-07-25") &
#                        as.Date(halsingfors$datetime) <= as.Date("2020-08-01"))] <- NA

plot(Ta~datetime,data=halsingfors)

plot(Ts~datetime,data=halsingfors)
#halsingfors$Ts[which(halsingfors$Ts < -2000)] <- NA
# ggplotly(ggplot(data=halsingfors, aes(datetime,Ts))+geom_point())

pb_datetimes <- c("2020-08-12 11:00:00", "2021-08-11 23:00:00","2021-08-11 23:30:00", "2021-08-15 07:30:00",
                  "2021-08-12 00:00:00", "2021-08-12 00:30:00", "2021-08-12 01:30:00", "2021-09-17 05:30:00",
                  "2021-09-17 04:30:00", "2021-11-04 07:30:00")

halsingfors$Ts[which(halsingfors$datetime %in% as.POSIXct(pb_datetimes, format="%Y-%m-%d %H:%M",tz="UTC"))] <- NA
plot(Ts~datetime,data=halsingfors)

plot(PARin~datetime,data=halsingfors)
halsingfors$PARin[which(halsingfors$PARin < 0)] <- 0
plot(SWin~datetime,data=halsingfors)
halsingfors$SWin[which(halsingfors$SWin < 0)] <- 0

plot(WTD~datetime,data=halsingfors) 
# halsingfors$WTD <- halsingfors$WTD_1 #We will only use WTD_1 as WTD because WTD_2 is not good data in 2020
plot(WTD~datetime,data=halsingfors)
#let's create a gap for hälsingfors WTD to be filled later
library(ggplot2);library(plotly)
ggplotly(ggplot(data=halsingfors,aes(x=datetime,y=WTD))+
           geom_point()+
           theme_bw())
halsingfors$WTD[which(halsingfors$date>=as.Date("2020-10-13") &
                        halsingfors$date<=as.Date("2020-11-10"))] <- NA

plot(WTD~datetime,data=halsingfors)

plot(u_rot~datetime,data=halsingfors)
halsingfors$u_rot[which(halsingfors$u_rot > 9)] <- NA
plot(u_rot~datetime,data=halsingfors)

plot(Pa~datetime,data=halsingfors)
halsingfors$Pa[which(halsingfors$Pa<850)] <- NA
halsingfors$Pa[which(halsingfors$date>=as.Date("2020-06-01") &
                       halsingfors$date<=as.Date("2020-07-01") &
                       halsingfors$Pa<940)] <- NA

plot(Pa~datetime,data=halsingfors)

plot(SWout~datetime,data=halsingfors)
halsingfors$SWout[which(halsingfors$SWout < 0)] <- 0
plot(SWout~datetime,data=halsingfors)
plot(PARout~datetime,data=halsingfors)
halsingfors$PARout[which(halsingfors$PARout < 0)] <- 0
plot(PARin~datetime,data=halsingfors)


names(halsingfors)[names(halsingfors)=="RH.y"] <- "RH"
plot(RH~datetime, data=halsingfors)
halsingfors$RH[which(halsingfors$RH<20)] <- NA

plot(RH~datetime, data=halsingfors)
abline(v=as.POSIXct("2020-07-13"))
abline(v=as.POSIXct("2020-08-05"))
abline(h=43)

#halsingfors$RH[which(halsingfors$datetime > as.POSIXct("2020-07-13") & halsingfors$datetime < as.POSIXct("2020-08-05") & halsingfors$RH < 43)] <- NA
plot(RH~datetime, data=halsingfors)

plot(RH~datetime, data=halsingfors)
abline(v=as.POSIXct("2020-11-01"))
abline(v=as.POSIXct("2020-11-15"))
abline(h=76)
#halsingfors$RH[which(halsingfors$datetime > as.POSIXct("2020-11-01") & halsingfors$datetime < as.POSIXct("2020-11-15") & halsingfors$RH < 76)] <- NA
# plot(RH~datetime, data=halsingfors)

#Degero
# degero$air_temperature <- degero$air_temperature -273.15 
# plot(air_temperature~datetime,data=degero)
plot(Ta~datetime,data=degero)
plot(Ts~datetime,data=degero) #It looks like I used Ta as Ts
plot(PARin~datetime,data=degero)
plot(SWin~datetime,data=degero)
degero$SWin[which(degero$SWin < 0)] <- 0
# plot(WTD~datetime,data=degero)
#plot(u_rot~datetime,data=degero)
#degero$u_rot[which(degero$u_rot > 10)] <- NA
#plot(u_rot~datetime,data=degero)

plot(Pa~datetime,data=degero)
plot(SWout~datetime,data=degero)
degero$SWout[which(degero$SWout < 0)] <- 0
plot(PARout~datetime,data=degero)
degero$PARout[which(degero$PARout < 0)] <- 0

plot(WTD1~datetime,data=degero)
plot(WTD2~datetime,data=degero)
plot(WTD3~datetime,data=degero)
plot(WTD4~datetime,data=degero)

names(degero)[names(degero)=="RH.y"] <- "RH"
plot(RH~datetime, data=degero)
#halmyran_Ta_PARin_SWin_WTDA_WTDB_urot_Pa_SWout_PARout_Ts 

















# 
# setwd("D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Halsingfors/pre_processed/exploring_results/FINAL_RUNS")
# halsingfors <- read.table("fluxes_halsingfors_2021_02_26_corr.csv", sep=",", header = T)
# # names(halsingfors)[names(halsingfors)=="date.x"] <- "date"
# halsingfors$date <-as.Date(halsingfors$date)
# halsingfors$datetime <- as.POSIXct(halsingfors$datetime, format="%Y-%m-%d %H:%M",tz="UTC")
# halsingfors[halsingfors == -9999] <- NA
# halsingfors[halsingfors == -999900] <- NA
# # halsingfors$VPD[which(halsingfors$VPD < -1000)] <- NA

##################################################################################
################################FILLING HALSINGFGORS##################################
length(halsingfors$Ta[which(is.na(halsingfors$Ta))])
halsingfors_Ta <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors, 
                                        ind_df1=stortjarn, ind_df2=halmyran,
                                        ind_df3=degero, col_to_fill="Ta",#ind_col1=col_to_fill,
                                        ind_col2="Ts")
plot(Ta_f~datetime, data=halsingfors_Ta)
plot(air_temperature~datetime, data=halsingfors_Ta)

length(halsingfors_Ta$PARin[which(is.na(halsingfors_Ta$PARin))])
plot(PARin~datetime, data=halsingfors_Ta)
#halsingfors_Ta$PARin[which(halsingfors_Ta$PARin<0)] <- 0
halsingfors_Ta_PARin <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta, 
                                              ind_df1=stortjarn, ind_df2=halmyran,
                                              ind_df3=degero, col_to_fill="PARin",#ind_col1=col_to_fill,
                                              ind_col2="SWin")

plot(PARin_f~datetime, data=halsingfors_Ta_PARin)
length(halsingfors_Ta_PARin$SWin[which(is.na(halsingfors_Ta_PARin$SWin))])
plot(SWin~datetime, data=halsingfors_Ta_PARin)
#halsingfors_Ta_PARin$SWin[which(halsingfors_Ta_PARin$SWin<0)] <- 0
halsingfors_Ta_PARin_SWin <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin, 
                                                   ind_df1=stortjarn, ind_df2=halmyran,
                                                   ind_df3=degero, col_to_fill="SWin",#ind_col1=col_to_fill,
                                                   ind_col2="PARin")

plot(SWin_f~datetime, data=halsingfors_Ta_PARin_SWin)

length(halsingfors_Ta_PARin_SWin$WTD[which(is.na(halsingfors_Ta_PARin_SWin$WTD))])
# halsingfors_Ta_PARin_SWin_WTD <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin_SWin, 
#                                                        ind_df1=halmyran, ind_df2=NULL,
#                                                        ind_df3=NULL, col_to_fill="WTD",#ind_col1=col_to_fill,
#                                                        ind_col2=NULL)

halsingfors_Ta_PARin_SWin_WTD <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin_SWin, 
                                                       ind_df1=degero, ind_df2=NULL,
                                                       ind_df3=NULL, col_to_fill="WTD",ind_col1="WTD1",#ind_col1=col_to_fill,
                                                       ind_col2="WTD4")

# 
# halsingfors_Ta_PARin_SWin_WTD2 <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin_SWin_WTD, 
#                                                        ind_df1=halmyran, ind_df2=stortjarn,
#                                                        ind_df3=NULL, col_to_fill="WTD_f",ind_col1="WTD1_a",#ind_col1=col_to_fill,
#                                                        ind_col2="WTD1_b")



plot(WTD_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD)
length(halsingfors_Ta_PARin_SWin_WTD$WTD_f[which(is.na(halsingfors_Ta_PARin_SWin_WTD$WTD_f))])

# plot(WTD_f_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD2)
# plotly::ggplotly(ggplot2::ggplot(data=halsingfors_Ta_PARin_SWin_WTD, aes(x=datetime,y=WTD_f))+
#                                    geom_point())

# halsingfors_Ta_PARin_SWin_WTD[which(halsingfors_Ta_PARin_SWin_WTD$datetime %in%
#                                       as.POSIXct(c("2020-08-12 10:30:00","2020-08-12 11:30:00"), tz="UTC")),"WTD_f"] <- NA

#filtering the ending part out, in order to be able to na.approx the isolated missing values...

halsingfors_Ta_PARin_SWin_WTD <- halsingfors_Ta_PARin_SWin_WTD[which(halsingfors_Ta_PARin_SWin_WTD$datetime <= as.POSIXct("2022-04-03 23:30:00", format="%Y-%m-%d %H:%M",tz="UTC")),]
halsingfors_Ta_PARin_SWin_WTD$WTD_f <- na.approx(halsingfors_Ta_PARin_SWin_WTD$WTD_f) # this is just because there were few NA remaining
plot(WTD_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD)
length(halsingfors_Ta_PARin_SWin_WTD$WTD_f[which(is.na(halsingfors_Ta_PARin_SWin_WTD$WTD_f))])

# halsingfors_Ta_PARin_SWin_WTDA_WTDB <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin_SWin_WTDA, 
#                                                            ind_df1=stortjarn, ind_df2=halmyran,
#                                                            ind_df3=NULL, col_to_fill="WTD_B",#ind_col1=col_to_fill,
#                                                            ind_col2="WTD_A")

length(halsingfors_Ta_PARin_SWin_WTD$u_rot[which(is.na(halsingfors_Ta_PARin_SWin_WTD$u_rot))])
# 
# halsingfors_Ta_PARin_SWin_WTD_urot <- halsingfors_Ta_PARin_SWin_WTD

# start <- as.numeric(first_last_NA_pos(halsingfors_Ta_PARin_SWin_WTD_urot$u_rot)["min"])
# end <- as.numeric(first_last_NA_pos(halsingfors_Ta_PARin_SWin_WTD_urot$u_rot)["max"])
# total <- nrow(halsingfors_Ta_PARin_SWin_WTD_urot)
# 
# halsingfors_Ta_PARin_SWin_WTD_urot$u_rot_f <- c(rep(NA,start-1), na.approx(halsingfors_Ta_PARin_SWin_WTD$u_rot), c(rep(NA,total-end)))
# 
# plot(u_rot_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot)

halsingfors_Ta_PARin_SWin_WTD_urot <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin_SWin_WTD, 
                                                            ind_df1=stortjarn, ind_df2=halmyran,
                                                            ind_df3=degero, col_to_fill="u_rot",#ind_col1=col_to_fill,
                                                            ind_col2="Pa")

plot(u_rot_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot)

halsingfors_Ta_PARin_SWin_WTD_urot$u_rot_f <- na.approx(halsingfors_Ta_PARin_SWin_WTD_urot$u_rot_f) # this is just because there were few NA remaining

length(halsingfors_Ta_PARin_SWin_WTD_urot$u_rot_f[which(is.na(halsingfors_Ta_PARin_SWin_WTD_urot$u_rot_f))])


length(halsingfors_Ta_PARin_SWin_WTD_urot$Pa[which(is.na(halsingfors_Ta_PARin_SWin_WTD_urot$Pa))])
halsingfors_Ta_PARin_SWin_WTD_urot_Pa <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin_SWin_WTD_urot, 
                                                               ind_df1=stortjarn, ind_df2=halmyran,
                                                               ind_df3=degero, col_to_fill="Pa",#ind_col1=col_to_fill,
                                                               ind_col2="Ta")

plot(Pa_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot_Pa)

length(halsingfors_Ta_PARin_SWin_WTD_urot_Pa$SWout[which(is.na(halsingfors_Ta_PARin_SWin_WTD_urot_Pa$SWout))])
halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin_SWin_WTD_urot_Pa, 
                                                                     ind_df1=stortjarn, ind_df2=halmyran,
                                                                     ind_df3=degero, col_to_fill="SWout",#ind_col1=col_to_fill,
                                                                     ind_col2="SWin")

plot(SWout_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout)

halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout, 
                                                                            ind_df1=stortjarn, ind_df2=halmyran,
                                                                            ind_df3=degero, col_to_fill="PARout",#ind_col1=col_to_fill,
                                                                            ind_col2="PARin")
plot(PARout_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout)

halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout, 
                                                                               ind_df1=stortjarn, ind_df2=halmyran,
                                                                               ind_df3=degero, col_to_fill="Ts",#ind_col1=col_to_fill,
                                                                               ind_col2="Ta")



plot(Ts_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts)


plot(RH~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts)
length(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts$RH[which(is.na(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts$RH))])
halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts, 
                                                                                  ind_df1=stortjarn, ind_df2=halmyran,
                                                                                  ind_df3=degero, col_to_fill="RH",#ind_col1=col_to_fill,
                                                                                  ind_col2="Ta")
plot(RH_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH)



####################################################
#############################

##################################
##Calculating VPD from gapfilled RH and Ta

halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD <- halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH
#halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$VPD_EC <- halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$VPD
halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$VPD <- NA
halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$VPD <- VPD_calculator(
  halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$Ta_f, 
  halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$RH_f)
names(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD)[names(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD)=="VPD"] <- "VPD_f"

plot(VPD_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD)


#checking for duplicates
n_occur <- data.frame(table(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$datetime))
n_occur[n_occur$Freq > 1,]


#Correcting soil temperature, normalizing to the lowest in April/May
plot(Ts~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD)
library(dplyr)
halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD <- halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD %>%
  mutate(month=as.numeric(format(datetime,format="%m")))


early_ts_halm <- halmyran %>%
  filter(datetime>as.POSIXct("2020-04-15", tz="UTC") & datetime<as.POSIXct("2020-05-01", tz="UTC")) %>%
  select(Ts)

early_ts_sto <- stortjarn %>%
  filter(datetime>as.POSIXct("2020-04-15", tz="UTC") & datetime<as.POSIXct("2020-05-01", tz="UTC")) %>%
  select(Ts)

early_ts_hals <- halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD %>%
  filter(datetime>as.POSIXct("2020-04-15", tz="UTC") & datetime<as.POSIXct("2020-05-01", tz="UTC")) %>%
  select(Ts_f)

early_ts_deg <- degero %>%
  filter(datetime>as.POSIXct("2020-04-15", tz="UTC") & datetime<as.POSIXct("2020-05-01", tz="UTC")) %>%
  select(Ts)

indices <- as.numeric(rownames(early_ts_halm))

plot(early_ts_halm$Ts~indices,pch=16,cex=0.3, ylim=c(0,1.2))
#plot(pmax(early_ts_halm$Ts_f-max(early_ts_halm$Ts_f),0)~indices,pch=16,cex=0.3, ylim=c(0,1.2))
points(early_ts_sto$Ts~indices,pch=16,cex=0.3,col=2)
points(early_ts_hals$Ts_f~indices,pch=16,cex=0.3,col=3)
points(early_ts_deg$Ts~indices,pch=16,cex=0.3,col=4)

mean(early_ts_halm$Ts)
mean(early_ts_sto$Ts)
mean(early_ts_hals$Ts)
mean(early_ts_deg$Ts)


halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$Ts_f_ori <- halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$Ts_f
halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$Ts_f <- halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$Ts_f_ori - mean(early_ts_hals$Ts_f)
halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$Ts_f[which(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$Ts_f<0)] <- 0

plot(Ts~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD)
############################
#Gapfilling precipitation


plot(P~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD)
length(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$P[which(is.na(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD$P))])
halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P <- gapfill_between_sites(datetime="datetime", df_to_fill=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD, 
                                                                                        ind_df1=stortjarn, ind_df2=halmyran,
                                                                                        ind_df3=NULL, col_to_fill="P",#ind_col1=col_to_fill,
                                                                                        ind_col2=NULL)
plot(P_f~datetime, data=halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P)

halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P$P_f <- na.approx(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P$P_f) 

######################SAVING ALL   
#Halmyran
# write.table(halmyran_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts,"D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Halmyran/halmyran_processed/exploring_results/gapf_meteo/Halmyran_2021_01_15_meteo_GF.csv",
#             sep=",", row.names = F)
# write.table(halmyran_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P,"D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Halmyran/halmyran_processed/exploring_results/gapf_meteo/Halmyran_2021_02_05_meteo_GF.csv",
#             sep=",", row.names = F)
# 
# #Stortjarn
# # write.table(stortjarn_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts,"D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Stortjarn/pre_processed/exploring_results/gapf_meteo/Stortjarn_2021_01_15_meteo_GF.csv",
# #             sep=",", row.names = F)
# write.table(stortjarn_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P,"D:/slu/eddy_covariance/myphd/For_Kofi_copy_&_delete/Stortjarn/pre_processed/exploring_results/gapf_meteo/Stortjarn_2021_02_05_meteo_GF.csv",
#             sep=",", row.names = F)


#reading the saved file to start from there...
# halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P <- read.table("C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25_QC_meteo_GF.csv", sep=",", header  = T)
# halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P$datetime <- as.POSIXct(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P$datetime, format="%Y-%m-%d %H:%M",tz="UTC")

###############################
##########INVESTIGATING THE WTD
ggplotler(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P, x="datetime",y="VPD_f")
ggplotler(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P, x="datetime",y="WTD_f")
ggplotler(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P, x="datetime",y="Tw1_a")
ggplotler(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P, x="datetime",y="Tw1_b")
ggplotler(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P, x="datetime",y="u_rot_f")



ggplotler(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P[which(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P$month %in% c(12,1,2,3)),], 
          x="WTD",y="SNOWd")

summary(lm(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P$ET~halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P$WTD))

hals <- halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P[,c("datetime", "WTD", "WTD_f")]
names(hals) <- c("datetime","WTD_hals", "WTD_f")

deg <- degero[,c("datetime", "WTD1","WTD2","WTD3","WTD4")]

hals_deg <- merge(hals, deg, all=TRUE)
hals_deg$date <- as.Date(hals_deg$datetime)

ggplotler(hals_deg[which(hals_deg$date > as.Date("2020-12-07")),],"WTD3","WTD_hals")

hals_deg$WTD_smooth <- frollmean(hals_deg$WTD_f, 5)

ggplotler(hals_deg, x="datetime",y="WTD_smooth")
ggplotler(hals_deg, x="datetime",y="WTD_f")


#smoothing
loess_fit <- loess(WTD_f ~ as.numeric(datetime), halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P, span=0.06)
plot(loess_fit$x, predict(loess_fit))


library(anytime)


WTD_smooth <- predict(loess_fit)
WTD_smooth_df <- data.frame(datetime=anytime(loess_fit$x, tz="UTC"), WTD_smooth)

halsingfors_final <- merge(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P, WTD_smooth_df, by="datetime", all = TRUE)

ggplot(halsingfors_final, aes(datetime,WTD_f))+
  geom_line(mapping=aes(datetime,WTD_smooth), color="red")+
  geom_point()
###############################
###############################
#Halsingfors
# write.table(halsingfors_Ta_PARin_SWin_WTD_urot_Pa_SWout_PARout_Ts_RH_VPD_P,"C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25_QC_meteo_GF.csv",
#             sep=",", row.names = F)

write.table(halsingfors_final,"C:/BRAVE/slu/eddy_covariance/myphd/Data_organized/Halsingfors/Eddypro_output/Halsingfors_period2_2022-04-25_QC_meteo_GF2.csv",
            sep=",", row.names = F)
